
F429-DWM1000.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cec8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000061c  0800d078  0800d078  0001d078  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d694  0800d694  00020214  2**0
                  CONTENTS
  4 .ARM          00000008  0800d694  0800d694  0001d694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d69c  0800d69c  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800d69c  0800d69c  0001d69c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  0800d6a8  0800d6a8  0001d6a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  0800d6b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020214  2**0
                  CONTENTS
 10 .bss          00000390  20000218  20000218  00020218  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200005a8  200005a8  00020218  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 13 .debug_info   00029470  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000462a  00000000  00000000  000496b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ad8  00000000  00000000  0004dce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a18  00000000  00000000  0004f7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002dabc  00000000  00000000  000511d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c58d  00000000  00000000  0007ec8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee7d2  00000000  00000000  0009b219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001899eb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008414  00000000  00000000  00189a3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000218 	.word	0x20000218
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800d060 	.word	0x0800d060

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000021c 	.word	0x2000021c
 80001ec:	0800d060 	.word	0x0800d060

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_frsub>:
 8000ca8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	e002      	b.n	8000cb4 <__addsf3>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_fsub>:
 8000cb0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cb4 <__addsf3>:
 8000cb4:	0042      	lsls	r2, r0, #1
 8000cb6:	bf1f      	itttt	ne
 8000cb8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cbc:	ea92 0f03 	teqne	r2, r3
 8000cc0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cc4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cc8:	d06a      	beq.n	8000da0 <__addsf3+0xec>
 8000cca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cd2:	bfc1      	itttt	gt
 8000cd4:	18d2      	addgt	r2, r2, r3
 8000cd6:	4041      	eorgt	r1, r0
 8000cd8:	4048      	eorgt	r0, r1
 8000cda:	4041      	eorgt	r1, r0
 8000cdc:	bfb8      	it	lt
 8000cde:	425b      	neglt	r3, r3
 8000ce0:	2b19      	cmp	r3, #25
 8000ce2:	bf88      	it	hi
 8000ce4:	4770      	bxhi	lr
 8000ce6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000cf2:	bf18      	it	ne
 8000cf4:	4240      	negne	r0, r0
 8000cf6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cfa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cfe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d02:	bf18      	it	ne
 8000d04:	4249      	negne	r1, r1
 8000d06:	ea92 0f03 	teq	r2, r3
 8000d0a:	d03f      	beq.n	8000d8c <__addsf3+0xd8>
 8000d0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d10:	fa41 fc03 	asr.w	ip, r1, r3
 8000d14:	eb10 000c 	adds.w	r0, r0, ip
 8000d18:	f1c3 0320 	rsb	r3, r3, #32
 8000d1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d20:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d24:	d502      	bpl.n	8000d2c <__addsf3+0x78>
 8000d26:	4249      	negs	r1, r1
 8000d28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d2c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d30:	d313      	bcc.n	8000d5a <__addsf3+0xa6>
 8000d32:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d36:	d306      	bcc.n	8000d46 <__addsf3+0x92>
 8000d38:	0840      	lsrs	r0, r0, #1
 8000d3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d3e:	f102 0201 	add.w	r2, r2, #1
 8000d42:	2afe      	cmp	r2, #254	; 0xfe
 8000d44:	d251      	bcs.n	8000dea <__addsf3+0x136>
 8000d46:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d4e:	bf08      	it	eq
 8000d50:	f020 0001 	biceq.w	r0, r0, #1
 8000d54:	ea40 0003 	orr.w	r0, r0, r3
 8000d58:	4770      	bx	lr
 8000d5a:	0049      	lsls	r1, r1, #1
 8000d5c:	eb40 0000 	adc.w	r0, r0, r0
 8000d60:	3a01      	subs	r2, #1
 8000d62:	bf28      	it	cs
 8000d64:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d68:	d2ed      	bcs.n	8000d46 <__addsf3+0x92>
 8000d6a:	fab0 fc80 	clz	ip, r0
 8000d6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d72:	ebb2 020c 	subs.w	r2, r2, ip
 8000d76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d7a:	bfaa      	itet	ge
 8000d7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d80:	4252      	neglt	r2, r2
 8000d82:	4318      	orrge	r0, r3
 8000d84:	bfbc      	itt	lt
 8000d86:	40d0      	lsrlt	r0, r2
 8000d88:	4318      	orrlt	r0, r3
 8000d8a:	4770      	bx	lr
 8000d8c:	f092 0f00 	teq	r2, #0
 8000d90:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d94:	bf06      	itte	eq
 8000d96:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d9a:	3201      	addeq	r2, #1
 8000d9c:	3b01      	subne	r3, #1
 8000d9e:	e7b5      	b.n	8000d0c <__addsf3+0x58>
 8000da0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000da4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000da8:	bf18      	it	ne
 8000daa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dae:	d021      	beq.n	8000df4 <__addsf3+0x140>
 8000db0:	ea92 0f03 	teq	r2, r3
 8000db4:	d004      	beq.n	8000dc0 <__addsf3+0x10c>
 8000db6:	f092 0f00 	teq	r2, #0
 8000dba:	bf08      	it	eq
 8000dbc:	4608      	moveq	r0, r1
 8000dbe:	4770      	bx	lr
 8000dc0:	ea90 0f01 	teq	r0, r1
 8000dc4:	bf1c      	itt	ne
 8000dc6:	2000      	movne	r0, #0
 8000dc8:	4770      	bxne	lr
 8000dca:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dce:	d104      	bne.n	8000dda <__addsf3+0x126>
 8000dd0:	0040      	lsls	r0, r0, #1
 8000dd2:	bf28      	it	cs
 8000dd4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000dd8:	4770      	bx	lr
 8000dda:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dde:	bf3c      	itt	cc
 8000de0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000de4:	4770      	bxcc	lr
 8000de6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dea:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000df2:	4770      	bx	lr
 8000df4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000df8:	bf16      	itet	ne
 8000dfa:	4608      	movne	r0, r1
 8000dfc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e00:	4601      	movne	r1, r0
 8000e02:	0242      	lsls	r2, r0, #9
 8000e04:	bf06      	itte	eq
 8000e06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e0a:	ea90 0f01 	teqeq	r0, r1
 8000e0e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e12:	4770      	bx	lr

08000e14 <__aeabi_ui2f>:
 8000e14:	f04f 0300 	mov.w	r3, #0
 8000e18:	e004      	b.n	8000e24 <__aeabi_i2f+0x8>
 8000e1a:	bf00      	nop

08000e1c <__aeabi_i2f>:
 8000e1c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e20:	bf48      	it	mi
 8000e22:	4240      	negmi	r0, r0
 8000e24:	ea5f 0c00 	movs.w	ip, r0
 8000e28:	bf08      	it	eq
 8000e2a:	4770      	bxeq	lr
 8000e2c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e30:	4601      	mov	r1, r0
 8000e32:	f04f 0000 	mov.w	r0, #0
 8000e36:	e01c      	b.n	8000e72 <__aeabi_l2f+0x2a>

08000e38 <__aeabi_ul2f>:
 8000e38:	ea50 0201 	orrs.w	r2, r0, r1
 8000e3c:	bf08      	it	eq
 8000e3e:	4770      	bxeq	lr
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	e00a      	b.n	8000e5c <__aeabi_l2f+0x14>
 8000e46:	bf00      	nop

08000e48 <__aeabi_l2f>:
 8000e48:	ea50 0201 	orrs.w	r2, r0, r1
 8000e4c:	bf08      	it	eq
 8000e4e:	4770      	bxeq	lr
 8000e50:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e54:	d502      	bpl.n	8000e5c <__aeabi_l2f+0x14>
 8000e56:	4240      	negs	r0, r0
 8000e58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e5c:	ea5f 0c01 	movs.w	ip, r1
 8000e60:	bf02      	ittt	eq
 8000e62:	4684      	moveq	ip, r0
 8000e64:	4601      	moveq	r1, r0
 8000e66:	2000      	moveq	r0, #0
 8000e68:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e6c:	bf08      	it	eq
 8000e6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e72:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e76:	fabc f28c 	clz	r2, ip
 8000e7a:	3a08      	subs	r2, #8
 8000e7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e80:	db10      	blt.n	8000ea4 <__aeabi_l2f+0x5c>
 8000e82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e86:	4463      	add	r3, ip
 8000e88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e8c:	f1c2 0220 	rsb	r2, r2, #32
 8000e90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e94:	fa20 f202 	lsr.w	r2, r0, r2
 8000e98:	eb43 0002 	adc.w	r0, r3, r2
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f102 0220 	add.w	r2, r2, #32
 8000ea8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eac:	f1c2 0220 	rsb	r2, r2, #32
 8000eb0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000eb4:	fa21 f202 	lsr.w	r2, r1, r2
 8000eb8:	eb43 0002 	adc.w	r0, r3, r2
 8000ebc:	bf08      	it	eq
 8000ebe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ec2:	4770      	bx	lr

08000ec4 <__aeabi_ldivmod>:
 8000ec4:	b97b      	cbnz	r3, 8000ee6 <__aeabi_ldivmod+0x22>
 8000ec6:	b972      	cbnz	r2, 8000ee6 <__aeabi_ldivmod+0x22>
 8000ec8:	2900      	cmp	r1, #0
 8000eca:	bfbe      	ittt	lt
 8000ecc:	2000      	movlt	r0, #0
 8000ece:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ed2:	e006      	blt.n	8000ee2 <__aeabi_ldivmod+0x1e>
 8000ed4:	bf08      	it	eq
 8000ed6:	2800      	cmpeq	r0, #0
 8000ed8:	bf1c      	itt	ne
 8000eda:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ede:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ee2:	f000 b9f3 	b.w	80012cc <__aeabi_idiv0>
 8000ee6:	f1ad 0c08 	sub.w	ip, sp, #8
 8000eea:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000eee:	2900      	cmp	r1, #0
 8000ef0:	db09      	blt.n	8000f06 <__aeabi_ldivmod+0x42>
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	db1a      	blt.n	8000f2c <__aeabi_ldivmod+0x68>
 8000ef6:	f000 f881 	bl	8000ffc <__udivmoddi4>
 8000efa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000efe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f02:	b004      	add	sp, #16
 8000f04:	4770      	bx	lr
 8000f06:	4240      	negs	r0, r0
 8000f08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	db1b      	blt.n	8000f48 <__aeabi_ldivmod+0x84>
 8000f10:	f000 f874 	bl	8000ffc <__udivmoddi4>
 8000f14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f1c:	b004      	add	sp, #16
 8000f1e:	4240      	negs	r0, r0
 8000f20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f24:	4252      	negs	r2, r2
 8000f26:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f2a:	4770      	bx	lr
 8000f2c:	4252      	negs	r2, r2
 8000f2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f32:	f000 f863 	bl	8000ffc <__udivmoddi4>
 8000f36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f3e:	b004      	add	sp, #16
 8000f40:	4240      	negs	r0, r0
 8000f42:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f46:	4770      	bx	lr
 8000f48:	4252      	negs	r2, r2
 8000f4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f4e:	f000 f855 	bl	8000ffc <__udivmoddi4>
 8000f52:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f5a:	b004      	add	sp, #16
 8000f5c:	4252      	negs	r2, r2
 8000f5e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f62:	4770      	bx	lr

08000f64 <__aeabi_uldivmod>:
 8000f64:	b953      	cbnz	r3, 8000f7c <__aeabi_uldivmod+0x18>
 8000f66:	b94a      	cbnz	r2, 8000f7c <__aeabi_uldivmod+0x18>
 8000f68:	2900      	cmp	r1, #0
 8000f6a:	bf08      	it	eq
 8000f6c:	2800      	cmpeq	r0, #0
 8000f6e:	bf1c      	itt	ne
 8000f70:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000f74:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000f78:	f000 b9a8 	b.w	80012cc <__aeabi_idiv0>
 8000f7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f84:	f000 f83a 	bl	8000ffc <__udivmoddi4>
 8000f88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f90:	b004      	add	sp, #16
 8000f92:	4770      	bx	lr

08000f94 <__aeabi_f2lz>:
 8000f94:	ee07 0a90 	vmov	s15, r0
 8000f98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fa0:	d401      	bmi.n	8000fa6 <__aeabi_f2lz+0x12>
 8000fa2:	f000 b80b 	b.w	8000fbc <__aeabi_f2ulz>
 8000fa6:	eef1 7a67 	vneg.f32	s15, s15
 8000faa:	b508      	push	{r3, lr}
 8000fac:	ee17 0a90 	vmov	r0, s15
 8000fb0:	f000 f804 	bl	8000fbc <__aeabi_f2ulz>
 8000fb4:	4240      	negs	r0, r0
 8000fb6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fba:	bd08      	pop	{r3, pc}

08000fbc <__aeabi_f2ulz>:
 8000fbc:	b5d0      	push	{r4, r6, r7, lr}
 8000fbe:	f7ff fad3 	bl	8000568 <__aeabi_f2d>
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <__aeabi_f2ulz+0x38>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	4606      	mov	r6, r0
 8000fc8:	460f      	mov	r7, r1
 8000fca:	f7ff fb25 	bl	8000618 <__aeabi_dmul>
 8000fce:	f7ff fdfb 	bl	8000bc8 <__aeabi_d2uiz>
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	f7ff faa6 	bl	8000524 <__aeabi_ui2d>
 8000fd8:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <__aeabi_f2ulz+0x3c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f7ff fb1c 	bl	8000618 <__aeabi_dmul>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	4639      	mov	r1, r7
 8000fe8:	f7ff f95e 	bl	80002a8 <__aeabi_dsub>
 8000fec:	f7ff fdec 	bl	8000bc8 <__aeabi_d2uiz>
 8000ff0:	4621      	mov	r1, r4
 8000ff2:	bdd0      	pop	{r4, r6, r7, pc}
 8000ff4:	3df00000 	.word	0x3df00000
 8000ff8:	41f00000 	.word	0x41f00000

08000ffc <__udivmoddi4>:
 8000ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001000:	9d08      	ldr	r5, [sp, #32]
 8001002:	4604      	mov	r4, r0
 8001004:	468e      	mov	lr, r1
 8001006:	2b00      	cmp	r3, #0
 8001008:	d14d      	bne.n	80010a6 <__udivmoddi4+0xaa>
 800100a:	428a      	cmp	r2, r1
 800100c:	4694      	mov	ip, r2
 800100e:	d969      	bls.n	80010e4 <__udivmoddi4+0xe8>
 8001010:	fab2 f282 	clz	r2, r2
 8001014:	b152      	cbz	r2, 800102c <__udivmoddi4+0x30>
 8001016:	fa01 f302 	lsl.w	r3, r1, r2
 800101a:	f1c2 0120 	rsb	r1, r2, #32
 800101e:	fa20 f101 	lsr.w	r1, r0, r1
 8001022:	fa0c fc02 	lsl.w	ip, ip, r2
 8001026:	ea41 0e03 	orr.w	lr, r1, r3
 800102a:	4094      	lsls	r4, r2
 800102c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001030:	0c21      	lsrs	r1, r4, #16
 8001032:	fbbe f6f8 	udiv	r6, lr, r8
 8001036:	fa1f f78c 	uxth.w	r7, ip
 800103a:	fb08 e316 	mls	r3, r8, r6, lr
 800103e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8001042:	fb06 f107 	mul.w	r1, r6, r7
 8001046:	4299      	cmp	r1, r3
 8001048:	d90a      	bls.n	8001060 <__udivmoddi4+0x64>
 800104a:	eb1c 0303 	adds.w	r3, ip, r3
 800104e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8001052:	f080 811f 	bcs.w	8001294 <__udivmoddi4+0x298>
 8001056:	4299      	cmp	r1, r3
 8001058:	f240 811c 	bls.w	8001294 <__udivmoddi4+0x298>
 800105c:	3e02      	subs	r6, #2
 800105e:	4463      	add	r3, ip
 8001060:	1a5b      	subs	r3, r3, r1
 8001062:	b2a4      	uxth	r4, r4
 8001064:	fbb3 f0f8 	udiv	r0, r3, r8
 8001068:	fb08 3310 	mls	r3, r8, r0, r3
 800106c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001070:	fb00 f707 	mul.w	r7, r0, r7
 8001074:	42a7      	cmp	r7, r4
 8001076:	d90a      	bls.n	800108e <__udivmoddi4+0x92>
 8001078:	eb1c 0404 	adds.w	r4, ip, r4
 800107c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8001080:	f080 810a 	bcs.w	8001298 <__udivmoddi4+0x29c>
 8001084:	42a7      	cmp	r7, r4
 8001086:	f240 8107 	bls.w	8001298 <__udivmoddi4+0x29c>
 800108a:	4464      	add	r4, ip
 800108c:	3802      	subs	r0, #2
 800108e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001092:	1be4      	subs	r4, r4, r7
 8001094:	2600      	movs	r6, #0
 8001096:	b11d      	cbz	r5, 80010a0 <__udivmoddi4+0xa4>
 8001098:	40d4      	lsrs	r4, r2
 800109a:	2300      	movs	r3, #0
 800109c:	e9c5 4300 	strd	r4, r3, [r5]
 80010a0:	4631      	mov	r1, r6
 80010a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010a6:	428b      	cmp	r3, r1
 80010a8:	d909      	bls.n	80010be <__udivmoddi4+0xc2>
 80010aa:	2d00      	cmp	r5, #0
 80010ac:	f000 80ef 	beq.w	800128e <__udivmoddi4+0x292>
 80010b0:	2600      	movs	r6, #0
 80010b2:	e9c5 0100 	strd	r0, r1, [r5]
 80010b6:	4630      	mov	r0, r6
 80010b8:	4631      	mov	r1, r6
 80010ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010be:	fab3 f683 	clz	r6, r3
 80010c2:	2e00      	cmp	r6, #0
 80010c4:	d14a      	bne.n	800115c <__udivmoddi4+0x160>
 80010c6:	428b      	cmp	r3, r1
 80010c8:	d302      	bcc.n	80010d0 <__udivmoddi4+0xd4>
 80010ca:	4282      	cmp	r2, r0
 80010cc:	f200 80f9 	bhi.w	80012c2 <__udivmoddi4+0x2c6>
 80010d0:	1a84      	subs	r4, r0, r2
 80010d2:	eb61 0303 	sbc.w	r3, r1, r3
 80010d6:	2001      	movs	r0, #1
 80010d8:	469e      	mov	lr, r3
 80010da:	2d00      	cmp	r5, #0
 80010dc:	d0e0      	beq.n	80010a0 <__udivmoddi4+0xa4>
 80010de:	e9c5 4e00 	strd	r4, lr, [r5]
 80010e2:	e7dd      	b.n	80010a0 <__udivmoddi4+0xa4>
 80010e4:	b902      	cbnz	r2, 80010e8 <__udivmoddi4+0xec>
 80010e6:	deff      	udf	#255	; 0xff
 80010e8:	fab2 f282 	clz	r2, r2
 80010ec:	2a00      	cmp	r2, #0
 80010ee:	f040 8092 	bne.w	8001216 <__udivmoddi4+0x21a>
 80010f2:	eba1 010c 	sub.w	r1, r1, ip
 80010f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010fa:	fa1f fe8c 	uxth.w	lr, ip
 80010fe:	2601      	movs	r6, #1
 8001100:	0c20      	lsrs	r0, r4, #16
 8001102:	fbb1 f3f7 	udiv	r3, r1, r7
 8001106:	fb07 1113 	mls	r1, r7, r3, r1
 800110a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800110e:	fb0e f003 	mul.w	r0, lr, r3
 8001112:	4288      	cmp	r0, r1
 8001114:	d908      	bls.n	8001128 <__udivmoddi4+0x12c>
 8001116:	eb1c 0101 	adds.w	r1, ip, r1
 800111a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800111e:	d202      	bcs.n	8001126 <__udivmoddi4+0x12a>
 8001120:	4288      	cmp	r0, r1
 8001122:	f200 80cb 	bhi.w	80012bc <__udivmoddi4+0x2c0>
 8001126:	4643      	mov	r3, r8
 8001128:	1a09      	subs	r1, r1, r0
 800112a:	b2a4      	uxth	r4, r4
 800112c:	fbb1 f0f7 	udiv	r0, r1, r7
 8001130:	fb07 1110 	mls	r1, r7, r0, r1
 8001134:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8001138:	fb0e fe00 	mul.w	lr, lr, r0
 800113c:	45a6      	cmp	lr, r4
 800113e:	d908      	bls.n	8001152 <__udivmoddi4+0x156>
 8001140:	eb1c 0404 	adds.w	r4, ip, r4
 8001144:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8001148:	d202      	bcs.n	8001150 <__udivmoddi4+0x154>
 800114a:	45a6      	cmp	lr, r4
 800114c:	f200 80bb 	bhi.w	80012c6 <__udivmoddi4+0x2ca>
 8001150:	4608      	mov	r0, r1
 8001152:	eba4 040e 	sub.w	r4, r4, lr
 8001156:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800115a:	e79c      	b.n	8001096 <__udivmoddi4+0x9a>
 800115c:	f1c6 0720 	rsb	r7, r6, #32
 8001160:	40b3      	lsls	r3, r6
 8001162:	fa22 fc07 	lsr.w	ip, r2, r7
 8001166:	ea4c 0c03 	orr.w	ip, ip, r3
 800116a:	fa20 f407 	lsr.w	r4, r0, r7
 800116e:	fa01 f306 	lsl.w	r3, r1, r6
 8001172:	431c      	orrs	r4, r3
 8001174:	40f9      	lsrs	r1, r7
 8001176:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800117a:	fa00 f306 	lsl.w	r3, r0, r6
 800117e:	fbb1 f8f9 	udiv	r8, r1, r9
 8001182:	0c20      	lsrs	r0, r4, #16
 8001184:	fa1f fe8c 	uxth.w	lr, ip
 8001188:	fb09 1118 	mls	r1, r9, r8, r1
 800118c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001190:	fb08 f00e 	mul.w	r0, r8, lr
 8001194:	4288      	cmp	r0, r1
 8001196:	fa02 f206 	lsl.w	r2, r2, r6
 800119a:	d90b      	bls.n	80011b4 <__udivmoddi4+0x1b8>
 800119c:	eb1c 0101 	adds.w	r1, ip, r1
 80011a0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80011a4:	f080 8088 	bcs.w	80012b8 <__udivmoddi4+0x2bc>
 80011a8:	4288      	cmp	r0, r1
 80011aa:	f240 8085 	bls.w	80012b8 <__udivmoddi4+0x2bc>
 80011ae:	f1a8 0802 	sub.w	r8, r8, #2
 80011b2:	4461      	add	r1, ip
 80011b4:	1a09      	subs	r1, r1, r0
 80011b6:	b2a4      	uxth	r4, r4
 80011b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80011bc:	fb09 1110 	mls	r1, r9, r0, r1
 80011c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80011c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80011c8:	458e      	cmp	lr, r1
 80011ca:	d908      	bls.n	80011de <__udivmoddi4+0x1e2>
 80011cc:	eb1c 0101 	adds.w	r1, ip, r1
 80011d0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80011d4:	d26c      	bcs.n	80012b0 <__udivmoddi4+0x2b4>
 80011d6:	458e      	cmp	lr, r1
 80011d8:	d96a      	bls.n	80012b0 <__udivmoddi4+0x2b4>
 80011da:	3802      	subs	r0, #2
 80011dc:	4461      	add	r1, ip
 80011de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80011e2:	fba0 9402 	umull	r9, r4, r0, r2
 80011e6:	eba1 010e 	sub.w	r1, r1, lr
 80011ea:	42a1      	cmp	r1, r4
 80011ec:	46c8      	mov	r8, r9
 80011ee:	46a6      	mov	lr, r4
 80011f0:	d356      	bcc.n	80012a0 <__udivmoddi4+0x2a4>
 80011f2:	d053      	beq.n	800129c <__udivmoddi4+0x2a0>
 80011f4:	b15d      	cbz	r5, 800120e <__udivmoddi4+0x212>
 80011f6:	ebb3 0208 	subs.w	r2, r3, r8
 80011fa:	eb61 010e 	sbc.w	r1, r1, lr
 80011fe:	fa01 f707 	lsl.w	r7, r1, r7
 8001202:	fa22 f306 	lsr.w	r3, r2, r6
 8001206:	40f1      	lsrs	r1, r6
 8001208:	431f      	orrs	r7, r3
 800120a:	e9c5 7100 	strd	r7, r1, [r5]
 800120e:	2600      	movs	r6, #0
 8001210:	4631      	mov	r1, r6
 8001212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001216:	f1c2 0320 	rsb	r3, r2, #32
 800121a:	40d8      	lsrs	r0, r3
 800121c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001220:	fa21 f303 	lsr.w	r3, r1, r3
 8001224:	4091      	lsls	r1, r2
 8001226:	4301      	orrs	r1, r0
 8001228:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800122c:	fa1f fe8c 	uxth.w	lr, ip
 8001230:	fbb3 f0f7 	udiv	r0, r3, r7
 8001234:	fb07 3610 	mls	r6, r7, r0, r3
 8001238:	0c0b      	lsrs	r3, r1, #16
 800123a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800123e:	fb00 f60e 	mul.w	r6, r0, lr
 8001242:	429e      	cmp	r6, r3
 8001244:	fa04 f402 	lsl.w	r4, r4, r2
 8001248:	d908      	bls.n	800125c <__udivmoddi4+0x260>
 800124a:	eb1c 0303 	adds.w	r3, ip, r3
 800124e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8001252:	d22f      	bcs.n	80012b4 <__udivmoddi4+0x2b8>
 8001254:	429e      	cmp	r6, r3
 8001256:	d92d      	bls.n	80012b4 <__udivmoddi4+0x2b8>
 8001258:	3802      	subs	r0, #2
 800125a:	4463      	add	r3, ip
 800125c:	1b9b      	subs	r3, r3, r6
 800125e:	b289      	uxth	r1, r1
 8001260:	fbb3 f6f7 	udiv	r6, r3, r7
 8001264:	fb07 3316 	mls	r3, r7, r6, r3
 8001268:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800126c:	fb06 f30e 	mul.w	r3, r6, lr
 8001270:	428b      	cmp	r3, r1
 8001272:	d908      	bls.n	8001286 <__udivmoddi4+0x28a>
 8001274:	eb1c 0101 	adds.w	r1, ip, r1
 8001278:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800127c:	d216      	bcs.n	80012ac <__udivmoddi4+0x2b0>
 800127e:	428b      	cmp	r3, r1
 8001280:	d914      	bls.n	80012ac <__udivmoddi4+0x2b0>
 8001282:	3e02      	subs	r6, #2
 8001284:	4461      	add	r1, ip
 8001286:	1ac9      	subs	r1, r1, r3
 8001288:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800128c:	e738      	b.n	8001100 <__udivmoddi4+0x104>
 800128e:	462e      	mov	r6, r5
 8001290:	4628      	mov	r0, r5
 8001292:	e705      	b.n	80010a0 <__udivmoddi4+0xa4>
 8001294:	4606      	mov	r6, r0
 8001296:	e6e3      	b.n	8001060 <__udivmoddi4+0x64>
 8001298:	4618      	mov	r0, r3
 800129a:	e6f8      	b.n	800108e <__udivmoddi4+0x92>
 800129c:	454b      	cmp	r3, r9
 800129e:	d2a9      	bcs.n	80011f4 <__udivmoddi4+0x1f8>
 80012a0:	ebb9 0802 	subs.w	r8, r9, r2
 80012a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80012a8:	3801      	subs	r0, #1
 80012aa:	e7a3      	b.n	80011f4 <__udivmoddi4+0x1f8>
 80012ac:	4646      	mov	r6, r8
 80012ae:	e7ea      	b.n	8001286 <__udivmoddi4+0x28a>
 80012b0:	4620      	mov	r0, r4
 80012b2:	e794      	b.n	80011de <__udivmoddi4+0x1e2>
 80012b4:	4640      	mov	r0, r8
 80012b6:	e7d1      	b.n	800125c <__udivmoddi4+0x260>
 80012b8:	46d0      	mov	r8, sl
 80012ba:	e77b      	b.n	80011b4 <__udivmoddi4+0x1b8>
 80012bc:	3b02      	subs	r3, #2
 80012be:	4461      	add	r1, ip
 80012c0:	e732      	b.n	8001128 <__udivmoddi4+0x12c>
 80012c2:	4630      	mov	r0, r6
 80012c4:	e709      	b.n	80010da <__udivmoddi4+0xde>
 80012c6:	4464      	add	r4, ip
 80012c8:	3802      	subs	r0, #2
 80012ca:	e742      	b.n	8001152 <__udivmoddi4+0x156>

080012cc <__aeabi_idiv0>:
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop

080012d0 <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(int config)
{
 80012d0:	b590      	push	{r4, r7, lr}
 80012d2:	b087      	sub	sp, #28
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
    uint16 otp_xtaltrim_and_rev = 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	82fb      	strh	r3, [r7, #22]
    uint32 ldo_tune = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	613b      	str	r3, [r7, #16]

    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 80012e0:	4b9f      	ldr	r3, [pc, #636]	; (8001560 <dwt_initialise+0x290>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2200      	movs	r2, #0
 80012e6:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 80012e8:	4b9d      	ldr	r3, [pc, #628]	; (8001560 <dwt_initialise+0x290>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2200      	movs	r2, #0
 80012ee:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 80012f0:	4b9b      	ldr	r3, [pc, #620]	; (8001560 <dwt_initialise+0x290>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2200      	movs	r2, #0
 80012f6:	82da      	strh	r2, [r3, #22]

    pdw1000local->cbTxDone = NULL;
 80012f8:	4b99      	ldr	r3, [pc, #612]	; (8001560 <dwt_initialise+0x290>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2200      	movs	r2, #0
 80012fe:	629a      	str	r2, [r3, #40]	; 0x28
    pdw1000local->cbRxOk = NULL;
 8001300:	4b97      	ldr	r3, [pc, #604]	; (8001560 <dwt_initialise+0x290>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2200      	movs	r2, #0
 8001306:	62da      	str	r2, [r3, #44]	; 0x2c
    pdw1000local->cbRxTo = NULL;
 8001308:	4b95      	ldr	r3, [pc, #596]	; (8001560 <dwt_initialise+0x290>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2200      	movs	r2, #0
 800130e:	631a      	str	r2, [r3, #48]	; 0x30
    pdw1000local->cbRxErr = NULL;
 8001310:	4b93      	ldr	r3, [pc, #588]	; (8001560 <dwt_initialise+0x290>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2200      	movs	r2, #0
 8001316:	635a      	str	r2, [r3, #52]	; 0x34
#if DWT_API_ERROR_CHECK
    pdw1000local->otp_mask = config ; // Save the READ_OTP config mask
#endif

    // Read and validate device ID, return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 8001318:	f000 f926 	bl	8001568 <dwt_readdevid>
 800131c:	4603      	mov	r3, r0
 800131e:	4a91      	ldr	r2, [pc, #580]	; (8001564 <dwt_initialise+0x294>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d002      	beq.n	800132a <dwt_initialise+0x5a>
    {
        return DWT_ERROR ;
 8001324:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001328:	e115      	b.n	8001556 <dwt_initialise+0x286>
    }

    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f003 0302 	and.w	r3, r3, #2
 8001330:	2b00      	cmp	r3, #0
 8001332:	d101      	bne.n	8001338 <dwt_initialise+0x68>
    {
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 8001334:	f000 fd3c 	bl	8001db0 <dwt_softreset>
    }

    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d004      	beq.n	800134c <dwt_initialise+0x7c>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8001348:	2b00      	cmp	r3, #0
 800134a:	d102      	bne.n	8001352 <dwt_initialise+0x82>
    {
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 800134c:	2000      	movs	r0, #0
 800134e:	f000 fc3f 	bl	8001bd0 <_dwt_enableclocks>
    }                                  // when not reading from OTP, clocks don't need to change.

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 8001352:	2204      	movs	r2, #4
 8001354:	2100      	movs	r1, #0
 8001356:	2024      	movs	r0, #36	; 0x24
 8001358:	f000 fb84 	bl	8001a64 <dwt_write8bitoffsetreg>

    // When DW1000 IC is initialised from power up, then the LDO value should be kicked from OTP, otherwise if this API is called after
    // DW1000 IC has been woken up (DWT_DW_WAKE_UP bit is set) this can be skipped as LDO would have already been automatically
    // kicked/loaded on wake up
    if(!(DWT_DW_WAKE_UP & config))
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d116      	bne.n	8001394 <dwt_initialise+0xc4>
    {
        // Load LDO tune from OTP and kick it if there is a value actually programmed.
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 8001366:	2004      	movs	r0, #4
 8001368:	f000 fbd2 	bl	8001b10 <_dwt_otpread>
 800136c:	6138      	str	r0, [r7, #16]
        if((ldo_tune & 0xFF) != 0)
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	b2db      	uxtb	r3, r3
 8001372:	2b00      	cmp	r3, #0
 8001374:	d01f      	beq.n	80013b6 <dwt_initialise+0xe6>
        {
            // Kick LDO tune
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
 8001376:	2202      	movs	r2, #2
 8001378:	2112      	movs	r1, #18
 800137a:	202d      	movs	r0, #45	; 0x2d
 800137c:	f000 fb72 	bl	8001a64 <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 8001380:	4b77      	ldr	r3, [pc, #476]	; (8001560 <dwt_initialise+0x290>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	8ada      	ldrh	r2, [r3, #22]
 8001386:	4b76      	ldr	r3, [pc, #472]	; (8001560 <dwt_initialise+0x290>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800138e:	b292      	uxth	r2, r2
 8001390:	82da      	strh	r2, [r3, #22]
 8001392:	e010      	b.n	80013b6 <dwt_initialise+0xe6>
        }
    }
    else
    {   //if LDOTUNE reg contains value different from default it means it was kicked from OTP and thus set AON_WCFG_ONW_LLDO.
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
 8001394:	2130      	movs	r1, #48	; 0x30
 8001396:	2028      	movs	r0, #40	; 0x28
 8001398:	f000 fb0d 	bl	80019b6 <dwt_read32bitoffsetreg>
 800139c:	4603      	mov	r3, r0
 800139e:	f1b3 3f88 	cmp.w	r3, #2290649224	; 0x88888888
 80013a2:	d008      	beq.n	80013b6 <dwt_initialise+0xe6>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 80013a4:	4b6e      	ldr	r3, [pc, #440]	; (8001560 <dwt_initialise+0x290>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	8ada      	ldrh	r2, [r3, #22]
 80013aa:	4b6d      	ldr	r3, [pc, #436]	; (8001560 <dwt_initialise+0x290>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80013b2:	b292      	uxth	r2, r2
 80013b4:	82da      	strh	r2, [r3, #22]
    }

    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f003 0302 	and.w	r3, r3, #2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d009      	beq.n	80013d4 <dwt_initialise+0x104>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d011      	beq.n	80013ee <dwt_initialise+0x11e>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f003 0308 	and.w	r3, r3, #8
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d00c      	beq.n	80013ee <dwt_initialise+0x11e>
    {
        // Read OTP revision number
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 80013d4:	201e      	movs	r0, #30
 80013d6:	f000 fb9b 	bl	8001b10 <_dwt_otpread>
 80013da:	4603      	mov	r3, r0
 80013dc:	82fb      	strh	r3, [r7, #22]
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 80013de:	8afb      	ldrh	r3, [r7, #22]
 80013e0:	0a1b      	lsrs	r3, r3, #8
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	4b5e      	ldr	r3, [pc, #376]	; (8001560 <dwt_initialise+0x290>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	b2d2      	uxtb	r2, r2
 80013ea:	72da      	strb	r2, [r3, #11]
 80013ec:	e003      	b.n	80013f6 <dwt_initialise+0x126>
    }
    else
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 80013ee:	4b5c      	ldr	r3, [pc, #368]	; (8001560 <dwt_initialise+0x290>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2200      	movs	r2, #0
 80013f4:	72da      	strb	r2, [r3, #11]
                                  // (DWT_DW_WAKE_UP bit is set), set otprev to 0

    if(!(DWT_DW_WAKE_UP & config))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d10b      	bne.n	8001418 <dwt_initialise+0x148>
    {
        // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 8001400:	8afb      	ldrh	r3, [r7, #22]
 8001402:	f003 031f 	and.w	r3, r3, #31
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <dwt_initialise+0x13e>
        {
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 800140a:	2310      	movs	r3, #16
 800140c:	82fb      	strh	r3, [r7, #22]
        }
        // Configure XTAL trim
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
 800140e:	8afb      	ldrh	r3, [r7, #22]
 8001410:	b2db      	uxtb	r3, r3
 8001412:	4618      	mov	r0, r3
 8001414:	f000 fcf2 	bl	8001dfc <dwt_setxtaltrim>
    }

    if(DWT_READ_OTP_PID & config)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f003 0310 	and.w	r3, r3, #16
 800141e:	2b00      	cmp	r3, #0
 8001420:	d007      	beq.n	8001432 <dwt_initialise+0x162>
    {
        // Load Part from OTP
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 8001422:	4b4f      	ldr	r3, [pc, #316]	; (8001560 <dwt_initialise+0x290>)
 8001424:	681c      	ldr	r4, [r3, #0]
 8001426:	2006      	movs	r0, #6
 8001428:	f000 fb72 	bl	8001b10 <_dwt_otpread>
 800142c:	4603      	mov	r3, r0
 800142e:	6023      	str	r3, [r4, #0]
 8001430:	e003      	b.n	800143a <dwt_initialise+0x16a>
    }
    else
    {
        pdw1000local->partID = 0;
 8001432:	4b4b      	ldr	r3, [pc, #300]	; (8001560 <dwt_initialise+0x290>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
    }

    if(DWT_READ_OTP_LID & config)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f003 0320 	and.w	r3, r3, #32
 8001440:	2b00      	cmp	r3, #0
 8001442:	d007      	beq.n	8001454 <dwt_initialise+0x184>
    {
        // Load Lot ID from OTP
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 8001444:	4b46      	ldr	r3, [pc, #280]	; (8001560 <dwt_initialise+0x290>)
 8001446:	681c      	ldr	r4, [r3, #0]
 8001448:	2007      	movs	r0, #7
 800144a:	f000 fb61 	bl	8001b10 <_dwt_otpread>
 800144e:	4603      	mov	r3, r0
 8001450:	6063      	str	r3, [r4, #4]
 8001452:	e003      	b.n	800145c <dwt_initialise+0x18c>
    }
    else
    {
        pdw1000local->lotID = 0;
 8001454:	4b42      	ldr	r3, [pc, #264]	; (8001560 <dwt_initialise+0x290>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2200      	movs	r2, #0
 800145a:	605a      	str	r2, [r3, #4]
    }

    if(DWT_READ_OTP_BAT & config)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001462:	2b00      	cmp	r3, #0
 8001464:	d008      	beq.n	8001478 <dwt_initialise+0x1a8>
    {
        // Load VBAT from OTP
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 8001466:	2008      	movs	r0, #8
 8001468:	f000 fb52 	bl	8001b10 <_dwt_otpread>
 800146c:	4602      	mov	r2, r0
 800146e:	4b3c      	ldr	r3, [pc, #240]	; (8001560 <dwt_initialise+0x290>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	b2d2      	uxtb	r2, r2
 8001474:	721a      	strb	r2, [r3, #8]
 8001476:	e003      	b.n	8001480 <dwt_initialise+0x1b0>
    }
    else
    {
        pdw1000local->vBatP = 0;
 8001478:	4b39      	ldr	r3, [pc, #228]	; (8001560 <dwt_initialise+0x290>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2200      	movs	r2, #0
 800147e:	721a      	strb	r2, [r3, #8]
    }

    if(DWT_READ_OTP_TMP & config)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001486:	2b00      	cmp	r3, #0
 8001488:	d008      	beq.n	800149c <dwt_initialise+0x1cc>
    {
        // Load TEMP from OTP
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 800148a:	2009      	movs	r0, #9
 800148c:	f000 fb40 	bl	8001b10 <_dwt_otpread>
 8001490:	4602      	mov	r2, r0
 8001492:	4b33      	ldr	r3, [pc, #204]	; (8001560 <dwt_initialise+0x290>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	b2d2      	uxtb	r2, r2
 8001498:	725a      	strb	r2, [r3, #9]
 800149a:	e003      	b.n	80014a4 <dwt_initialise+0x1d4>
    }
    else
    {
        pdw1000local->tempP = 0;
 800149c:	4b30      	ldr	r3, [pc, #192]	; (8001560 <dwt_initialise+0x290>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2200      	movs	r2, #0
 80014a2:	725a      	strb	r2, [r3, #9]
    }

    // Load leading edge detect code (LDE/microcode)
    if(!(DWT_DW_WAKE_UP & config))
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d121      	bne.n	80014f2 <dwt_initialise+0x222>
    {
        if(DWT_LOADUCODE & config)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f003 0301 	and.w	r3, r3, #1
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d00b      	beq.n	80014d0 <dwt_initialise+0x200>
        {
            _dwt_loaducodefromrom();
 80014b8:	f000 fb77 	bl	8001baa <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 80014bc:	4b28      	ldr	r3, [pc, #160]	; (8001560 <dwt_initialise+0x290>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	8ada      	ldrh	r2, [r3, #22]
 80014c2:	4b27      	ldr	r3, [pc, #156]	; (8001560 <dwt_initialise+0x290>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014ca:	b292      	uxth	r2, r2
 80014cc:	82da      	strh	r2, [r3, #22]
 80014ce:	e01e      	b.n	800150e <dwt_initialise+0x23e>
        }
        else // Should disable the LDERUN bit enable if LDE has not been loaded
        {
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 80014d0:	2105      	movs	r1, #5
 80014d2:	2036      	movs	r0, #54	; 0x36
 80014d4:	f000 fa96 	bl	8001a04 <dwt_read16bitoffsetreg>
 80014d8:	4603      	mov	r3, r0
 80014da:	81fb      	strh	r3, [r7, #14]
            rega &= 0xFDFF ; // Clear LDERUN bit
 80014dc:	89fb      	ldrh	r3, [r7, #14]
 80014de:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80014e2:	81fb      	strh	r3, [r7, #14]
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 80014e4:	89fb      	ldrh	r3, [r7, #14]
 80014e6:	461a      	mov	r2, r3
 80014e8:	2105      	movs	r1, #5
 80014ea:	2036      	movs	r0, #54	; 0x36
 80014ec:	f000 facd 	bl	8001a8a <dwt_write16bitoffsetreg>
 80014f0:	e00d      	b.n	800150e <dwt_initialise+0x23e>
        }
    }
    else //if DWT_DW_WUP_NO_UCODE is set then assume that the UCODE was loaded from ROM (i.e. DWT_LOADUCODE was set on power up),
    {     //thus set AON_WCFG_ONW_LLDE, otherwise don't set the AON_WCFG_ONW_LLDE bit in the sleep_mode configuration
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f003 0304 	and.w	r3, r3, #4
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d108      	bne.n	800150e <dwt_initialise+0x23e>
        {
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 80014fc:	4b18      	ldr	r3, [pc, #96]	; (8001560 <dwt_initialise+0x290>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	8ada      	ldrh	r2, [r3, #22]
 8001502:	4b17      	ldr	r3, [pc, #92]	; (8001560 <dwt_initialise+0x290>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800150a:	b292      	uxth	r2, r2
 800150c:	82da      	strh	r2, [r3, #22]
        }
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 800150e:	2001      	movs	r0, #1
 8001510:	f000 fb5e 	bl	8001bd0 <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 8001514:	2200      	movs	r2, #0
 8001516:	210a      	movs	r1, #10
 8001518:	202c      	movs	r0, #44	; 0x2c
 800151a:	f000 faa3 	bl	8001a64 <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 800151e:	4b10      	ldr	r3, [pc, #64]	; (8001560 <dwt_initialise+0x290>)
 8001520:	681c      	ldr	r4, [r3, #0]
 8001522:	2100      	movs	r1, #0
 8001524:	2004      	movs	r0, #4
 8001526:	f000 fa46 	bl	80019b6 <dwt_read32bitoffsetreg>
 800152a:	4603      	mov	r3, r0
 800152c:	6123      	str	r3, [r4, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 800152e:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <dwt_initialise+0x290>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	691b      	ldr	r3, [r3, #16]
 8001534:	0c1b      	lsrs	r3, r3, #16
 8001536:	b2da      	uxtb	r2, r3
 8001538:	4b09      	ldr	r3, [pc, #36]	; (8001560 <dwt_initialise+0x290>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f002 0203 	and.w	r2, r2, #3
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	729a      	strb	r2, [r3, #10]

    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 8001544:	4b06      	ldr	r3, [pc, #24]	; (8001560 <dwt_initialise+0x290>)
 8001546:	681c      	ldr	r4, [r3, #0]
 8001548:	2100      	movs	r1, #0
 800154a:	2008      	movs	r0, #8
 800154c:	f000 fa33 	bl	80019b6 <dwt_read32bitoffsetreg>
 8001550:	4603      	mov	r3, r0
 8001552:	60e3      	str	r3, [r4, #12]

    return DWT_SUCCESS ;
 8001554:	2300      	movs	r3, #0

} // end dwt_initialise()
 8001556:	4618      	mov	r0, r3
 8001558:	371c      	adds	r7, #28
 800155a:	46bd      	mov	sp, r7
 800155c:	bd90      	pop	{r4, r7, pc}
 800155e:	bf00      	nop
 8001560:	20000000 	.word	0x20000000
 8001564:	deca0130 	.word	0xdeca0130

08001568 <dwt_readdevid>:
 * output parameters
 *
 * returns the read value which for DW1000 is 0xDECA0130
 */
uint32 dwt_readdevid(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 800156c:	2100      	movs	r1, #0
 800156e:	2000      	movs	r0, #0
 8001570:	f000 fa21 	bl	80019b6 <dwt_read32bitoffsetreg>
 8001574:	4603      	mov	r3, r0
}
 8001576:	4618      	mov	r0, r3
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <dwt_configure>:
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
    uint8 nsSfd_result  = 0;
 8001584:	2300      	movs	r3, #0
 8001586:	75fb      	strb	r3, [r7, #23]
    uint8 useDWnsSFD = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	75bb      	strb	r3, [r7, #22]
    uint8 chan = config->chan ;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	74fb      	strb	r3, [r7, #19]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	795b      	ldrb	r3, [r3, #5]
 8001596:	461a      	mov	r2, r3
 8001598:	4ba5      	ldr	r3, [pc, #660]	; (8001830 <dwt_configure+0x2b4>)
 800159a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800159e:	82bb      	strh	r3, [r7, #20]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	785b      	ldrb	r3, [r3, #1]
 80015a4:	3b01      	subs	r3, #1
 80015a6:	74bb      	strb	r3, [r7, #18]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 80015a8:	7cfb      	ldrb	r3, [r7, #19]
 80015aa:	2b04      	cmp	r3, #4
 80015ac:	d002      	beq.n	80015b4 <dwt_configure+0x38>
 80015ae:	7cfb      	ldrb	r3, [r7, #19]
 80015b0:	2b07      	cmp	r3, #7
 80015b2:	d101      	bne.n	80015b8 <dwt_configure+0x3c>
 80015b4:	2301      	movs	r3, #1
 80015b6:	e000      	b.n	80015ba <dwt_configure+0x3e>
 80015b8:	2300      	movs	r3, #0
 80015ba:	747b      	strb	r3, [r7, #17]
           || (config->txPreambLength == DWT_PLEN_2048) || (config->txPreambLength == DWT_PLEN_4096));
    assert((config->phrMode == DWT_PHRMODE_STD) || (config->phrMode == DWT_PHRMODE_EXT));
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	79db      	ldrb	r3, [r3, #7]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d10b      	bne.n	80015dc <dwt_configure+0x60>
    {
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 80015c4:	4b9b      	ldr	r3, [pc, #620]	; (8001834 <dwt_configure+0x2b8>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	691a      	ldr	r2, [r3, #16]
 80015ca:	4b9a      	ldr	r3, [pc, #616]	; (8001834 <dwt_configure+0x2b8>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80015d2:	611a      	str	r2, [r3, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 80015d4:	8abb      	ldrh	r3, [r7, #20]
 80015d6:	08db      	lsrs	r3, r3, #3
 80015d8:	82bb      	strh	r3, [r7, #20]
 80015da:	e007      	b.n	80015ec <dwt_configure+0x70>
    }
    else
    {
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 80015dc:	4b95      	ldr	r3, [pc, #596]	; (8001834 <dwt_configure+0x2b8>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	691a      	ldr	r2, [r3, #16]
 80015e2:	4b94      	ldr	r3, [pc, #592]	; (8001834 <dwt_configure+0x2b8>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80015ea:	611a      	str	r2, [r3, #16]
    }

    pdw1000local->longFrames = config->phrMode ;
 80015ec:	4b91      	ldr	r3, [pc, #580]	; (8001834 <dwt_configure+0x2b8>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	7a12      	ldrb	r2, [r2, #8]
 80015f4:	729a      	strb	r2, [r3, #10]

    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 80015f6:	4b8f      	ldr	r3, [pc, #572]	; (8001834 <dwt_configure+0x2b8>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	691a      	ldr	r2, [r3, #16]
 80015fc:	4b8d      	ldr	r3, [pc, #564]	; (8001834 <dwt_configure+0x2b8>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001604:	611a      	str	r2, [r3, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 8001606:	4b8b      	ldr	r3, [pc, #556]	; (8001834 <dwt_configure+0x2b8>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6919      	ldr	r1, [r3, #16]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	7a1b      	ldrb	r3, [r3, #8]
 8001610:	041b      	lsls	r3, r3, #16
 8001612:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001616:	4b87      	ldr	r3, [pc, #540]	; (8001834 <dwt_configure+0x2b8>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	430a      	orrs	r2, r1
 800161c:	611a      	str	r2, [r3, #16]

    pdw1000local->sysCFGreg |= SYS_CFG_HIRQ_POL ;
 800161e:	4b85      	ldr	r3, [pc, #532]	; (8001834 <dwt_configure+0x2b8>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	691a      	ldr	r2, [r3, #16]
 8001624:	4b83      	ldr	r3, [pc, #524]	; (8001834 <dwt_configure+0x2b8>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800162c:	611a      	str	r2, [r3, #16]

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 800162e:	4b81      	ldr	r3, [pc, #516]	; (8001834 <dwt_configure+0x2b8>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	691b      	ldr	r3, [r3, #16]
 8001634:	461a      	mov	r2, r3
 8001636:	2100      	movs	r1, #0
 8001638:	2004      	movs	r0, #4
 800163a:	f000 fa42 	bl	8001ac2 <dwt_write32bitoffsetreg>
    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 800163e:	8abb      	ldrh	r3, [r7, #20]
 8001640:	461a      	mov	r2, r3
 8001642:	f642 0104 	movw	r1, #10244	; 0x2804
 8001646:	202e      	movs	r0, #46	; 0x2e
 8001648:	f000 fa1f 	bl	8001a8a <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex);
 800164c:	7cbb      	ldrb	r3, [r7, #18]
 800164e:	4618      	mov	r0, r3
 8001650:	f000 fa8b 	bl	8001b6a <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 8001654:	7cfb      	ldrb	r3, [r7, #19]
 8001656:	4a78      	ldr	r2, [pc, #480]	; (8001838 <dwt_configure+0x2bc>)
 8001658:	5cd3      	ldrb	r3, [r2, r3]
 800165a:	461a      	mov	r2, r3
 800165c:	4b77      	ldr	r3, [pc, #476]	; (800183c <dwt_configure+0x2c0>)
 800165e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001662:	461a      	mov	r2, r3
 8001664:	2107      	movs	r1, #7
 8001666:	202b      	movs	r0, #43	; 0x2b
 8001668:	f000 fa2b 	bl	8001ac2 <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 800166c:	7cfb      	ldrb	r3, [r7, #19]
 800166e:	4a72      	ldr	r2, [pc, #456]	; (8001838 <dwt_configure+0x2bc>)
 8001670:	5cd3      	ldrb	r3, [r2, r3]
 8001672:	461a      	mov	r2, r3
 8001674:	4b72      	ldr	r3, [pc, #456]	; (8001840 <dwt_configure+0x2c4>)
 8001676:	5c9b      	ldrb	r3, [r3, r2]
 8001678:	461a      	mov	r2, r3
 800167a:	210b      	movs	r1, #11
 800167c:	202b      	movs	r0, #43	; 0x2b
 800167e:	f000 f9f1 	bl	8001a64 <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 8001682:	7c7b      	ldrb	r3, [r7, #17]
 8001684:	4a6f      	ldr	r2, [pc, #444]	; (8001844 <dwt_configure+0x2c8>)
 8001686:	5cd3      	ldrb	r3, [r2, r3]
 8001688:	461a      	mov	r2, r3
 800168a:	210b      	movs	r1, #11
 800168c:	2028      	movs	r0, #40	; 0x28
 800168e:	f000 f9e9 	bl	8001a64 <dwt_write8bitoffsetreg>

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 8001692:	7cfb      	ldrb	r3, [r7, #19]
 8001694:	4a68      	ldr	r2, [pc, #416]	; (8001838 <dwt_configure+0x2bc>)
 8001696:	5cd3      	ldrb	r3, [r2, r3]
 8001698:	461a      	mov	r2, r3
 800169a:	4b6b      	ldr	r3, [pc, #428]	; (8001848 <dwt_configure+0x2cc>)
 800169c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016a0:	461a      	mov	r2, r3
 80016a2:	210c      	movs	r1, #12
 80016a4:	2028      	movs	r0, #40	; 0x28
 80016a6:	f000 fa0c 	bl	8001ac2 <dwt_write32bitoffsetreg>

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	79db      	ldrb	r3, [r3, #7]
 80016ae:	4618      	mov	r0, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	799b      	ldrb	r3, [r3, #6]
 80016b4:	4619      	mov	r1, r3
 80016b6:	4a65      	ldr	r2, [pc, #404]	; (800184c <dwt_configure+0x2d0>)
 80016b8:	0043      	lsls	r3, r0, #1
 80016ba:	440b      	add	r3, r1
 80016bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016c0:	461a      	mov	r2, r3
 80016c2:	2102      	movs	r1, #2
 80016c4:	2027      	movs	r0, #39	; 0x27
 80016c6:	f000 f9e0 	bl	8001a8a <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 80016ca:	7cbb      	ldrb	r3, [r7, #18]
 80016cc:	4a60      	ldr	r2, [pc, #384]	; (8001850 <dwt_configure+0x2d4>)
 80016ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016d2:	461a      	mov	r2, r3
 80016d4:	2104      	movs	r1, #4
 80016d6:	2027      	movs	r0, #39	; 0x27
 80016d8:	f000 f9d7 	bl	8001a8a <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	79db      	ldrb	r3, [r3, #7]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d105      	bne.n	80016f0 <dwt_configure+0x174>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 80016e4:	2264      	movs	r2, #100	; 0x64
 80016e6:	2106      	movs	r1, #6
 80016e8:	2027      	movs	r0, #39	; 0x27
 80016ea:	f000 f9ce 	bl	8001a8a <dwt_write16bitoffsetreg>
 80016ee:	e018      	b.n	8001722 <dwt_configure+0x1a6>
    }
    else
    {
        if(config->txPreambLength == DWT_PLEN_64)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	789b      	ldrb	r3, [r3, #2]
 80016f4:	2b04      	cmp	r3, #4
 80016f6:	d10a      	bne.n	800170e <dwt_configure+0x192>
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 80016f8:	2210      	movs	r2, #16
 80016fa:	2106      	movs	r1, #6
 80016fc:	2027      	movs	r0, #39	; 0x27
 80016fe:	f000 f9c4 	bl	8001a8a <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 8001702:	2210      	movs	r2, #16
 8001704:	2126      	movs	r1, #38	; 0x26
 8001706:	2027      	movs	r0, #39	; 0x27
 8001708:	f000 f9ac 	bl	8001a64 <dwt_write8bitoffsetreg>
 800170c:	e009      	b.n	8001722 <dwt_configure+0x1a6>
        }
        else
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
 800170e:	2220      	movs	r2, #32
 8001710:	2106      	movs	r1, #6
 8001712:	2027      	movs	r0, #39	; 0x27
 8001714:	f000 f9b9 	bl	8001a8a <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 8001718:	2228      	movs	r2, #40	; 0x28
 800171a:	2126      	movs	r1, #38	; 0x26
 800171c:	2027      	movs	r0, #39	; 0x27
 800171e:	f000 f9a1 	bl	8001a64 <dwt_write8bitoffsetreg>
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 8001722:	7cbb      	ldrb	r3, [r7, #18]
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	78d2      	ldrb	r2, [r2, #3]
 8001728:	4611      	mov	r1, r2
 800172a:	4a4a      	ldr	r2, [pc, #296]	; (8001854 <dwt_configure+0x2d8>)
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	440b      	add	r3, r1
 8001730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001734:	461a      	mov	r2, r3
 8001736:	2108      	movs	r1, #8
 8001738:	2027      	movs	r0, #39	; 0x27
 800173a:	f000 f9c2 	bl	8001ac2 <dwt_write32bitoffsetreg>

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	895b      	ldrh	r3, [r3, #10]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d103      	bne.n	800174e <dwt_configure+0x1d2>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f241 0241 	movw	r2, #4161	; 0x1041
 800174c:	815a      	strh	r2, [r3, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	895b      	ldrh	r3, [r3, #10]
 8001752:	461a      	mov	r2, r3
 8001754:	2120      	movs	r1, #32
 8001756:	2027      	movs	r0, #39	; 0x27
 8001758:	f000 f997 	bl	8001a8a <dwt_write16bitoffsetreg>

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 800175c:	4b3e      	ldr	r3, [pc, #248]	; (8001858 <dwt_configure+0x2dc>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	461a      	mov	r2, r3
 8001762:	210c      	movs	r1, #12
 8001764:	2023      	movs	r0, #35	; 0x23
 8001766:	f000 f9ac 	bl	8001ac2 <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 800176a:	7cbb      	ldrb	r3, [r7, #18]
 800176c:	4a3a      	ldr	r2, [pc, #232]	; (8001858 <dwt_configure+0x2dc>)
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	4413      	add	r3, r2
 8001772:	889b      	ldrh	r3, [r3, #4]
 8001774:	461a      	mov	r2, r3
 8001776:	2104      	movs	r1, #4
 8001778:	2023      	movs	r0, #35	; 0x23
 800177a:	f000 f986 	bl	8001a8a <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	799b      	ldrb	r3, [r3, #6]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d00d      	beq.n	80017a2 <dwt_configure+0x226>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	79db      	ldrb	r3, [r3, #7]
 800178a:	461a      	mov	r2, r3
 800178c:	4b33      	ldr	r3, [pc, #204]	; (800185c <dwt_configure+0x2e0>)
 800178e:	5c9b      	ldrb	r3, [r3, r2]
 8001790:	461a      	mov	r2, r3
 8001792:	2100      	movs	r1, #0
 8001794:	2021      	movs	r0, #33	; 0x21
 8001796:	f000 f965 	bl	8001a64 <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
 800179a:	2303      	movs	r3, #3
 800179c:	75fb      	strb	r3, [r7, #23]
        useDWnsSFD = 1 ;
 800179e:	2301      	movs	r3, #1
 80017a0:	75bb      	strb	r3, [r7, #22]
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 80017a2:	7cfb      	ldrb	r3, [r7, #19]
 80017a4:	f003 020f 	and.w	r2, r3, #15
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 80017a8:	7cfb      	ldrb	r3, [r7, #19]
 80017aa:	011b      	lsls	r3, r3, #4
 80017ac:	b2db      	uxtb	r3, r3
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 80017ae:	431a      	orrs	r2, r3
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	785b      	ldrb	r3, [r3, #1]
 80017b4:	049b      	lsls	r3, r3, #18
 80017b6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 80017ba:	431a      	orrs	r2, r3
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 80017bc:	7dfb      	ldrb	r3, [r7, #23]
 80017be:	051b      	lsls	r3, r3, #20
 80017c0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 80017c4:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 80017c6:	7dbb      	ldrb	r3, [r7, #22]
 80017c8:	045b      	lsls	r3, r3, #17
 80017ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 80017ce:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	791b      	ldrb	r3, [r3, #4]
 80017d4:	059b      	lsls	r3, r3, #22
 80017d6:	f003 63f8 	and.w	r3, r3, #130023424	; 0x7c00000
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 80017da:	431a      	orrs	r2, r3
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	795b      	ldrb	r3, [r3, #5]
 80017e0:	06db      	lsls	r3, r3, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 80017e2:	4313      	orrs	r3, r2
 80017e4:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	2100      	movs	r1, #0
 80017ea:	201f      	movs	r0, #31
 80017ec:	f000 f969 	bl	8001ac2 <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	789a      	ldrb	r2, [r3, #2]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	785b      	ldrb	r3, [r3, #1]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	0419      	lsls	r1, r3, #16
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	79db      	ldrb	r3, [r3, #7]
 8001802:	035a      	lsls	r2, r3, #13
 8001804:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <dwt_configure+0x2b8>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	430a      	orrs	r2, r1
 800180a:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
 800180c:	4b09      	ldr	r3, [pc, #36]	; (8001834 <dwt_configure+0x2b8>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	461a      	mov	r2, r3
 8001814:	2100      	movs	r1, #0
 8001816:	2008      	movs	r0, #8
 8001818:	f000 f953 	bl	8001ac2 <dwt_write32bitoffsetreg>

    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
 800181c:	2242      	movs	r2, #66	; 0x42
 800181e:	2100      	movs	r1, #0
 8001820:	200d      	movs	r0, #13
 8001822:	f000 f91f 	bl	8001a64 <dwt_write8bitoffsetreg>
} // end dwt_configure()
 8001826:	bf00      	nop
 8001828:	3718      	adds	r7, #24
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	0800d1bc 	.word	0x0800d1bc
 8001834:	20000000 	.word	0x20000000
 8001838:	0800d13c 	.word	0x0800d13c
 800183c:	0800d15c 	.word	0x0800d15c
 8001840:	0800d174 	.word	0x0800d174
 8001844:	0800d17c 	.word	0x0800d17c
 8001848:	0800d144 	.word	0x0800d144
 800184c:	0800d18c 	.word	0x0800d18c
 8001850:	0800d198 	.word	0x0800d198
 8001854:	0800d19c 	.word	0x0800d19c
 8001858:	0800d180 	.word	0x0800d180
 800185c:	0800d188 	.word	0x0800d188

08001860 <dwt_writetodevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    const uint8   *buffer
)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	60ba      	str	r2, [r7, #8]
 8001868:	607b      	str	r3, [r7, #4]
 800186a:	4603      	mov	r3, r0
 800186c:	81fb      	strh	r3, [r7, #14]
 800186e:	460b      	mov	r3, r1
 8001870:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8001872:	2300      	movs	r3, #0
 8001874:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8001876:	89bb      	ldrh	r3, [r7, #12]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d10c      	bne.n	8001896 <dwt_writetodevice+0x36>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 800187c:	89fb      	ldrh	r3, [r7, #14]
 800187e:	b2da      	uxtb	r2, r3
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	1c59      	adds	r1, r3, #1
 8001884:	6179      	str	r1, [r7, #20]
 8001886:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800188a:	b2d2      	uxtb	r2, r2
 800188c:	3318      	adds	r3, #24
 800188e:	443b      	add	r3, r7
 8001890:	f803 2c08 	strb.w	r2, [r3, #-8]
 8001894:	e02f      	b.n	80018f6 <dwt_writetodevice+0x96>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8001896:	89fb      	ldrh	r3, [r7, #14]
 8001898:	b2da      	uxtb	r2, r3
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	1c59      	adds	r1, r3, #1
 800189e:	6179      	str	r1, [r7, #20]
 80018a0:	f062 023f 	orn	r2, r2, #63	; 0x3f
 80018a4:	b2d2      	uxtb	r2, r2
 80018a6:	3318      	adds	r3, #24
 80018a8:	443b      	add	r3, r7
 80018aa:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 80018ae:	89bb      	ldrh	r3, [r7, #12]
 80018b0:	2b7f      	cmp	r3, #127	; 0x7f
 80018b2:	d809      	bhi.n	80018c8 <dwt_writetodevice+0x68>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	1c5a      	adds	r2, r3, #1
 80018b8:	617a      	str	r2, [r7, #20]
 80018ba:	89ba      	ldrh	r2, [r7, #12]
 80018bc:	b2d2      	uxtb	r2, r2
 80018be:	3318      	adds	r3, #24
 80018c0:	443b      	add	r3, r7
 80018c2:	f803 2c08 	strb.w	r2, [r3, #-8]
 80018c6:	e016      	b.n	80018f6 <dwt_writetodevice+0x96>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 80018c8:	89bb      	ldrh	r3, [r7, #12]
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	1c59      	adds	r1, r3, #1
 80018d0:	6179      	str	r1, [r7, #20]
 80018d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80018d6:	b2d2      	uxtb	r2, r2
 80018d8:	3318      	adds	r3, #24
 80018da:	443b      	add	r3, r7
 80018dc:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 80018e0:	89bb      	ldrh	r3, [r7, #12]
 80018e2:	09db      	lsrs	r3, r3, #7
 80018e4:	b299      	uxth	r1, r3
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	1c5a      	adds	r2, r3, #1
 80018ea:	617a      	str	r2, [r7, #20]
 80018ec:	b2ca      	uxtb	r2, r1
 80018ee:	3318      	adds	r3, #24
 80018f0:	443b      	add	r3, r7
 80018f2:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	b298      	uxth	r0, r3
 80018fa:	f107 0110 	add.w	r1, r7, #16
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	68ba      	ldr	r2, [r7, #8]
 8001902:	f005 fc69 	bl	80071d8 <writetospi>
} // end dwt_writetodevice()
 8001906:	bf00      	nop
 8001908:	3718      	adds	r7, #24
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    uint8         *buffer
)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b086      	sub	sp, #24
 8001912:	af00      	add	r7, sp, #0
 8001914:	60ba      	str	r2, [r7, #8]
 8001916:	607b      	str	r3, [r7, #4]
 8001918:	4603      	mov	r3, r0
 800191a:	81fb      	strh	r3, [r7, #14]
 800191c:	460b      	mov	r3, r1
 800191e:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8001924:	89bb      	ldrh	r3, [r7, #12]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d109      	bne.n	800193e <dwt_readfromdevice+0x30>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	1c5a      	adds	r2, r3, #1
 800192e:	617a      	str	r2, [r7, #20]
 8001930:	89fa      	ldrh	r2, [r7, #14]
 8001932:	b2d2      	uxtb	r2, r2
 8001934:	3318      	adds	r3, #24
 8001936:	443b      	add	r3, r7
 8001938:	f803 2c08 	strb.w	r2, [r3, #-8]
 800193c:	e02f      	b.n	800199e <dwt_readfromdevice+0x90>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800193e:	89fb      	ldrh	r3, [r7, #14]
 8001940:	b2da      	uxtb	r2, r3
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	1c59      	adds	r1, r3, #1
 8001946:	6179      	str	r1, [r7, #20]
 8001948:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800194c:	b2d2      	uxtb	r2, r2
 800194e:	3318      	adds	r3, #24
 8001950:	443b      	add	r3, r7
 8001952:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8001956:	89bb      	ldrh	r3, [r7, #12]
 8001958:	2b7f      	cmp	r3, #127	; 0x7f
 800195a:	d809      	bhi.n	8001970 <dwt_readfromdevice+0x62>
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	1c5a      	adds	r2, r3, #1
 8001960:	617a      	str	r2, [r7, #20]
 8001962:	89ba      	ldrh	r2, [r7, #12]
 8001964:	b2d2      	uxtb	r2, r2
 8001966:	3318      	adds	r3, #24
 8001968:	443b      	add	r3, r7
 800196a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800196e:	e016      	b.n	800199e <dwt_readfromdevice+0x90>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8001970:	89bb      	ldrh	r3, [r7, #12]
 8001972:	b2da      	uxtb	r2, r3
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	1c59      	adds	r1, r3, #1
 8001978:	6179      	str	r1, [r7, #20]
 800197a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800197e:	b2d2      	uxtb	r2, r2
 8001980:	3318      	adds	r3, #24
 8001982:	443b      	add	r3, r7
 8001984:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8001988:	89bb      	ldrh	r3, [r7, #12]
 800198a:	09db      	lsrs	r3, r3, #7
 800198c:	b299      	uxth	r1, r3
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	1c5a      	adds	r2, r3, #1
 8001992:	617a      	str	r2, [r7, #20]
 8001994:	b2ca      	uxtb	r2, r1
 8001996:	3318      	adds	r3, #24
 8001998:	443b      	add	r3, r7
 800199a:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	b298      	uxth	r0, r3
 80019a2:	f107 0110 	add.w	r1, r7, #16
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68ba      	ldr	r2, [r7, #8]
 80019aa:	f005 fc4b 	bl	8007244 <readfromspi>
} // end dwt_readfromdevice()
 80019ae:	bf00      	nop
 80019b0:	3718      	adds	r7, #24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b086      	sub	sp, #24
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
 80019be:	6039      	str	r1, [r7, #0]
    uint32  regval = 0 ;
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	b298      	uxth	r0, r3
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	b299      	uxth	r1, r3
 80019cc:	f107 030c 	add.w	r3, r7, #12
 80019d0:	2204      	movs	r2, #4
 80019d2:	f7ff ff9c 	bl	800190e <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 80019d6:	2303      	movs	r3, #3
 80019d8:	613b      	str	r3, [r7, #16]
 80019da:	e00b      	b.n	80019f4 <dwt_read32bitoffsetreg+0x3e>
    {
        regval = (regval << 8) + buffer[j] ;
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	021b      	lsls	r3, r3, #8
 80019e0:	f107 010c 	add.w	r1, r7, #12
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	440a      	add	r2, r1
 80019e8:	7812      	ldrb	r2, [r2, #0]
 80019ea:	4413      	add	r3, r2
 80019ec:	617b      	str	r3, [r7, #20]
    for (j = 3 ; j >= 0 ; j --)
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	3b01      	subs	r3, #1
 80019f2:	613b      	str	r3, [r7, #16]
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	daf0      	bge.n	80019dc <dwt_read32bitoffsetreg+0x26>
    }
    return regval ;
 80019fa:	697b      	ldr	r3, [r7, #20]

} // end dwt_read32bitoffsetreg()
 80019fc:	4618      	mov	r0, r3
 80019fe:	3718      	adds	r7, #24
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
    uint16  regval = 0 ;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	81fb      	strh	r3, [r7, #14]
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	b298      	uxth	r0, r3
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	b299      	uxth	r1, r3
 8001a1a:	f107 030c 	add.w	r3, r7, #12
 8001a1e:	2202      	movs	r2, #2
 8001a20:	f7ff ff75 	bl	800190e <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 8001a24:	7b7b      	ldrb	r3, [r7, #13]
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	021b      	lsls	r3, r3, #8
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	7b3b      	ldrb	r3, [r7, #12]
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	4413      	add	r3, r2
 8001a32:	81fb      	strh	r3, [r7, #14]
    return regval ;
 8001a34:	89fb      	ldrh	r3, [r7, #14]

} // end dwt_read16bitoffsetreg()
 8001a36:	4618      	mov	r0, r3
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <dwt_read8bitoffsetreg>:
 * output parameters
 *
 * returns 8-bit register value
 */
uint8 dwt_read8bitoffsetreg(int regFileID, int regOffset)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b084      	sub	sp, #16
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
 8001a46:	6039      	str	r1, [r7, #0]
    uint8 regval;

    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	b298      	uxth	r0, r3
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	b299      	uxth	r1, r3
 8001a50:	f107 030f 	add.w	r3, r7, #15
 8001a54:	2201      	movs	r2, #1
 8001a56:	f7ff ff5a 	bl	800190e <dwt_readfromdevice>

    return regval ;
 8001a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	71fb      	strb	r3, [r7, #7]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	b298      	uxth	r0, r3
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	b299      	uxth	r1, r3
 8001a7a:	1dfb      	adds	r3, r7, #7
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f7ff feef 	bl	8001860 <dwt_writetodevice>
}
 8001a82:	bf00      	nop
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b086      	sub	sp, #24
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	60f8      	str	r0, [r7, #12]
 8001a92:	60b9      	str	r1, [r7, #8]
 8001a94:	4613      	mov	r3, r2
 8001a96:	80fb      	strh	r3, [r7, #6]
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 8001a98:	88fb      	ldrh	r3, [r7, #6]
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	753b      	strb	r3, [r7, #20]
    buffer[1] = regval >> 8 ;
 8001a9e:	88fb      	ldrh	r3, [r7, #6]
 8001aa0:	0a1b      	lsrs	r3, r3, #8
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	757b      	strb	r3, [r7, #21]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	b298      	uxth	r0, r3
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	b299      	uxth	r1, r3
 8001ab0:	f107 0314 	add.w	r3, r7, #20
 8001ab4:	2202      	movs	r2, #2
 8001ab6:	f7ff fed3 	bl	8001860 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 8001aba:	bf00      	nop
 8001abc:	3718      	adds	r7, #24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b086      	sub	sp, #24
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	60f8      	str	r0, [r7, #12]
 8001aca:	60b9      	str	r1, [r7, #8]
 8001acc:	607a      	str	r2, [r7, #4]
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
 8001ad2:	e00d      	b.n	8001af0 <dwt_write32bitoffsetreg+0x2e>
    {
        buffer[j] = regval & 0xff ;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	b2d9      	uxtb	r1, r3
 8001ad8:	f107 0210 	add.w	r2, r7, #16
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	4413      	add	r3, r2
 8001ae0:	460a      	mov	r2, r1
 8001ae2:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	0a1b      	lsrs	r3, r3, #8
 8001ae8:	607b      	str	r3, [r7, #4]
    for ( j = 0 ; j < 4 ; j++ )
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	3301      	adds	r3, #1
 8001aee:	617b      	str	r3, [r7, #20]
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	2b03      	cmp	r3, #3
 8001af4:	ddee      	ble.n	8001ad4 <dwt_write32bitoffsetreg+0x12>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	b298      	uxth	r0, r3
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	b299      	uxth	r1, r3
 8001afe:	f107 0310 	add.w	r3, r7, #16
 8001b02:	2204      	movs	r2, #4
 8001b04:	f7ff feac 	bl	8001860 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 8001b08:	bf00      	nop
 8001b0a:	3718      	adds	r7, #24
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	80fb      	strh	r3, [r7, #6]
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 8001b1a:	88fb      	ldrh	r3, [r7, #6]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	2104      	movs	r1, #4
 8001b20:	202d      	movs	r0, #45	; 0x2d
 8001b22:	f7ff ffb2 	bl	8001a8a <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 8001b26:	2203      	movs	r2, #3
 8001b28:	2106      	movs	r1, #6
 8001b2a:	202d      	movs	r0, #45	; 0x2d
 8001b2c:	f7ff ff9a 	bl	8001a64 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 8001b30:	2200      	movs	r2, #0
 8001b32:	2106      	movs	r1, #6
 8001b34:	202d      	movs	r0, #45	; 0x2d
 8001b36:	f7ff ff95 	bl	8001a64 <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 8001b3a:	210a      	movs	r1, #10
 8001b3c:	202d      	movs	r0, #45	; 0x2d
 8001b3e:	f7ff ff3a 	bl	80019b6 <dwt_read32bitoffsetreg>
 8001b42:	60f8      	str	r0, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 8001b44:	68fb      	ldr	r3, [r7, #12]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	af00      	add	r7, sp, #0
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 8001b52:	2200      	movs	r2, #0
 8001b54:	2102      	movs	r1, #2
 8001b56:	202c      	movs	r0, #44	; 0x2c
 8001b58:	f7ff ff84 	bl	8001a64 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 8001b5c:	2202      	movs	r2, #2
 8001b5e:	2102      	movs	r1, #2
 8001b60:	202c      	movs	r0, #44	; 0x2c
 8001b62:	f7ff ff7f 	bl	8001a64 <dwt_write8bitoffsetreg>
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b082      	sub	sp, #8
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 8001b72:	226d      	movs	r2, #109	; 0x6d
 8001b74:	f640 0106 	movw	r1, #2054	; 0x806
 8001b78:	202e      	movs	r0, #46	; 0x2e
 8001b7a:	f7ff ff73 	bl	8001a64 <dwt_write8bitoffsetreg>

    if(prfIndex)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d007      	beq.n	8001b94 <_dwt_configlde+0x2a>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 8001b84:	f240 6207 	movw	r2, #1543	; 0x607
 8001b88:	f641 0106 	movw	r1, #6150	; 0x1806
 8001b8c:	202e      	movs	r0, #46	; 0x2e
 8001b8e:	f7ff ff7c 	bl	8001a8a <dwt_write16bitoffsetreg>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 8001b92:	e006      	b.n	8001ba2 <_dwt_configlde+0x38>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 8001b94:	f241 6207 	movw	r2, #5639	; 0x1607
 8001b98:	f641 0106 	movw	r1, #6150	; 0x1806
 8001b9c:	202e      	movs	r0, #46	; 0x2e
 8001b9e:	f7ff ff74 	bl	8001a8a <dwt_write16bitoffsetreg>
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <_dwt_loaducodefromrom>:
 * output parameters
 *
 * no return value
 */
void _dwt_loaducodefromrom(void)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	af00      	add	r7, sp, #0
    // Set up clocks
    _dwt_enableclocks(FORCE_LDE);
 8001bae:	200e      	movs	r0, #14
 8001bb0:	f000 f80e 	bl	8001bd0 <_dwt_enableclocks>

    // Kick off the LDE load
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 8001bb4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001bb8:	2106      	movs	r1, #6
 8001bba:	202d      	movs	r0, #45	; 0x2d
 8001bbc:	f7ff ff65 	bl	8001a8a <dwt_write16bitoffsetreg>

    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	f005 fafd 	bl	80071c0 <deca_sleep>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8001bc6:	2001      	movs	r0, #1
 8001bc8:	f000 f802 	bl	8001bd0 <_dwt_enableclocks>
}
 8001bcc:	bf00      	nop
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 8001bd8:	f107 030c 	add.w	r3, r7, #12
 8001bdc:	2202      	movs	r2, #2
 8001bde:	2100      	movs	r1, #0
 8001be0:	2036      	movs	r0, #54	; 0x36
 8001be2:	f7ff fe94 	bl	800190e <dwt_readfromdevice>
    switch(clocks)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2b0e      	cmp	r3, #14
 8001bea:	d876      	bhi.n	8001cda <_dwt_enableclocks+0x10a>
 8001bec:	a201      	add	r2, pc, #4	; (adr r2, 8001bf4 <_dwt_enableclocks+0x24>)
 8001bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bf2:	bf00      	nop
 8001bf4:	08001c41 	.word	0x08001c41
 8001bf8:	08001c31 	.word	0x08001c31
 8001bfc:	08001c57 	.word	0x08001c57
 8001c00:	08001cdb 	.word	0x08001cdb
 8001c04:	08001cdb 	.word	0x08001cdb
 8001c08:	08001cdb 	.word	0x08001cdb
 8001c0c:	08001cdb 	.word	0x08001cdb
 8001c10:	08001c6d 	.word	0x08001c6d
 8001c14:	08001c8d 	.word	0x08001c8d
 8001c18:	08001cdb 	.word	0x08001cdb
 8001c1c:	08001cdb 	.word	0x08001cdb
 8001c20:	08001ca3 	.word	0x08001ca3
 8001c24:	08001caf 	.word	0x08001caf
 8001c28:	08001cbb 	.word	0x08001cbb
 8001c2c:	08001cd1 	.word	0x08001cd1
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 8001c30:	2300      	movs	r3, #0
 8001c32:	733b      	strb	r3, [r7, #12]
            reg[1] = reg[1] & 0xfe;
 8001c34:	7b7b      	ldrb	r3, [r7, #13]
 8001c36:	f023 0301 	bic.w	r3, r3, #1
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001c3e:	e04d      	b.n	8001cdc <_dwt_enableclocks+0x10c>
        case FORCE_SYS_XTI:
        {
            // System and RX
            reg[0] = 0x01 | (reg[0] & 0xfc);
 8001c40:	7b3b      	ldrb	r3, [r7, #12]
 8001c42:	b25b      	sxtb	r3, r3
 8001c44:	f023 0303 	bic.w	r3, r3, #3
 8001c48:	b25b      	sxtb	r3, r3
 8001c4a:	f043 0301 	orr.w	r3, r3, #1
 8001c4e:	b25b      	sxtb	r3, r3
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	733b      	strb	r3, [r7, #12]
        }
        break;
 8001c54:	e042      	b.n	8001cdc <_dwt_enableclocks+0x10c>
        case FORCE_SYS_PLL:
        {
            // System
            reg[0] = 0x02 | (reg[0] & 0xfc);
 8001c56:	7b3b      	ldrb	r3, [r7, #12]
 8001c58:	b25b      	sxtb	r3, r3
 8001c5a:	f023 0303 	bic.w	r3, r3, #3
 8001c5e:	b25b      	sxtb	r3, r3
 8001c60:	f043 0302 	orr.w	r3, r3, #2
 8001c64:	b25b      	sxtb	r3, r3
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	733b      	strb	r3, [r7, #12]
        }
        break;
 8001c6a:	e037      	b.n	8001cdc <_dwt_enableclocks+0x10c>
        case READ_ACC_ON:
        {
            reg[0] = 0x48 | (reg[0] & 0xb3);
 8001c6c:	7b3b      	ldrb	r3, [r7, #12]
 8001c6e:	b25b      	sxtb	r3, r3
 8001c70:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8001c74:	b25b      	sxtb	r3, r3
 8001c76:	f043 0348 	orr.w	r3, r3, #72	; 0x48
 8001c7a:	b25b      	sxtb	r3, r3
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x80 | reg[1];
 8001c80:	7b7b      	ldrb	r3, [r7, #13]
 8001c82:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001c8a:	e027      	b.n	8001cdc <_dwt_enableclocks+0x10c>
        case READ_ACC_OFF:
        {
            reg[0] = reg[0] & 0xb3;
 8001c8c:	7b3b      	ldrb	r3, [r7, #12]
 8001c8e:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x7f & reg[1];
 8001c96:	7b7b      	ldrb	r3, [r7, #13]
 8001c98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001ca0:	e01c      	b.n	8001cdc <_dwt_enableclocks+0x10c>
        case FORCE_OTP_ON:
        {
            reg[1] = 0x02 | reg[1];
 8001ca2:	7b7b      	ldrb	r3, [r7, #13]
 8001ca4:	f043 0302 	orr.w	r3, r3, #2
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001cac:	e016      	b.n	8001cdc <_dwt_enableclocks+0x10c>
        case FORCE_OTP_OFF:
        {
            reg[1] = reg[1] & 0xfd;
 8001cae:	7b7b      	ldrb	r3, [r7, #13]
 8001cb0:	f023 0302 	bic.w	r3, r3, #2
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001cb8:	e010      	b.n	8001cdc <_dwt_enableclocks+0x10c>
        case FORCE_TX_PLL:
        {
            reg[0] = 0x20 | (reg[0] & 0xcf);
 8001cba:	7b3b      	ldrb	r3, [r7, #12]
 8001cbc:	b25b      	sxtb	r3, r3
 8001cbe:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001cc2:	b25b      	sxtb	r3, r3
 8001cc4:	f043 0320 	orr.w	r3, r3, #32
 8001cc8:	b25b      	sxtb	r3, r3
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	733b      	strb	r3, [r7, #12]
        }
        break;
 8001cce:	e005      	b.n	8001cdc <_dwt_enableclocks+0x10c>
        case FORCE_LDE:
        {
            reg[0] = 0x01;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x03;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001cd8:	e000      	b.n	8001cdc <_dwt_enableclocks+0x10c>
        default:
        break;
 8001cda:	bf00      	nop
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 8001cdc:	f107 030c 	add.w	r3, r7, #12
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	2036      	movs	r0, #54	; 0x36
 8001ce6:	f7ff fdbb 	bl	8001860 <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 8001cea:	f107 030c 	add.w	r3, r7, #12
 8001cee:	3301      	adds	r3, #1
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	2036      	movs	r0, #54	; 0x36
 8001cf6:	f7ff fdb3 	bl	8001860 <dwt_writetodevice>

} // end _dwt_enableclocks()
 8001cfa:	bf00      	nop
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop

08001d04 <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 8001d08:	2000      	movs	r0, #0
 8001d0a:	f7ff ff61 	bl	8001bd0 <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 8001d0e:	2200      	movs	r2, #0
 8001d10:	2104      	movs	r1, #4
 8001d12:	2036      	movs	r0, #54	; 0x36
 8001d14:	f7ff feb9 	bl	8001a8a <dwt_write16bitoffsetreg>
}
 8001d18:	bf00      	nop
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <dwt_forcetrxoff>:
 * output parameters
 *
 * no return value
 */
void dwt_forcetrxoff(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
    decaIrqStatus_t stat ;
    uint32 mask;

    mask = dwt_read32bitreg(SYS_MASK_ID) ; // Read set interrupt mask
 8001d22:	2100      	movs	r1, #0
 8001d24:	200e      	movs	r0, #14
 8001d26:	f7ff fe46 	bl	80019b6 <dwt_read32bitoffsetreg>
 8001d2a:	6078      	str	r0, [r7, #4]

    // Need to beware of interrupts occurring in the middle of following read modify write cycle
    // We can disable the radio, but before the status is cleared an interrupt can be set (e.g. the
    // event has just happened before the radio was disabled)
    // thus we need to disable interrupt during this operation
    stat = decamutexon() ;
 8001d2c:	f005 fa2a 	bl	8007184 <decamutexon>
 8001d30:	6038      	str	r0, [r7, #0]

    dwt_write32bitreg(SYS_MASK_ID, 0) ; // Clear interrupt mask - so we don't get any unwanted events
 8001d32:	2200      	movs	r2, #0
 8001d34:	2100      	movs	r1, #0
 8001d36:	200e      	movs	r0, #14
 8001d38:	f7ff fec3 	bl	8001ac2 <dwt_write32bitoffsetreg>

    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF) ; // Disable the radio
 8001d3c:	2240      	movs	r2, #64	; 0x40
 8001d3e:	2100      	movs	r1, #0
 8001d40:	200d      	movs	r0, #13
 8001d42:	f7ff fe8f 	bl	8001a64 <dwt_write8bitoffsetreg>

    // Forcing Transceiver off - so we do not want to see any new events that may have happened
    dwt_write32bitreg(SYS_STATUS_ID, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD));
 8001d46:	4a0b      	ldr	r2, [pc, #44]	; (8001d74 <dwt_forcetrxoff+0x58>)
 8001d48:	2100      	movs	r1, #0
 8001d4a:	200f      	movs	r0, #15
 8001d4c:	f7ff feb9 	bl	8001ac2 <dwt_write32bitoffsetreg>

    dwt_syncrxbufptrs();
 8001d50:	f000 f814 	bl	8001d7c <dwt_syncrxbufptrs>

    dwt_write32bitreg(SYS_MASK_ID, mask) ; // Set interrupt mask to what it was
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	2100      	movs	r1, #0
 8001d58:	200e      	movs	r0, #14
 8001d5a:	f7ff feb2 	bl	8001ac2 <dwt_write32bitoffsetreg>

    // Enable/restore interrupts again...
    decamutexoff(stat) ;
 8001d5e:	6838      	ldr	r0, [r7, #0]
 8001d60:	f005 fa21 	bl	80071a6 <decamutexoff>
    pdw1000local->wait4resp = 0;
 8001d64:	4b04      	ldr	r3, [pc, #16]	; (8001d78 <dwt_forcetrxoff+0x5c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	755a      	strb	r2, [r3, #21]

} // end deviceforcetrxoff()
 8001d6c:	bf00      	nop
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	2427fff8 	.word	0x2427fff8
 8001d78:	20000000 	.word	0x20000000

08001d7c <dwt_syncrxbufptrs>:
 * output parameters
 *
 * no return value
 */
void dwt_syncrxbufptrs(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
    uint8  buff ;
    // Need to make sure that the host/IC buffer pointers are aligned before starting RX
    buff = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 8001d82:	2103      	movs	r1, #3
 8001d84:	200f      	movs	r0, #15
 8001d86:	f7ff fe5a 	bl	8001a3e <dwt_read8bitoffsetreg>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	71fb      	strb	r3, [r7, #7]

    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 8001d8e:	79fa      	ldrb	r2, [r7, #7]
       ((buff & (SYS_STATUS_HSRBP>>24)) << 1) ) // Host Side Receive Buffer Pointer
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	005b      	lsls	r3, r3, #1
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 8001d94:	4053      	eors	r3, r2
 8001d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d004      	beq.n	8001da8 <dwt_syncrxbufptrs+0x2c>
    {
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01) ; // We need to swap RX buffer status reg (write one to toggle internally)
 8001d9e:	2201      	movs	r2, #1
 8001da0:	2103      	movs	r1, #3
 8001da2:	200d      	movs	r0, #13
 8001da4:	f7ff fe5e 	bl	8001a64 <dwt_write8bitoffsetreg>
    }
}
 8001da8:	bf00      	nop
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
    _dwt_disablesequencing();
 8001db4:	f7ff ffa6 	bl	8001d04 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 8001db8:	2200      	movs	r2, #0
 8001dba:	2100      	movs	r1, #0
 8001dbc:	202c      	movs	r0, #44	; 0x2c
 8001dbe:	f7ff fe64 	bl	8001a8a <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	2106      	movs	r1, #6
 8001dc6:	202c      	movs	r0, #44	; 0x2c
 8001dc8:	f7ff fe4c 	bl	8001a64 <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 8001dcc:	f7ff febf 	bl	8001b4e <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	2103      	movs	r1, #3
 8001dd4:	2036      	movs	r0, #54	; 0x36
 8001dd6:	f7ff fe45 	bl	8001a64 <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 8001dda:	2001      	movs	r0, #1
 8001ddc:	f005 f9f0 	bl	80071c0 <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 8001de0:	22f0      	movs	r2, #240	; 0xf0
 8001de2:	2103      	movs	r1, #3
 8001de4:	2036      	movs	r0, #54	; 0x36
 8001de6:	f7ff fe3d 	bl	8001a64 <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 8001dea:	4b03      	ldr	r3, [pc, #12]	; (8001df8 <dwt_softreset+0x48>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2200      	movs	r2, #0
 8001df0:	755a      	strb	r2, [r3, #21]
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	20000000 	.word	0x20000000

08001dfc <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	71fb      	strb	r3, [r7, #7]
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 8001e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0a:	f003 031f 	and.w	r3, r3, #31
 8001e0e:	b25b      	sxtb	r3, r3
 8001e10:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e14:	b25b      	sxtb	r3, r3
 8001e16:	73fb      	strb	r3, [r7, #15]
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 8001e18:	7bfb      	ldrb	r3, [r7, #15]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	210e      	movs	r1, #14
 8001e1e:	202b      	movs	r0, #43	; 0x2b
 8001e20:	f7ff fe20 	bl	8001a64 <dwt_write8bitoffsetreg>
}
 8001e24:	bf00      	nop
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <_ZSt5log10f>:
  using ::log10;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  log10(float __x)
  { return __builtin_log10f(__x); }
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	ed87 0a01 	vstr	s0, [r7, #4]
 8001e36:	ed97 0a01 	vldr	s0, [r7, #4]
 8001e3a:	f008 f831 	bl	8009ea0 <log10f>
 8001e3e:	eef0 7a40 	vmov.f32	s15, s0
 8001e42:	eeb0 0a67 	vmov.f32	s0, s15
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <_ZN11DW1000Class10enableModeEPKh>:
 * #### Init and end #######################################################
 * ######################################################################### */


void DW1000Class::enableMode(const byte mode[])
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
	setDataRate(mode[0]);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f001 fbc1 	bl	80035e0 <_ZN11DW1000Class11setDataRateEh>
	setPulseFrequency(mode[1]);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	3301      	adds	r3, #1
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f001 fc47 	bl	80036f8 <_ZN11DW1000Class17setPulseFrequencyEh>
	setPreambleLength(mode[2]);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	3302      	adds	r3, #2
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f001 fc83 	bl	800377c <_ZN11DW1000Class17setPreambleLengthEh>
}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
	...

08001e80 <_ZN11DW1000Class4tuneEv>:


void DW1000Class::tune()
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b094      	sub	sp, #80	; 0x50
 8001e84:	af00      	add	r7, sp, #0
	byte tcpgdelay[LEN_TC_PGDELAY];
	byte fspllcfg[LEN_FS_PLLCFG];
	byte fsplltune[LEN_FS_PLLTUNE];
	byte fsxtalt[LEN_FS_XTALT];
	// AGC_TUNE1
	if (_pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8001e86:	4bab      	ldr	r3, [pc, #684]	; (8002134 <_ZN11DW1000Class4tuneEv+0x2b4>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d108      	bne.n	8001ea0 <_ZN11DW1000Class4tuneEv+0x20>
	{
		writeValueToBytes(agctune1, 0x8870, LEN_AGC_TUNE1);
 8001e8e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e92:	2202      	movs	r2, #2
 8001e94:	f648 0170 	movw	r1, #34928	; 0x8870
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f002 f901 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 8001e9e:	e00b      	b.n	8001eb8 <_ZN11DW1000Class4tuneEv+0x38>
	}
	else if (_pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8001ea0:	4ba4      	ldr	r3, [pc, #656]	; (8002134 <_ZN11DW1000Class4tuneEv+0x2b4>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d107      	bne.n	8001eb8 <_ZN11DW1000Class4tuneEv+0x38>
	{
		writeValueToBytes(agctune1, 0x889B, LEN_AGC_TUNE1);
 8001ea8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001eac:	2202      	movs	r2, #2
 8001eae:	f648 019b 	movw	r1, #34971	; 0x889b
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f002 f8f4 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
	else
	{
		// TODO proper error/warning handling
	}
	// AGC_TUNE2
	writeValueToBytes(agctune2, 0x2502A907L, LEN_AGC_TUNE2);
 8001eb8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ebc:	2204      	movs	r2, #4
 8001ebe:	499e      	ldr	r1, [pc, #632]	; (8002138 <_ZN11DW1000Class4tuneEv+0x2b8>)
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f002 f8ed 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
	// AGC_TUNE3
	writeValueToBytes(agctune3, 0x0035, LEN_AGC_TUNE3);
 8001ec6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001eca:	2202      	movs	r2, #2
 8001ecc:	2135      	movs	r1, #53	; 0x35
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f002 f8e6 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
	// DRX_TUNE0b (already optimized according to Table 20 of user manual)
	if (_dataRate == TRX_RATE_110KBPS)
 8001ed4:	4b99      	ldr	r3, [pc, #612]	; (800213c <_ZN11DW1000Class4tuneEv+0x2bc>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d107      	bne.n	8001eec <_ZN11DW1000Class4tuneEv+0x6c>
	{
		writeValueToBytes(drxtune0b, 0x0016, LEN_DRX_TUNE0b);
 8001edc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ee0:	2202      	movs	r2, #2
 8001ee2:	2116      	movs	r1, #22
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f002 f8db 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 8001eea:	e016      	b.n	8001f1a <_ZN11DW1000Class4tuneEv+0x9a>
	}
	else if (_dataRate == TRX_RATE_850KBPS)
 8001eec:	4b93      	ldr	r3, [pc, #588]	; (800213c <_ZN11DW1000Class4tuneEv+0x2bc>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d107      	bne.n	8001f04 <_ZN11DW1000Class4tuneEv+0x84>
	{
		writeValueToBytes(drxtune0b, 0x0006, LEN_DRX_TUNE0b);
 8001ef4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ef8:	2202      	movs	r2, #2
 8001efa:	2106      	movs	r1, #6
 8001efc:	4618      	mov	r0, r3
 8001efe:	f002 f8cf 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 8001f02:	e00a      	b.n	8001f1a <_ZN11DW1000Class4tuneEv+0x9a>
	}
	else if (_dataRate == TRX_RATE_6800KBPS)
 8001f04:	4b8d      	ldr	r3, [pc, #564]	; (800213c <_ZN11DW1000Class4tuneEv+0x2bc>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d106      	bne.n	8001f1a <_ZN11DW1000Class4tuneEv+0x9a>
	{
		writeValueToBytes(drxtune0b, 0x0001, LEN_DRX_TUNE0b);
 8001f0c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f10:	2202      	movs	r2, #2
 8001f12:	2101      	movs	r1, #1
 8001f14:	4618      	mov	r0, r3
 8001f16:	f002 f8c3 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
	else
	{
		// TODO proper error/warning handling
	}
	// DRX_TUNE1a
	if (_pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8001f1a:	4b86      	ldr	r3, [pc, #536]	; (8002134 <_ZN11DW1000Class4tuneEv+0x2b4>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d107      	bne.n	8001f32 <_ZN11DW1000Class4tuneEv+0xb2>
	{
		writeValueToBytes(drxtune1a, 0x0087, LEN_DRX_TUNE1a);
 8001f22:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f26:	2202      	movs	r2, #2
 8001f28:	2187      	movs	r1, #135	; 0x87
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f002 f8b8 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 8001f30:	e00a      	b.n	8001f48 <_ZN11DW1000Class4tuneEv+0xc8>
	}
	else if (_pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8001f32:	4b80      	ldr	r3, [pc, #512]	; (8002134 <_ZN11DW1000Class4tuneEv+0x2b4>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d106      	bne.n	8001f48 <_ZN11DW1000Class4tuneEv+0xc8>
	{
		writeValueToBytes(drxtune1a, 0x008D, LEN_DRX_TUNE1a);
 8001f3a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f3e:	2202      	movs	r2, #2
 8001f40:	218d      	movs	r1, #141	; 0x8d
 8001f42:	4618      	mov	r0, r3
 8001f44:	f002 f8ac 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
	else
	{
		// TODO proper error/warning handling
	}
	// DRX_TUNE1b
	if (_preambleLength == TX_PREAMBLE_LEN_1536 || _preambleLength == TX_PREAMBLE_LEN_2048 ||
 8001f48:	4b7d      	ldr	r3, [pc, #500]	; (8002140 <_ZN11DW1000Class4tuneEv+0x2c0>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b06      	cmp	r3, #6
 8001f4e:	d007      	beq.n	8001f60 <_ZN11DW1000Class4tuneEv+0xe0>
 8001f50:	4b7b      	ldr	r3, [pc, #492]	; (8002140 <_ZN11DW1000Class4tuneEv+0x2c0>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	2b0a      	cmp	r3, #10
 8001f56:	d003      	beq.n	8001f60 <_ZN11DW1000Class4tuneEv+0xe0>
		_preambleLength == TX_PREAMBLE_LEN_4096)
 8001f58:	4b79      	ldr	r3, [pc, #484]	; (8002140 <_ZN11DW1000Class4tuneEv+0x2c0>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
	if (_preambleLength == TX_PREAMBLE_LEN_1536 || _preambleLength == TX_PREAMBLE_LEN_2048 ||
 8001f5c:	2b03      	cmp	r3, #3
 8001f5e:	d10b      	bne.n	8001f78 <_ZN11DW1000Class4tuneEv+0xf8>
	{
		if (_dataRate == TRX_RATE_110KBPS)
 8001f60:	4b76      	ldr	r3, [pc, #472]	; (800213c <_ZN11DW1000Class4tuneEv+0x2bc>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d126      	bne.n	8001fb6 <_ZN11DW1000Class4tuneEv+0x136>
		{
			writeValueToBytes(drxtune1b, 0x0064, LEN_DRX_TUNE1b);
 8001f68:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	2164      	movs	r1, #100	; 0x64
 8001f70:	4618      	mov	r0, r3
 8001f72:	f002 f895 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
		if (_dataRate == TRX_RATE_110KBPS)
 8001f76:	e01e      	b.n	8001fb6 <_ZN11DW1000Class4tuneEv+0x136>
		else
		{
			// TODO proper error/warning handling
		}
	}
	else if (_preambleLength != TX_PREAMBLE_LEN_64)
 8001f78:	4b71      	ldr	r3, [pc, #452]	; (8002140 <_ZN11DW1000Class4tuneEv+0x2c0>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d00f      	beq.n	8001fa0 <_ZN11DW1000Class4tuneEv+0x120>
	{
		if (_dataRate == TRX_RATE_850KBPS || _dataRate == TRX_RATE_6800KBPS)
 8001f80:	4b6e      	ldr	r3, [pc, #440]	; (800213c <_ZN11DW1000Class4tuneEv+0x2bc>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d003      	beq.n	8001f90 <_ZN11DW1000Class4tuneEv+0x110>
 8001f88:	4b6c      	ldr	r3, [pc, #432]	; (800213c <_ZN11DW1000Class4tuneEv+0x2bc>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d112      	bne.n	8001fb6 <_ZN11DW1000Class4tuneEv+0x136>
		{
			writeValueToBytes(drxtune1b, 0x0020, LEN_DRX_TUNE1b);
 8001f90:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f94:	2202      	movs	r2, #2
 8001f96:	2120      	movs	r1, #32
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f002 f881 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 8001f9e:	e00a      	b.n	8001fb6 <_ZN11DW1000Class4tuneEv+0x136>
			// TODO proper error/warning handling
		}
	}
	else
	{
		if (_dataRate == TRX_RATE_6800KBPS)
 8001fa0:	4b66      	ldr	r3, [pc, #408]	; (800213c <_ZN11DW1000Class4tuneEv+0x2bc>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d106      	bne.n	8001fb6 <_ZN11DW1000Class4tuneEv+0x136>
		{
			writeValueToBytes(drxtune1b, 0x0010, LEN_DRX_TUNE1b);
 8001fa8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001fac:	2202      	movs	r2, #2
 8001fae:	2110      	movs	r1, #16
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f002 f875 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
		{
			// TODO proper error/warning handling
		}
	}
	// DRX_TUNE2
	if (_pacSize == PAC_SIZE_8)
 8001fb6:	4b63      	ldr	r3, [pc, #396]	; (8002144 <_ZN11DW1000Class4tuneEv+0x2c4>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b08      	cmp	r3, #8
 8001fbc:	d117      	bne.n	8001fee <_ZN11DW1000Class4tuneEv+0x16e>
	{
		if (_pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8001fbe:	4b5d      	ldr	r3, [pc, #372]	; (8002134 <_ZN11DW1000Class4tuneEv+0x2b4>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d107      	bne.n	8001fd6 <_ZN11DW1000Class4tuneEv+0x156>
		{
			writeValueToBytes(drxtune2, 0x311A002DL, LEN_DRX_TUNE2);
 8001fc6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001fca:	2204      	movs	r2, #4
 8001fcc:	495e      	ldr	r1, [pc, #376]	; (8002148 <_ZN11DW1000Class4tuneEv+0x2c8>)
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f002 f866 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 8001fd4:	e05e      	b.n	8002094 <_ZN11DW1000Class4tuneEv+0x214>
		}
		else if (_pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8001fd6:	4b57      	ldr	r3, [pc, #348]	; (8002134 <_ZN11DW1000Class4tuneEv+0x2b4>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d15a      	bne.n	8002094 <_ZN11DW1000Class4tuneEv+0x214>
		{
			writeValueToBytes(drxtune2, 0x313B006BL, LEN_DRX_TUNE2);
 8001fde:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001fe2:	2204      	movs	r2, #4
 8001fe4:	4959      	ldr	r1, [pc, #356]	; (800214c <_ZN11DW1000Class4tuneEv+0x2cc>)
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f002 f85a 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 8001fec:	e052      	b.n	8002094 <_ZN11DW1000Class4tuneEv+0x214>
		else
		{
			// TODO proper error/warning handling
		}
	}
	else if (_pacSize == PAC_SIZE_16)
 8001fee:	4b55      	ldr	r3, [pc, #340]	; (8002144 <_ZN11DW1000Class4tuneEv+0x2c4>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	2b10      	cmp	r3, #16
 8001ff4:	d117      	bne.n	8002026 <_ZN11DW1000Class4tuneEv+0x1a6>
	{
		if (_pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8001ff6:	4b4f      	ldr	r3, [pc, #316]	; (8002134 <_ZN11DW1000Class4tuneEv+0x2b4>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d107      	bne.n	800200e <_ZN11DW1000Class4tuneEv+0x18e>
		{
			writeValueToBytes(drxtune2, 0x331A0052L, LEN_DRX_TUNE2);
 8001ffe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002002:	2204      	movs	r2, #4
 8002004:	4952      	ldr	r1, [pc, #328]	; (8002150 <_ZN11DW1000Class4tuneEv+0x2d0>)
 8002006:	4618      	mov	r0, r3
 8002008:	f002 f84a 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 800200c:	e042      	b.n	8002094 <_ZN11DW1000Class4tuneEv+0x214>
		}
		else if (_pulseFrequency == TX_PULSE_FREQ_64MHZ)
 800200e:	4b49      	ldr	r3, [pc, #292]	; (8002134 <_ZN11DW1000Class4tuneEv+0x2b4>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	2b02      	cmp	r3, #2
 8002014:	d13e      	bne.n	8002094 <_ZN11DW1000Class4tuneEv+0x214>
		{
			writeValueToBytes(drxtune2, 0x333B00BEL, LEN_DRX_TUNE2);
 8002016:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800201a:	2204      	movs	r2, #4
 800201c:	494d      	ldr	r1, [pc, #308]	; (8002154 <_ZN11DW1000Class4tuneEv+0x2d4>)
 800201e:	4618      	mov	r0, r3
 8002020:	f002 f83e 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 8002024:	e036      	b.n	8002094 <_ZN11DW1000Class4tuneEv+0x214>
		else
		{
			// TODO proper error/warning handling
		}
	}
	else if (_pacSize == PAC_SIZE_32)
 8002026:	4b47      	ldr	r3, [pc, #284]	; (8002144 <_ZN11DW1000Class4tuneEv+0x2c4>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	2b20      	cmp	r3, #32
 800202c:	d117      	bne.n	800205e <_ZN11DW1000Class4tuneEv+0x1de>
	{
		if (_pulseFrequency == TX_PULSE_FREQ_16MHZ)
 800202e:	4b41      	ldr	r3, [pc, #260]	; (8002134 <_ZN11DW1000Class4tuneEv+0x2b4>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d107      	bne.n	8002046 <_ZN11DW1000Class4tuneEv+0x1c6>
		{
			writeValueToBytes(drxtune2, 0x351A009AL, LEN_DRX_TUNE2);
 8002036:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800203a:	2204      	movs	r2, #4
 800203c:	4946      	ldr	r1, [pc, #280]	; (8002158 <_ZN11DW1000Class4tuneEv+0x2d8>)
 800203e:	4618      	mov	r0, r3
 8002040:	f002 f82e 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 8002044:	e026      	b.n	8002094 <_ZN11DW1000Class4tuneEv+0x214>
		}
		else if (_pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8002046:	4b3b      	ldr	r3, [pc, #236]	; (8002134 <_ZN11DW1000Class4tuneEv+0x2b4>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	2b02      	cmp	r3, #2
 800204c:	d122      	bne.n	8002094 <_ZN11DW1000Class4tuneEv+0x214>
		{
			writeValueToBytes(drxtune2, 0x353B015EL, LEN_DRX_TUNE2);
 800204e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002052:	2204      	movs	r2, #4
 8002054:	4941      	ldr	r1, [pc, #260]	; (800215c <_ZN11DW1000Class4tuneEv+0x2dc>)
 8002056:	4618      	mov	r0, r3
 8002058:	f002 f822 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 800205c:	e01a      	b.n	8002094 <_ZN11DW1000Class4tuneEv+0x214>
		else
		{
			// TODO proper error/warning handling
		}
	}
	else if (_pacSize == PAC_SIZE_64)
 800205e:	4b39      	ldr	r3, [pc, #228]	; (8002144 <_ZN11DW1000Class4tuneEv+0x2c4>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	2b40      	cmp	r3, #64	; 0x40
 8002064:	d116      	bne.n	8002094 <_ZN11DW1000Class4tuneEv+0x214>
	{
		if (_pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8002066:	4b33      	ldr	r3, [pc, #204]	; (8002134 <_ZN11DW1000Class4tuneEv+0x2b4>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d107      	bne.n	800207e <_ZN11DW1000Class4tuneEv+0x1fe>
		{
			writeValueToBytes(drxtune2, 0x371A011DL, LEN_DRX_TUNE2);
 800206e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002072:	2204      	movs	r2, #4
 8002074:	493a      	ldr	r1, [pc, #232]	; (8002160 <_ZN11DW1000Class4tuneEv+0x2e0>)
 8002076:	4618      	mov	r0, r3
 8002078:	f002 f812 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 800207c:	e00a      	b.n	8002094 <_ZN11DW1000Class4tuneEv+0x214>
		}
		else if (_pulseFrequency == TX_PULSE_FREQ_64MHZ)
 800207e:	4b2d      	ldr	r3, [pc, #180]	; (8002134 <_ZN11DW1000Class4tuneEv+0x2b4>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	2b02      	cmp	r3, #2
 8002084:	d106      	bne.n	8002094 <_ZN11DW1000Class4tuneEv+0x214>
		{
			writeValueToBytes(drxtune2, 0x373B0296L, LEN_DRX_TUNE2);
 8002086:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800208a:	2204      	movs	r2, #4
 800208c:	4935      	ldr	r1, [pc, #212]	; (8002164 <_ZN11DW1000Class4tuneEv+0x2e4>)
 800208e:	4618      	mov	r0, r3
 8002090:	f002 f806 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
	else
	{
		// TODO proper error/warning handling
	}
	// DRX_TUNE4H
	if (_preambleLength == TX_PREAMBLE_LEN_64)
 8002094:	4b2a      	ldr	r3, [pc, #168]	; (8002140 <_ZN11DW1000Class4tuneEv+0x2c0>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d107      	bne.n	80020ac <_ZN11DW1000Class4tuneEv+0x22c>
	{
		writeValueToBytes(drxtune4H, 0x0010, LEN_DRX_TUNE4H);
 800209c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020a0:	2202      	movs	r2, #2
 80020a2:	2110      	movs	r1, #16
 80020a4:	4618      	mov	r0, r3
 80020a6:	f001 fffb 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 80020aa:	e006      	b.n	80020ba <_ZN11DW1000Class4tuneEv+0x23a>
	}
	else
	{
		writeValueToBytes(drxtune4H, 0x0028, LEN_DRX_TUNE4H);
 80020ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020b0:	2202      	movs	r2, #2
 80020b2:	2128      	movs	r1, #40	; 0x28
 80020b4:	4618      	mov	r0, r3
 80020b6:	f001 fff3 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
	}
	// RF_RXCTRLH
	if (_channel != CHANNEL_4 && _channel != CHANNEL_7)
 80020ba:	4b2b      	ldr	r3, [pc, #172]	; (8002168 <_ZN11DW1000Class4tuneEv+0x2e8>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	2b04      	cmp	r3, #4
 80020c0:	d00b      	beq.n	80020da <_ZN11DW1000Class4tuneEv+0x25a>
 80020c2:	4b29      	ldr	r3, [pc, #164]	; (8002168 <_ZN11DW1000Class4tuneEv+0x2e8>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	2b07      	cmp	r3, #7
 80020c8:	d007      	beq.n	80020da <_ZN11DW1000Class4tuneEv+0x25a>
	{
		writeValueToBytes(rfrxctrlh, 0xD8, LEN_RF_RXCTRLH);
 80020ca:	f107 031c 	add.w	r3, r7, #28
 80020ce:	2201      	movs	r2, #1
 80020d0:	21d8      	movs	r1, #216	; 0xd8
 80020d2:	4618      	mov	r0, r3
 80020d4:	f001 ffe4 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 80020d8:	e006      	b.n	80020e8 <_ZN11DW1000Class4tuneEv+0x268>
	}
	else
	{
		writeValueToBytes(rfrxctrlh, 0xBC, LEN_RF_RXCTRLH);
 80020da:	f107 031c 	add.w	r3, r7, #28
 80020de:	2201      	movs	r2, #1
 80020e0:	21bc      	movs	r1, #188	; 0xbc
 80020e2:	4618      	mov	r0, r3
 80020e4:	f001 ffdc 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
	}
	// RX_TXCTRL
	if (_channel == CHANNEL_1)
 80020e8:	4b1f      	ldr	r3, [pc, #124]	; (8002168 <_ZN11DW1000Class4tuneEv+0x2e8>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d108      	bne.n	8002102 <_ZN11DW1000Class4tuneEv+0x282>
	{
		writeValueToBytes(rftxctrl, 0x00005C40L, LEN_RF_TXCTRL);
 80020f0:	f107 0318 	add.w	r3, r7, #24
 80020f4:	2204      	movs	r2, #4
 80020f6:	f645 4140 	movw	r1, #23616	; 0x5c40
 80020fa:	4618      	mov	r0, r3
 80020fc:	f001 ffd0 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 8002100:	e05b      	b.n	80021ba <_ZN11DW1000Class4tuneEv+0x33a>
	}
	else if (_channel == CHANNEL_2)
 8002102:	4b19      	ldr	r3, [pc, #100]	; (8002168 <_ZN11DW1000Class4tuneEv+0x2e8>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	2b02      	cmp	r3, #2
 8002108:	d107      	bne.n	800211a <_ZN11DW1000Class4tuneEv+0x29a>
	{
		writeValueToBytes(rftxctrl, 0x00045CA0L, LEN_RF_TXCTRL);
 800210a:	f107 0318 	add.w	r3, r7, #24
 800210e:	2204      	movs	r2, #4
 8002110:	4916      	ldr	r1, [pc, #88]	; (800216c <_ZN11DW1000Class4tuneEv+0x2ec>)
 8002112:	4618      	mov	r0, r3
 8002114:	f001 ffc4 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 8002118:	e04f      	b.n	80021ba <_ZN11DW1000Class4tuneEv+0x33a>
	}
	else if (_channel == CHANNEL_3)
 800211a:	4b13      	ldr	r3, [pc, #76]	; (8002168 <_ZN11DW1000Class4tuneEv+0x2e8>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	2b03      	cmp	r3, #3
 8002120:	d128      	bne.n	8002174 <_ZN11DW1000Class4tuneEv+0x2f4>
	{
		writeValueToBytes(rftxctrl, 0x00086CC0L, LEN_RF_TXCTRL);
 8002122:	f107 0318 	add.w	r3, r7, #24
 8002126:	2204      	movs	r2, #4
 8002128:	4911      	ldr	r1, [pc, #68]	; (8002170 <_ZN11DW1000Class4tuneEv+0x2f0>)
 800212a:	4618      	mov	r0, r3
 800212c:	f001 ffb8 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 8002130:	e043      	b.n	80021ba <_ZN11DW1000Class4tuneEv+0x33a>
 8002132:	bf00      	nop
 8002134:	20000005 	.word	0x20000005
 8002138:	2502a907 	.word	0x2502a907
 800213c:	20000006 	.word	0x20000006
 8002140:	20000007 	.word	0x20000007
 8002144:	20000004 	.word	0x20000004
 8002148:	311a002d 	.word	0x311a002d
 800214c:	313b006b 	.word	0x313b006b
 8002150:	331a0052 	.word	0x331a0052
 8002154:	333b00be 	.word	0x333b00be
 8002158:	351a009a 	.word	0x351a009a
 800215c:	353b015e 	.word	0x353b015e
 8002160:	371a011d 	.word	0x371a011d
 8002164:	373b0296 	.word	0x373b0296
 8002168:	20000009 	.word	0x20000009
 800216c:	00045ca0 	.word	0x00045ca0
 8002170:	00086cc0 	.word	0x00086cc0
	}
	else if (_channel == CHANNEL_4)
 8002174:	4bb3      	ldr	r3, [pc, #716]	; (8002444 <_ZN11DW1000Class4tuneEv+0x5c4>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	2b04      	cmp	r3, #4
 800217a:	d107      	bne.n	800218c <_ZN11DW1000Class4tuneEv+0x30c>
	{
		writeValueToBytes(rftxctrl, 0x00045C80L, LEN_RF_TXCTRL);
 800217c:	f107 0318 	add.w	r3, r7, #24
 8002180:	2204      	movs	r2, #4
 8002182:	49b1      	ldr	r1, [pc, #708]	; (8002448 <_ZN11DW1000Class4tuneEv+0x5c8>)
 8002184:	4618      	mov	r0, r3
 8002186:	f001 ff8b 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 800218a:	e016      	b.n	80021ba <_ZN11DW1000Class4tuneEv+0x33a>
	}
	else if (_channel == CHANNEL_5)
 800218c:	4bad      	ldr	r3, [pc, #692]	; (8002444 <_ZN11DW1000Class4tuneEv+0x5c4>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b05      	cmp	r3, #5
 8002192:	d107      	bne.n	80021a4 <_ZN11DW1000Class4tuneEv+0x324>
	{
		writeValueToBytes(rftxctrl, 0x001E3FE0L, LEN_RF_TXCTRL);
 8002194:	f107 0318 	add.w	r3, r7, #24
 8002198:	2204      	movs	r2, #4
 800219a:	49ac      	ldr	r1, [pc, #688]	; (800244c <_ZN11DW1000Class4tuneEv+0x5cc>)
 800219c:	4618      	mov	r0, r3
 800219e:	f001 ff7f 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 80021a2:	e00a      	b.n	80021ba <_ZN11DW1000Class4tuneEv+0x33a>
	}
	else if (_channel == CHANNEL_7)
 80021a4:	4ba7      	ldr	r3, [pc, #668]	; (8002444 <_ZN11DW1000Class4tuneEv+0x5c4>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b07      	cmp	r3, #7
 80021aa:	d106      	bne.n	80021ba <_ZN11DW1000Class4tuneEv+0x33a>
	{
		writeValueToBytes(rftxctrl, 0x001E7DE0L, LEN_RF_TXCTRL);
 80021ac:	f107 0318 	add.w	r3, r7, #24
 80021b0:	2204      	movs	r2, #4
 80021b2:	49a7      	ldr	r1, [pc, #668]	; (8002450 <_ZN11DW1000Class4tuneEv+0x5d0>)
 80021b4:	4618      	mov	r0, r3
 80021b6:	f001 ff73 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
	else
	{
		// TODO proper error/warning handling
	}
	// TC_PGDELAY
	if (_channel == CHANNEL_1)
 80021ba:	4ba2      	ldr	r3, [pc, #648]	; (8002444 <_ZN11DW1000Class4tuneEv+0x5c4>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d107      	bne.n	80021d2 <_ZN11DW1000Class4tuneEv+0x352>
	{
		writeValueToBytes(tcpgdelay, 0xC9, LEN_TC_PGDELAY);
 80021c2:	f107 0314 	add.w	r3, r7, #20
 80021c6:	2201      	movs	r2, #1
 80021c8:	21c9      	movs	r1, #201	; 0xc9
 80021ca:	4618      	mov	r0, r3
 80021cc:	f001 ff68 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 80021d0:	e03a      	b.n	8002248 <_ZN11DW1000Class4tuneEv+0x3c8>
	}
	else if (_channel == CHANNEL_2)
 80021d2:	4b9c      	ldr	r3, [pc, #624]	; (8002444 <_ZN11DW1000Class4tuneEv+0x5c4>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d107      	bne.n	80021ea <_ZN11DW1000Class4tuneEv+0x36a>
	{
		writeValueToBytes(tcpgdelay, 0xC2, LEN_TC_PGDELAY);
 80021da:	f107 0314 	add.w	r3, r7, #20
 80021de:	2201      	movs	r2, #1
 80021e0:	21c2      	movs	r1, #194	; 0xc2
 80021e2:	4618      	mov	r0, r3
 80021e4:	f001 ff5c 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 80021e8:	e02e      	b.n	8002248 <_ZN11DW1000Class4tuneEv+0x3c8>
	}
	else if (_channel == CHANNEL_3)
 80021ea:	4b96      	ldr	r3, [pc, #600]	; (8002444 <_ZN11DW1000Class4tuneEv+0x5c4>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b03      	cmp	r3, #3
 80021f0:	d107      	bne.n	8002202 <_ZN11DW1000Class4tuneEv+0x382>
	{
		writeValueToBytes(tcpgdelay, 0xC5, LEN_TC_PGDELAY);
 80021f2:	f107 0314 	add.w	r3, r7, #20
 80021f6:	2201      	movs	r2, #1
 80021f8:	21c5      	movs	r1, #197	; 0xc5
 80021fa:	4618      	mov	r0, r3
 80021fc:	f001 ff50 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 8002200:	e022      	b.n	8002248 <_ZN11DW1000Class4tuneEv+0x3c8>
	}
	else if (_channel == CHANNEL_4)
 8002202:	4b90      	ldr	r3, [pc, #576]	; (8002444 <_ZN11DW1000Class4tuneEv+0x5c4>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	2b04      	cmp	r3, #4
 8002208:	d107      	bne.n	800221a <_ZN11DW1000Class4tuneEv+0x39a>
	{
		writeValueToBytes(tcpgdelay, 0x95, LEN_TC_PGDELAY);
 800220a:	f107 0314 	add.w	r3, r7, #20
 800220e:	2201      	movs	r2, #1
 8002210:	2195      	movs	r1, #149	; 0x95
 8002212:	4618      	mov	r0, r3
 8002214:	f001 ff44 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 8002218:	e016      	b.n	8002248 <_ZN11DW1000Class4tuneEv+0x3c8>
	}
	else if (_channel == CHANNEL_5)
 800221a:	4b8a      	ldr	r3, [pc, #552]	; (8002444 <_ZN11DW1000Class4tuneEv+0x5c4>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	2b05      	cmp	r3, #5
 8002220:	d107      	bne.n	8002232 <_ZN11DW1000Class4tuneEv+0x3b2>
	{
		writeValueToBytes(tcpgdelay, 0xC0, LEN_TC_PGDELAY);
 8002222:	f107 0314 	add.w	r3, r7, #20
 8002226:	2201      	movs	r2, #1
 8002228:	21c0      	movs	r1, #192	; 0xc0
 800222a:	4618      	mov	r0, r3
 800222c:	f001 ff38 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 8002230:	e00a      	b.n	8002248 <_ZN11DW1000Class4tuneEv+0x3c8>
	}
	else if (_channel == CHANNEL_7)
 8002232:	4b84      	ldr	r3, [pc, #528]	; (8002444 <_ZN11DW1000Class4tuneEv+0x5c4>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	2b07      	cmp	r3, #7
 8002238:	d106      	bne.n	8002248 <_ZN11DW1000Class4tuneEv+0x3c8>
	{
		writeValueToBytes(tcpgdelay, 0x93, LEN_TC_PGDELAY);
 800223a:	f107 0314 	add.w	r3, r7, #20
 800223e:	2201      	movs	r2, #1
 8002240:	2193      	movs	r1, #147	; 0x93
 8002242:	4618      	mov	r0, r3
 8002244:	f001 ff2c 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
	else
	{
		// TODO proper error/warning handling
	}
	// FS_PLLCFG and FS_PLLTUNE
	if (_channel == CHANNEL_1)
 8002248:	4b7e      	ldr	r3, [pc, #504]	; (8002444 <_ZN11DW1000Class4tuneEv+0x5c4>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d10e      	bne.n	800226e <_ZN11DW1000Class4tuneEv+0x3ee>
	{
		writeValueToBytes(fspllcfg, 0x09000407L, LEN_FS_PLLCFG);
 8002250:	f107 0310 	add.w	r3, r7, #16
 8002254:	2204      	movs	r2, #4
 8002256:	497f      	ldr	r1, [pc, #508]	; (8002454 <_ZN11DW1000Class4tuneEv+0x5d4>)
 8002258:	4618      	mov	r0, r3
 800225a:	f001 ff21 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
		writeValueToBytes(fsplltune, 0x1E, LEN_FS_PLLTUNE);
 800225e:	f107 030c 	add.w	r3, r7, #12
 8002262:	2201      	movs	r2, #1
 8002264:	211e      	movs	r1, #30
 8002266:	4618      	mov	r0, r3
 8002268:	f001 ff1a 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 800226c:	e03f      	b.n	80022ee <_ZN11DW1000Class4tuneEv+0x46e>
	}
	else if (_channel == CHANNEL_2 || _channel == CHANNEL_4)
 800226e:	4b75      	ldr	r3, [pc, #468]	; (8002444 <_ZN11DW1000Class4tuneEv+0x5c4>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	2b02      	cmp	r3, #2
 8002274:	d003      	beq.n	800227e <_ZN11DW1000Class4tuneEv+0x3fe>
 8002276:	4b73      	ldr	r3, [pc, #460]	; (8002444 <_ZN11DW1000Class4tuneEv+0x5c4>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b04      	cmp	r3, #4
 800227c:	d10e      	bne.n	800229c <_ZN11DW1000Class4tuneEv+0x41c>
	{
		writeValueToBytes(fspllcfg, 0x08400508L, LEN_FS_PLLCFG);
 800227e:	f107 0310 	add.w	r3, r7, #16
 8002282:	2204      	movs	r2, #4
 8002284:	4974      	ldr	r1, [pc, #464]	; (8002458 <_ZN11DW1000Class4tuneEv+0x5d8>)
 8002286:	4618      	mov	r0, r3
 8002288:	f001 ff0a 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
		writeValueToBytes(fsplltune, 0x26, LEN_FS_PLLTUNE);
 800228c:	f107 030c 	add.w	r3, r7, #12
 8002290:	2201      	movs	r2, #1
 8002292:	2126      	movs	r1, #38	; 0x26
 8002294:	4618      	mov	r0, r3
 8002296:	f001 ff03 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 800229a:	e028      	b.n	80022ee <_ZN11DW1000Class4tuneEv+0x46e>
	}
	else if (_channel == CHANNEL_3)
 800229c:	4b69      	ldr	r3, [pc, #420]	; (8002444 <_ZN11DW1000Class4tuneEv+0x5c4>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b03      	cmp	r3, #3
 80022a2:	d10e      	bne.n	80022c2 <_ZN11DW1000Class4tuneEv+0x442>
	{
		writeValueToBytes(fspllcfg, 0x08401009L, LEN_FS_PLLCFG);
 80022a4:	f107 0310 	add.w	r3, r7, #16
 80022a8:	2204      	movs	r2, #4
 80022aa:	496c      	ldr	r1, [pc, #432]	; (800245c <_ZN11DW1000Class4tuneEv+0x5dc>)
 80022ac:	4618      	mov	r0, r3
 80022ae:	f001 fef7 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
		writeValueToBytes(fsplltune, 0x56, LEN_FS_PLLTUNE);
 80022b2:	f107 030c 	add.w	r3, r7, #12
 80022b6:	2201      	movs	r2, #1
 80022b8:	2156      	movs	r1, #86	; 0x56
 80022ba:	4618      	mov	r0, r3
 80022bc:	f001 fef0 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 80022c0:	e015      	b.n	80022ee <_ZN11DW1000Class4tuneEv+0x46e>
	}
	else if (_channel == CHANNEL_5 || _channel == CHANNEL_7)
 80022c2:	4b60      	ldr	r3, [pc, #384]	; (8002444 <_ZN11DW1000Class4tuneEv+0x5c4>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	2b05      	cmp	r3, #5
 80022c8:	d003      	beq.n	80022d2 <_ZN11DW1000Class4tuneEv+0x452>
 80022ca:	4b5e      	ldr	r3, [pc, #376]	; (8002444 <_ZN11DW1000Class4tuneEv+0x5c4>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	2b07      	cmp	r3, #7
 80022d0:	d10d      	bne.n	80022ee <_ZN11DW1000Class4tuneEv+0x46e>
	{
		writeValueToBytes(fspllcfg, 0x0800041DL, LEN_FS_PLLCFG);
 80022d2:	f107 0310 	add.w	r3, r7, #16
 80022d6:	2204      	movs	r2, #4
 80022d8:	4961      	ldr	r1, [pc, #388]	; (8002460 <_ZN11DW1000Class4tuneEv+0x5e0>)
 80022da:	4618      	mov	r0, r3
 80022dc:	f001 fee0 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
		writeValueToBytes(fsplltune, 0xBE, LEN_FS_PLLTUNE);
 80022e0:	f107 030c 	add.w	r3, r7, #12
 80022e4:	2201      	movs	r2, #1
 80022e6:	21be      	movs	r1, #190	; 0xbe
 80022e8:	4618      	mov	r0, r3
 80022ea:	f001 fed9 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
	else
	{
		// TODO proper error/warning handling
	}
	// LDE_CFG1
	writeValueToBytes(ldecfg1, 0xD, LEN_LDE_CFG1);
 80022ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022f2:	2201      	movs	r2, #1
 80022f4:	210d      	movs	r1, #13
 80022f6:	4618      	mov	r0, r3
 80022f8:	f001 fed2 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
	// LDE_CFG2
	if (_pulseFrequency == TX_PULSE_FREQ_16MHZ)
 80022fc:	4b59      	ldr	r3, [pc, #356]	; (8002464 <_ZN11DW1000Class4tuneEv+0x5e4>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d108      	bne.n	8002316 <_ZN11DW1000Class4tuneEv+0x496>
	{
		writeValueToBytes(ldecfg2, 0x1607, LEN_LDE_CFG2);
 8002304:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002308:	2202      	movs	r2, #2
 800230a:	f241 6107 	movw	r1, #5639	; 0x1607
 800230e:	4618      	mov	r0, r3
 8002310:	f001 fec6 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 8002314:	e00b      	b.n	800232e <_ZN11DW1000Class4tuneEv+0x4ae>
	}
	else if (_pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8002316:	4b53      	ldr	r3, [pc, #332]	; (8002464 <_ZN11DW1000Class4tuneEv+0x5e4>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b02      	cmp	r3, #2
 800231c:	d107      	bne.n	800232e <_ZN11DW1000Class4tuneEv+0x4ae>
	{
		writeValueToBytes(ldecfg2, 0x0607, LEN_LDE_CFG2);
 800231e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002322:	2202      	movs	r2, #2
 8002324:	f240 6107 	movw	r1, #1543	; 0x607
 8002328:	4618      	mov	r0, r3
 800232a:	f001 feb9 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
	else
	{
		// TODO proper error/warning handling
	}
	// LDE_REPC
	if (_preambleCode == PREAMBLE_CODE_16MHZ_1 || _preambleCode == PREAMBLE_CODE_16MHZ_2)
 800232e:	4b4e      	ldr	r3, [pc, #312]	; (8002468 <_ZN11DW1000Class4tuneEv+0x5e8>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d003      	beq.n	800233e <_ZN11DW1000Class4tuneEv+0x4be>
 8002336:	4b4c      	ldr	r3, [pc, #304]	; (8002468 <_ZN11DW1000Class4tuneEv+0x5e8>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	2b02      	cmp	r3, #2
 800233c:	d115      	bne.n	800236a <_ZN11DW1000Class4tuneEv+0x4ea>
	{
		if (_dataRate == TRX_RATE_110KBPS)
 800233e:	4b4b      	ldr	r3, [pc, #300]	; (800246c <_ZN11DW1000Class4tuneEv+0x5ec>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d108      	bne.n	8002358 <_ZN11DW1000Class4tuneEv+0x4d8>
		{
			writeValueToBytes(lderepc, ((0x5998 >> 3) & 0xFFFF), LEN_LDE_REPC);
 8002346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800234a:	2202      	movs	r2, #2
 800234c:	f640 3133 	movw	r1, #2867	; 0xb33
 8002350:	4618      	mov	r0, r3
 8002352:	f001 fea5 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
		if (_dataRate == TRX_RATE_110KBPS)
 8002356:	e148      	b.n	80025ea <_ZN11DW1000Class4tuneEv+0x76a>
		}
		else
		{
			writeValueToBytes(lderepc, 0x5998, LEN_LDE_REPC);
 8002358:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800235c:	2202      	movs	r2, #2
 800235e:	f645 1198 	movw	r1, #22936	; 0x5998
 8002362:	4618      	mov	r0, r3
 8002364:	f001 fe9c 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
		if (_dataRate == TRX_RATE_110KBPS)
 8002368:	e13f      	b.n	80025ea <_ZN11DW1000Class4tuneEv+0x76a>
		}
	}
	else if (_preambleCode == PREAMBLE_CODE_16MHZ_3 || _preambleCode == PREAMBLE_CODE_16MHZ_8)
 800236a:	4b3f      	ldr	r3, [pc, #252]	; (8002468 <_ZN11DW1000Class4tuneEv+0x5e8>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2b03      	cmp	r3, #3
 8002370:	d003      	beq.n	800237a <_ZN11DW1000Class4tuneEv+0x4fa>
 8002372:	4b3d      	ldr	r3, [pc, #244]	; (8002468 <_ZN11DW1000Class4tuneEv+0x5e8>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b08      	cmp	r3, #8
 8002378:	d115      	bne.n	80023a6 <_ZN11DW1000Class4tuneEv+0x526>
	{
		if (_dataRate == TRX_RATE_110KBPS)
 800237a:	4b3c      	ldr	r3, [pc, #240]	; (800246c <_ZN11DW1000Class4tuneEv+0x5ec>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d108      	bne.n	8002394 <_ZN11DW1000Class4tuneEv+0x514>
		{
			writeValueToBytes(lderepc, ((0x51EA >> 3) & 0xFFFF), LEN_LDE_REPC);
 8002382:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002386:	2202      	movs	r2, #2
 8002388:	f640 213d 	movw	r1, #2621	; 0xa3d
 800238c:	4618      	mov	r0, r3
 800238e:	f001 fe87 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
		if (_dataRate == TRX_RATE_110KBPS)
 8002392:	e12a      	b.n	80025ea <_ZN11DW1000Class4tuneEv+0x76a>
		}
		else
		{
			writeValueToBytes(lderepc, 0x51EA, LEN_LDE_REPC);
 8002394:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002398:	2202      	movs	r2, #2
 800239a:	f245 11ea 	movw	r1, #20970	; 0x51ea
 800239e:	4618      	mov	r0, r3
 80023a0:	f001 fe7e 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
		if (_dataRate == TRX_RATE_110KBPS)
 80023a4:	e121      	b.n	80025ea <_ZN11DW1000Class4tuneEv+0x76a>
		}
	}
	else if (_preambleCode == PREAMBLE_CODE_16MHZ_4)
 80023a6:	4b30      	ldr	r3, [pc, #192]	; (8002468 <_ZN11DW1000Class4tuneEv+0x5e8>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	d115      	bne.n	80023da <_ZN11DW1000Class4tuneEv+0x55a>
	{
		if (_dataRate == TRX_RATE_110KBPS)
 80023ae:	4b2f      	ldr	r3, [pc, #188]	; (800246c <_ZN11DW1000Class4tuneEv+0x5ec>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d108      	bne.n	80023c8 <_ZN11DW1000Class4tuneEv+0x548>
		{
			writeValueToBytes(lderepc, ((0x428E >> 3) & 0xFFFF), LEN_LDE_REPC);
 80023b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ba:	2202      	movs	r2, #2
 80023bc:	f640 0151 	movw	r1, #2129	; 0x851
 80023c0:	4618      	mov	r0, r3
 80023c2:	f001 fe6d 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 80023c6:	e110      	b.n	80025ea <_ZN11DW1000Class4tuneEv+0x76a>
		}
		else
		{
			writeValueToBytes(lderepc, 0x428E, LEN_LDE_REPC);
 80023c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023cc:	2202      	movs	r2, #2
 80023ce:	f244 218e 	movw	r1, #17038	; 0x428e
 80023d2:	4618      	mov	r0, r3
 80023d4:	f001 fe64 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 80023d8:	e107      	b.n	80025ea <_ZN11DW1000Class4tuneEv+0x76a>
		}
	}
	else if (_preambleCode == PREAMBLE_CODE_16MHZ_5)
 80023da:	4b23      	ldr	r3, [pc, #140]	; (8002468 <_ZN11DW1000Class4tuneEv+0x5e8>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b05      	cmp	r3, #5
 80023e0:	d115      	bne.n	800240e <_ZN11DW1000Class4tuneEv+0x58e>
	{
		if (_dataRate == TRX_RATE_110KBPS)
 80023e2:	4b22      	ldr	r3, [pc, #136]	; (800246c <_ZN11DW1000Class4tuneEv+0x5ec>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d108      	bne.n	80023fc <_ZN11DW1000Class4tuneEv+0x57c>
		{
			writeValueToBytes(lderepc, ((0x451E >> 3) & 0xFFFF), LEN_LDE_REPC);
 80023ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ee:	2202      	movs	r2, #2
 80023f0:	f640 01a3 	movw	r1, #2211	; 0x8a3
 80023f4:	4618      	mov	r0, r3
 80023f6:	f001 fe53 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 80023fa:	e0f6      	b.n	80025ea <_ZN11DW1000Class4tuneEv+0x76a>
		}
		else
		{
			writeValueToBytes(lderepc, 0x451E, LEN_LDE_REPC);
 80023fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002400:	2202      	movs	r2, #2
 8002402:	f244 511e 	movw	r1, #17694	; 0x451e
 8002406:	4618      	mov	r0, r3
 8002408:	f001 fe4a 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 800240c:	e0ed      	b.n	80025ea <_ZN11DW1000Class4tuneEv+0x76a>
		}
	}
	else if (_preambleCode == PREAMBLE_CODE_16MHZ_6)
 800240e:	4b16      	ldr	r3, [pc, #88]	; (8002468 <_ZN11DW1000Class4tuneEv+0x5e8>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b06      	cmp	r3, #6
 8002414:	d12c      	bne.n	8002470 <_ZN11DW1000Class4tuneEv+0x5f0>
	{
		if (_dataRate == TRX_RATE_110KBPS)
 8002416:	4b15      	ldr	r3, [pc, #84]	; (800246c <_ZN11DW1000Class4tuneEv+0x5ec>)
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d108      	bne.n	8002430 <_ZN11DW1000Class4tuneEv+0x5b0>
		{
			writeValueToBytes(lderepc, ((0x2E14 >> 3) & 0xFFFF), LEN_LDE_REPC);
 800241e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002422:	2202      	movs	r2, #2
 8002424:	f240 51c2 	movw	r1, #1474	; 0x5c2
 8002428:	4618      	mov	r0, r3
 800242a:	f001 fe39 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 800242e:	e0dc      	b.n	80025ea <_ZN11DW1000Class4tuneEv+0x76a>
		}
		else
		{
			writeValueToBytes(lderepc, 0x2E14, LEN_LDE_REPC);
 8002430:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002434:	2202      	movs	r2, #2
 8002436:	f642 6114 	movw	r1, #11796	; 0x2e14
 800243a:	4618      	mov	r0, r3
 800243c:	f001 fe30 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 8002440:	e0d3      	b.n	80025ea <_ZN11DW1000Class4tuneEv+0x76a>
 8002442:	bf00      	nop
 8002444:	20000009 	.word	0x20000009
 8002448:	00045c80 	.word	0x00045c80
 800244c:	001e3fe0 	.word	0x001e3fe0
 8002450:	001e7de0 	.word	0x001e7de0
 8002454:	09000407 	.word	0x09000407
 8002458:	08400508 	.word	0x08400508
 800245c:	08401009 	.word	0x08401009
 8002460:	0800041d 	.word	0x0800041d
 8002464:	20000005 	.word	0x20000005
 8002468:	20000008 	.word	0x20000008
 800246c:	20000006 	.word	0x20000006
		}
	}
	else if (_preambleCode == PREAMBLE_CODE_16MHZ_7)
 8002470:	4bae      	ldr	r3, [pc, #696]	; (800272c <_ZN11DW1000Class4tuneEv+0x8ac>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	2b07      	cmp	r3, #7
 8002476:	d115      	bne.n	80024a4 <_ZN11DW1000Class4tuneEv+0x624>
	{
		if (_dataRate == TRX_RATE_110KBPS)
 8002478:	4bad      	ldr	r3, [pc, #692]	; (8002730 <_ZN11DW1000Class4tuneEv+0x8b0>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d108      	bne.n	8002492 <_ZN11DW1000Class4tuneEv+0x612>
		{
			writeValueToBytes(lderepc, ((0x8000 >> 3) & 0xFFFF), LEN_LDE_REPC);
 8002480:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002484:	2202      	movs	r2, #2
 8002486:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800248a:	4618      	mov	r0, r3
 800248c:	f001 fe08 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 8002490:	e0ab      	b.n	80025ea <_ZN11DW1000Class4tuneEv+0x76a>
		}
		else
		{
			writeValueToBytes(lderepc, 0x8000, LEN_LDE_REPC);
 8002492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002496:	2202      	movs	r2, #2
 8002498:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800249c:	4618      	mov	r0, r3
 800249e:	f001 fdff 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 80024a2:	e0a2      	b.n	80025ea <_ZN11DW1000Class4tuneEv+0x76a>
		}
	}
	else if (_preambleCode == PREAMBLE_CODE_64MHZ_9)
 80024a4:	4ba1      	ldr	r3, [pc, #644]	; (800272c <_ZN11DW1000Class4tuneEv+0x8ac>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	2b09      	cmp	r3, #9
 80024aa:	d115      	bne.n	80024d8 <_ZN11DW1000Class4tuneEv+0x658>
	{
		if (_dataRate == TRX_RATE_110KBPS)
 80024ac:	4ba0      	ldr	r3, [pc, #640]	; (8002730 <_ZN11DW1000Class4tuneEv+0x8b0>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d108      	bne.n	80024c6 <_ZN11DW1000Class4tuneEv+0x646>
		{
			writeValueToBytes(lderepc, ((0x28F4 >> 3) & 0xFFFF), LEN_LDE_REPC);
 80024b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024b8:	2202      	movs	r2, #2
 80024ba:	f240 511e 	movw	r1, #1310	; 0x51e
 80024be:	4618      	mov	r0, r3
 80024c0:	f001 fdee 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 80024c4:	e091      	b.n	80025ea <_ZN11DW1000Class4tuneEv+0x76a>
		}
		else
		{
			writeValueToBytes(lderepc, 0x28F4, LEN_LDE_REPC);
 80024c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024ca:	2202      	movs	r2, #2
 80024cc:	f642 01f4 	movw	r1, #10484	; 0x28f4
 80024d0:	4618      	mov	r0, r3
 80024d2:	f001 fde5 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 80024d6:	e088      	b.n	80025ea <_ZN11DW1000Class4tuneEv+0x76a>
		}
	}
	else if (_preambleCode == PREAMBLE_CODE_64MHZ_10 || _preambleCode == PREAMBLE_CODE_64MHZ_17)
 80024d8:	4b94      	ldr	r3, [pc, #592]	; (800272c <_ZN11DW1000Class4tuneEv+0x8ac>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	2b0a      	cmp	r3, #10
 80024de:	d003      	beq.n	80024e8 <_ZN11DW1000Class4tuneEv+0x668>
 80024e0:	4b92      	ldr	r3, [pc, #584]	; (800272c <_ZN11DW1000Class4tuneEv+0x8ac>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	2b11      	cmp	r3, #17
 80024e6:	d115      	bne.n	8002514 <_ZN11DW1000Class4tuneEv+0x694>
	{
		if (_dataRate == TRX_RATE_110KBPS)
 80024e8:	4b91      	ldr	r3, [pc, #580]	; (8002730 <_ZN11DW1000Class4tuneEv+0x8b0>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d108      	bne.n	8002502 <_ZN11DW1000Class4tuneEv+0x682>
		{
			writeValueToBytes(lderepc, ((0x3332 >> 3) & 0xFFFF), LEN_LDE_REPC);
 80024f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024f4:	2202      	movs	r2, #2
 80024f6:	f240 6166 	movw	r1, #1638	; 0x666
 80024fa:	4618      	mov	r0, r3
 80024fc:	f001 fdd0 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
		if (_dataRate == TRX_RATE_110KBPS)
 8002500:	e073      	b.n	80025ea <_ZN11DW1000Class4tuneEv+0x76a>
		}
		else
		{
			writeValueToBytes(lderepc, 0x3332, LEN_LDE_REPC);
 8002502:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002506:	2202      	movs	r2, #2
 8002508:	f243 3132 	movw	r1, #13106	; 0x3332
 800250c:	4618      	mov	r0, r3
 800250e:	f001 fdc7 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
		if (_dataRate == TRX_RATE_110KBPS)
 8002512:	e06a      	b.n	80025ea <_ZN11DW1000Class4tuneEv+0x76a>
		}
	}
	else if (_preambleCode == PREAMBLE_CODE_64MHZ_11)
 8002514:	4b85      	ldr	r3, [pc, #532]	; (800272c <_ZN11DW1000Class4tuneEv+0x8ac>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b0b      	cmp	r3, #11
 800251a:	d115      	bne.n	8002548 <_ZN11DW1000Class4tuneEv+0x6c8>
	{
		if (_dataRate == TRX_RATE_110KBPS)
 800251c:	4b84      	ldr	r3, [pc, #528]	; (8002730 <_ZN11DW1000Class4tuneEv+0x8b0>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d108      	bne.n	8002536 <_ZN11DW1000Class4tuneEv+0x6b6>
		{
			writeValueToBytes(lderepc, ((0x3AE0 >> 3) & 0xFFFF), LEN_LDE_REPC);
 8002524:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002528:	2202      	movs	r2, #2
 800252a:	f240 715c 	movw	r1, #1884	; 0x75c
 800252e:	4618      	mov	r0, r3
 8002530:	f001 fdb6 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 8002534:	e059      	b.n	80025ea <_ZN11DW1000Class4tuneEv+0x76a>
		}
		else
		{
			writeValueToBytes(lderepc, 0x3AE0, LEN_LDE_REPC);
 8002536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800253a:	2202      	movs	r2, #2
 800253c:	f643 21e0 	movw	r1, #15072	; 0x3ae0
 8002540:	4618      	mov	r0, r3
 8002542:	f001 fdad 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 8002546:	e050      	b.n	80025ea <_ZN11DW1000Class4tuneEv+0x76a>
		}
	}
	else if (_preambleCode == PREAMBLE_CODE_64MHZ_12)
 8002548:	4b78      	ldr	r3, [pc, #480]	; (800272c <_ZN11DW1000Class4tuneEv+0x8ac>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	2b0c      	cmp	r3, #12
 800254e:	d115      	bne.n	800257c <_ZN11DW1000Class4tuneEv+0x6fc>
	{
		if (_dataRate == TRX_RATE_110KBPS)
 8002550:	4b77      	ldr	r3, [pc, #476]	; (8002730 <_ZN11DW1000Class4tuneEv+0x8b0>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d108      	bne.n	800256a <_ZN11DW1000Class4tuneEv+0x6ea>
		{
			writeValueToBytes(lderepc, ((0x3D70 >> 3) & 0xFFFF), LEN_LDE_REPC);
 8002558:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800255c:	2202      	movs	r2, #2
 800255e:	f240 71ae 	movw	r1, #1966	; 0x7ae
 8002562:	4618      	mov	r0, r3
 8002564:	f001 fd9c 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 8002568:	e03f      	b.n	80025ea <_ZN11DW1000Class4tuneEv+0x76a>
		}
		else
		{
			writeValueToBytes(lderepc, 0x3D70, LEN_LDE_REPC);
 800256a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800256e:	2202      	movs	r2, #2
 8002570:	f643 5170 	movw	r1, #15728	; 0x3d70
 8002574:	4618      	mov	r0, r3
 8002576:	f001 fd93 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 800257a:	e036      	b.n	80025ea <_ZN11DW1000Class4tuneEv+0x76a>
		}
	}
	else if (_preambleCode == PREAMBLE_CODE_64MHZ_18 || _preambleCode == PREAMBLE_CODE_64MHZ_19)
 800257c:	4b6b      	ldr	r3, [pc, #428]	; (800272c <_ZN11DW1000Class4tuneEv+0x8ac>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2b12      	cmp	r3, #18
 8002582:	d003      	beq.n	800258c <_ZN11DW1000Class4tuneEv+0x70c>
 8002584:	4b69      	ldr	r3, [pc, #420]	; (800272c <_ZN11DW1000Class4tuneEv+0x8ac>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2b13      	cmp	r3, #19
 800258a:	d115      	bne.n	80025b8 <_ZN11DW1000Class4tuneEv+0x738>
	{
		if (_dataRate == TRX_RATE_110KBPS)
 800258c:	4b68      	ldr	r3, [pc, #416]	; (8002730 <_ZN11DW1000Class4tuneEv+0x8b0>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d108      	bne.n	80025a6 <_ZN11DW1000Class4tuneEv+0x726>
		{
			writeValueToBytes(lderepc, ((0x35C2 >> 3) & 0xFFFF), LEN_LDE_REPC);
 8002594:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002598:	2202      	movs	r2, #2
 800259a:	f44f 61d7 	mov.w	r1, #1720	; 0x6b8
 800259e:	4618      	mov	r0, r3
 80025a0:	f001 fd7e 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
		if (_dataRate == TRX_RATE_110KBPS)
 80025a4:	e021      	b.n	80025ea <_ZN11DW1000Class4tuneEv+0x76a>
		}
		else
		{
			writeValueToBytes(lderepc, 0x35C2, LEN_LDE_REPC);
 80025a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025aa:	2202      	movs	r2, #2
 80025ac:	f243 51c2 	movw	r1, #13762	; 0x35c2
 80025b0:	4618      	mov	r0, r3
 80025b2:	f001 fd75 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
		if (_dataRate == TRX_RATE_110KBPS)
 80025b6:	e018      	b.n	80025ea <_ZN11DW1000Class4tuneEv+0x76a>
		}
	}
	else if (_preambleCode == PREAMBLE_CODE_64MHZ_20)
 80025b8:	4b5c      	ldr	r3, [pc, #368]	; (800272c <_ZN11DW1000Class4tuneEv+0x8ac>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b14      	cmp	r3, #20
 80025be:	d114      	bne.n	80025ea <_ZN11DW1000Class4tuneEv+0x76a>
	{
		if (_dataRate == TRX_RATE_110KBPS)
 80025c0:	4b5b      	ldr	r3, [pc, #364]	; (8002730 <_ZN11DW1000Class4tuneEv+0x8b0>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d108      	bne.n	80025da <_ZN11DW1000Class4tuneEv+0x75a>
		{
			writeValueToBytes(lderepc, ((0x47AE >> 3) & 0xFFFF), LEN_LDE_REPC);
 80025c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025cc:	2202      	movs	r2, #2
 80025ce:	f640 01f5 	movw	r1, #2293	; 0x8f5
 80025d2:	4618      	mov	r0, r3
 80025d4:	f001 fd64 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 80025d8:	e007      	b.n	80025ea <_ZN11DW1000Class4tuneEv+0x76a>
		}
		else
		{
			writeValueToBytes(lderepc, 0x47AE, LEN_LDE_REPC);
 80025da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025de:	2202      	movs	r2, #2
 80025e0:	f244 71ae 	movw	r1, #18350	; 0x47ae
 80025e4:	4618      	mov	r0, r3
 80025e6:	f001 fd5b 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
	else
	{
		// TODO proper error/warning handling
	}
	// TX_POWER (enabled smart transmit power control)
	if (_channel == CHANNEL_1 || _channel == CHANNEL_2)
 80025ea:	4b52      	ldr	r3, [pc, #328]	; (8002734 <_ZN11DW1000Class4tuneEv+0x8b4>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d003      	beq.n	80025fa <_ZN11DW1000Class4tuneEv+0x77a>
 80025f2:	4b50      	ldr	r3, [pc, #320]	; (8002734 <_ZN11DW1000Class4tuneEv+0x8b4>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d132      	bne.n	8002660 <_ZN11DW1000Class4tuneEv+0x7e0>
	{
		if (_pulseFrequency == TX_PULSE_FREQ_16MHZ)
 80025fa:	4b4f      	ldr	r3, [pc, #316]	; (8002738 <_ZN11DW1000Class4tuneEv+0x8b8>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d114      	bne.n	800262c <_ZN11DW1000Class4tuneEv+0x7ac>
		{
			if (_smartPower)
 8002602:	4b4e      	ldr	r3, [pc, #312]	; (800273c <_ZN11DW1000Class4tuneEv+0x8bc>)
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d007      	beq.n	800261a <_ZN11DW1000Class4tuneEv+0x79a>
			{
				writeValueToBytes(txpower, 0x15355575L, LEN_TX_POWER);
 800260a:	f107 0320 	add.w	r3, r7, #32
 800260e:	2204      	movs	r2, #4
 8002610:	494b      	ldr	r1, [pc, #300]	; (8002740 <_ZN11DW1000Class4tuneEv+0x8c0>)
 8002612:	4618      	mov	r0, r3
 8002614:	f001 fd44 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
		if (_pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8002618:	e113      	b.n	8002842 <_ZN11DW1000Class4tuneEv+0x9c2>
			}
			else
			{
				writeValueToBytes(txpower, 0x75757575L, LEN_TX_POWER);
 800261a:	f107 0320 	add.w	r3, r7, #32
 800261e:	2204      	movs	r2, #4
 8002620:	f04f 3175 	mov.w	r1, #1970632053	; 0x75757575
 8002624:	4618      	mov	r0, r3
 8002626:	f001 fd3b 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
		if (_pulseFrequency == TX_PULSE_FREQ_16MHZ)
 800262a:	e10a      	b.n	8002842 <_ZN11DW1000Class4tuneEv+0x9c2>
			}
		}
		else if (_pulseFrequency == TX_PULSE_FREQ_64MHZ)
 800262c:	4b42      	ldr	r3, [pc, #264]	; (8002738 <_ZN11DW1000Class4tuneEv+0x8b8>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b02      	cmp	r3, #2
 8002632:	f040 8106 	bne.w	8002842 <_ZN11DW1000Class4tuneEv+0x9c2>
		{
			if (_smartPower)
 8002636:	4b41      	ldr	r3, [pc, #260]	; (800273c <_ZN11DW1000Class4tuneEv+0x8bc>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d007      	beq.n	800264e <_ZN11DW1000Class4tuneEv+0x7ce>
			{
				writeValueToBytes(txpower, 0x07274767L, LEN_TX_POWER);
 800263e:	f107 0320 	add.w	r3, r7, #32
 8002642:	2204      	movs	r2, #4
 8002644:	493f      	ldr	r1, [pc, #252]	; (8002744 <_ZN11DW1000Class4tuneEv+0x8c4>)
 8002646:	4618      	mov	r0, r3
 8002648:	f001 fd2a 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
		if (_pulseFrequency == TX_PULSE_FREQ_16MHZ)
 800264c:	e0f9      	b.n	8002842 <_ZN11DW1000Class4tuneEv+0x9c2>
			}
			else
			{
				writeValueToBytes(txpower, 0x67676767L, LEN_TX_POWER);
 800264e:	f107 0320 	add.w	r3, r7, #32
 8002652:	2204      	movs	r2, #4
 8002654:	f04f 3167 	mov.w	r1, #1734829927	; 0x67676767
 8002658:	4618      	mov	r0, r3
 800265a:	f001 fd21 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
		if (_pulseFrequency == TX_PULSE_FREQ_16MHZ)
 800265e:	e0f0      	b.n	8002842 <_ZN11DW1000Class4tuneEv+0x9c2>
		else
		{
			// TODO proper error/warning handling
		}
	}
	else if (_channel == CHANNEL_3)
 8002660:	4b34      	ldr	r3, [pc, #208]	; (8002734 <_ZN11DW1000Class4tuneEv+0x8b4>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	2b03      	cmp	r3, #3
 8002666:	d132      	bne.n	80026ce <_ZN11DW1000Class4tuneEv+0x84e>
	{
		if (_pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8002668:	4b33      	ldr	r3, [pc, #204]	; (8002738 <_ZN11DW1000Class4tuneEv+0x8b8>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d114      	bne.n	800269a <_ZN11DW1000Class4tuneEv+0x81a>
		{
			if (_smartPower)
 8002670:	4b32      	ldr	r3, [pc, #200]	; (800273c <_ZN11DW1000Class4tuneEv+0x8bc>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d007      	beq.n	8002688 <_ZN11DW1000Class4tuneEv+0x808>
			{
				writeValueToBytes(txpower, 0x0F2F4F6FL, LEN_TX_POWER);
 8002678:	f107 0320 	add.w	r3, r7, #32
 800267c:	2204      	movs	r2, #4
 800267e:	4932      	ldr	r1, [pc, #200]	; (8002748 <_ZN11DW1000Class4tuneEv+0x8c8>)
 8002680:	4618      	mov	r0, r3
 8002682:	f001 fd0d 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 8002686:	e0dd      	b.n	8002844 <_ZN11DW1000Class4tuneEv+0x9c4>
			}
			else
			{
				writeValueToBytes(txpower, 0x6F6F6F6FL, LEN_TX_POWER);
 8002688:	f107 0320 	add.w	r3, r7, #32
 800268c:	2204      	movs	r2, #4
 800268e:	f04f 316f 	mov.w	r1, #1869573999	; 0x6f6f6f6f
 8002692:	4618      	mov	r0, r3
 8002694:	f001 fd04 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 8002698:	e0d4      	b.n	8002844 <_ZN11DW1000Class4tuneEv+0x9c4>
			}
		}
		else if (_pulseFrequency == TX_PULSE_FREQ_64MHZ)
 800269a:	4b27      	ldr	r3, [pc, #156]	; (8002738 <_ZN11DW1000Class4tuneEv+0x8b8>)
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	2b02      	cmp	r3, #2
 80026a0:	f040 80d0 	bne.w	8002844 <_ZN11DW1000Class4tuneEv+0x9c4>
		{
			if (_smartPower)
 80026a4:	4b25      	ldr	r3, [pc, #148]	; (800273c <_ZN11DW1000Class4tuneEv+0x8bc>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d007      	beq.n	80026bc <_ZN11DW1000Class4tuneEv+0x83c>
			{
				writeValueToBytes(txpower, 0x2B4B6B8BL, LEN_TX_POWER);
 80026ac:	f107 0320 	add.w	r3, r7, #32
 80026b0:	2204      	movs	r2, #4
 80026b2:	4926      	ldr	r1, [pc, #152]	; (800274c <_ZN11DW1000Class4tuneEv+0x8cc>)
 80026b4:	4618      	mov	r0, r3
 80026b6:	f001 fcf3 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 80026ba:	e0c3      	b.n	8002844 <_ZN11DW1000Class4tuneEv+0x9c4>
			}
			else
			{
				writeValueToBytes(txpower, 0x8B8B8B8BL, LEN_TX_POWER);
 80026bc:	f107 0320 	add.w	r3, r7, #32
 80026c0:	2204      	movs	r2, #4
 80026c2:	f04f 318b 	mov.w	r1, #2341178251	; 0x8b8b8b8b
 80026c6:	4618      	mov	r0, r3
 80026c8:	f001 fcea 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 80026cc:	e0ba      	b.n	8002844 <_ZN11DW1000Class4tuneEv+0x9c4>
		else
		{
			// TODO proper error/warning handling
		}
	}
	else if (_channel == CHANNEL_4)
 80026ce:	4b19      	ldr	r3, [pc, #100]	; (8002734 <_ZN11DW1000Class4tuneEv+0x8b4>)
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	2b04      	cmp	r3, #4
 80026d4:	d149      	bne.n	800276a <_ZN11DW1000Class4tuneEv+0x8ea>
	{
		if (_pulseFrequency == TX_PULSE_FREQ_16MHZ)
 80026d6:	4b18      	ldr	r3, [pc, #96]	; (8002738 <_ZN11DW1000Class4tuneEv+0x8b8>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d114      	bne.n	8002708 <_ZN11DW1000Class4tuneEv+0x888>
		{
			if (_smartPower)
 80026de:	4b17      	ldr	r3, [pc, #92]	; (800273c <_ZN11DW1000Class4tuneEv+0x8bc>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d007      	beq.n	80026f6 <_ZN11DW1000Class4tuneEv+0x876>
			{
				writeValueToBytes(txpower, 0x1F1F3F5FL, LEN_TX_POWER);
 80026e6:	f107 0320 	add.w	r3, r7, #32
 80026ea:	2204      	movs	r2, #4
 80026ec:	4918      	ldr	r1, [pc, #96]	; (8002750 <_ZN11DW1000Class4tuneEv+0x8d0>)
 80026ee:	4618      	mov	r0, r3
 80026f0:	f001 fcd6 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 80026f4:	e0a6      	b.n	8002844 <_ZN11DW1000Class4tuneEv+0x9c4>
			}
			else
			{
				writeValueToBytes(txpower, 0x5F5F5F5FL, LEN_TX_POWER);
 80026f6:	f107 0320 	add.w	r3, r7, #32
 80026fa:	2204      	movs	r2, #4
 80026fc:	f04f 315f 	mov.w	r1, #1600085855	; 0x5f5f5f5f
 8002700:	4618      	mov	r0, r3
 8002702:	f001 fccd 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 8002706:	e09d      	b.n	8002844 <_ZN11DW1000Class4tuneEv+0x9c4>
			}
		}
		else if (_pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8002708:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <_ZN11DW1000Class4tuneEv+0x8b8>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2b02      	cmp	r3, #2
 800270e:	f040 8099 	bne.w	8002844 <_ZN11DW1000Class4tuneEv+0x9c4>
		{
			if (_smartPower)
 8002712:	4b0a      	ldr	r3, [pc, #40]	; (800273c <_ZN11DW1000Class4tuneEv+0x8bc>)
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d01e      	beq.n	8002758 <_ZN11DW1000Class4tuneEv+0x8d8>
			{
				writeValueToBytes(txpower, 0x3A5A7A9AL, LEN_TX_POWER);
 800271a:	f107 0320 	add.w	r3, r7, #32
 800271e:	2204      	movs	r2, #4
 8002720:	490c      	ldr	r1, [pc, #48]	; (8002754 <_ZN11DW1000Class4tuneEv+0x8d4>)
 8002722:	4618      	mov	r0, r3
 8002724:	f001 fcbc 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 8002728:	e08c      	b.n	8002844 <_ZN11DW1000Class4tuneEv+0x9c4>
 800272a:	bf00      	nop
 800272c:	20000008 	.word	0x20000008
 8002730:	20000006 	.word	0x20000006
 8002734:	20000009 	.word	0x20000009
 8002738:	20000005 	.word	0x20000005
 800273c:	200002b9 	.word	0x200002b9
 8002740:	15355575 	.word	0x15355575
 8002744:	07274767 	.word	0x07274767
 8002748:	0f2f4f6f 	.word	0x0f2f4f6f
 800274c:	2b4b6b8b 	.word	0x2b4b6b8b
 8002750:	1f1f3f5f 	.word	0x1f1f3f5f
 8002754:	3a5a7a9a 	.word	0x3a5a7a9a
			}
			else
			{
				writeValueToBytes(txpower, 0x9A9A9A9AL, LEN_TX_POWER);
 8002758:	f107 0320 	add.w	r3, r7, #32
 800275c:	2204      	movs	r2, #4
 800275e:	f04f 319a 	mov.w	r1, #2593823386	; 0x9a9a9a9a
 8002762:	4618      	mov	r0, r3
 8002764:	f001 fc9c 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 8002768:	e06c      	b.n	8002844 <_ZN11DW1000Class4tuneEv+0x9c4>
		else
		{
			// TODO proper error/warning handling
		}
	}
	else if (_channel == CHANNEL_5)
 800276a:	4b88      	ldr	r3, [pc, #544]	; (800298c <_ZN11DW1000Class4tuneEv+0xb0c>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	2b05      	cmp	r3, #5
 8002770:	d131      	bne.n	80027d6 <_ZN11DW1000Class4tuneEv+0x956>
	{
		if (_pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8002772:	4b87      	ldr	r3, [pc, #540]	; (8002990 <_ZN11DW1000Class4tuneEv+0xb10>)
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d114      	bne.n	80027a4 <_ZN11DW1000Class4tuneEv+0x924>
		{
			if (_smartPower)
 800277a:	4b86      	ldr	r3, [pc, #536]	; (8002994 <_ZN11DW1000Class4tuneEv+0xb14>)
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d007      	beq.n	8002792 <_ZN11DW1000Class4tuneEv+0x912>
			{
				writeValueToBytes(txpower, 0x0E082848L, LEN_TX_POWER);
 8002782:	f107 0320 	add.w	r3, r7, #32
 8002786:	2204      	movs	r2, #4
 8002788:	4983      	ldr	r1, [pc, #524]	; (8002998 <_ZN11DW1000Class4tuneEv+0xb18>)
 800278a:	4618      	mov	r0, r3
 800278c:	f001 fc88 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 8002790:	e058      	b.n	8002844 <_ZN11DW1000Class4tuneEv+0x9c4>
			}
			else
			{
				writeValueToBytes(txpower, 0x48484848L, LEN_TX_POWER);
 8002792:	f107 0320 	add.w	r3, r7, #32
 8002796:	2204      	movs	r2, #4
 8002798:	f04f 3148 	mov.w	r1, #1212696648	; 0x48484848
 800279c:	4618      	mov	r0, r3
 800279e:	f001 fc7f 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 80027a2:	e04f      	b.n	8002844 <_ZN11DW1000Class4tuneEv+0x9c4>
			}
		}
		else if (_pulseFrequency == TX_PULSE_FREQ_64MHZ)
 80027a4:	4b7a      	ldr	r3, [pc, #488]	; (8002990 <_ZN11DW1000Class4tuneEv+0xb10>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d14b      	bne.n	8002844 <_ZN11DW1000Class4tuneEv+0x9c4>
		{
			if (_smartPower)
 80027ac:	4b79      	ldr	r3, [pc, #484]	; (8002994 <_ZN11DW1000Class4tuneEv+0xb14>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d007      	beq.n	80027c4 <_ZN11DW1000Class4tuneEv+0x944>
			{
				writeValueToBytes(txpower, 0x25456585L, LEN_TX_POWER);
 80027b4:	f107 0320 	add.w	r3, r7, #32
 80027b8:	2204      	movs	r2, #4
 80027ba:	4978      	ldr	r1, [pc, #480]	; (800299c <_ZN11DW1000Class4tuneEv+0xb1c>)
 80027bc:	4618      	mov	r0, r3
 80027be:	f001 fc6f 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 80027c2:	e03f      	b.n	8002844 <_ZN11DW1000Class4tuneEv+0x9c4>
			}
			else
			{
				writeValueToBytes(txpower, 0x85858585L, LEN_TX_POWER);
 80027c4:	f107 0320 	add.w	r3, r7, #32
 80027c8:	2204      	movs	r2, #4
 80027ca:	f04f 3185 	mov.w	r1, #2240120197	; 0x85858585
 80027ce:	4618      	mov	r0, r3
 80027d0:	f001 fc66 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 80027d4:	e036      	b.n	8002844 <_ZN11DW1000Class4tuneEv+0x9c4>
		else
		{
			// TODO proper error/warning handling
		}
	}
	else if (_channel == CHANNEL_7)
 80027d6:	4b6d      	ldr	r3, [pc, #436]	; (800298c <_ZN11DW1000Class4tuneEv+0xb0c>)
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	2b07      	cmp	r3, #7
 80027dc:	d132      	bne.n	8002844 <_ZN11DW1000Class4tuneEv+0x9c4>
	{
		if (_pulseFrequency == TX_PULSE_FREQ_16MHZ)
 80027de:	4b6c      	ldr	r3, [pc, #432]	; (8002990 <_ZN11DW1000Class4tuneEv+0xb10>)
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d114      	bne.n	8002810 <_ZN11DW1000Class4tuneEv+0x990>
		{
			if (_smartPower)
 80027e6:	4b6b      	ldr	r3, [pc, #428]	; (8002994 <_ZN11DW1000Class4tuneEv+0xb14>)
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d007      	beq.n	80027fe <_ZN11DW1000Class4tuneEv+0x97e>
			{
				writeValueToBytes(txpower, 0x32527292L, LEN_TX_POWER);
 80027ee:	f107 0320 	add.w	r3, r7, #32
 80027f2:	2204      	movs	r2, #4
 80027f4:	496a      	ldr	r1, [pc, #424]	; (80029a0 <_ZN11DW1000Class4tuneEv+0xb20>)
 80027f6:	4618      	mov	r0, r3
 80027f8:	f001 fc52 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 80027fc:	e022      	b.n	8002844 <_ZN11DW1000Class4tuneEv+0x9c4>
			}
			else
			{
				writeValueToBytes(txpower, 0x92929292L, LEN_TX_POWER);
 80027fe:	f107 0320 	add.w	r3, r7, #32
 8002802:	2204      	movs	r2, #4
 8002804:	f04f 3192 	mov.w	r1, #2459079314	; 0x92929292
 8002808:	4618      	mov	r0, r3
 800280a:	f001 fc49 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 800280e:	e019      	b.n	8002844 <_ZN11DW1000Class4tuneEv+0x9c4>
			}
		}
		else if (_pulseFrequency == TX_PULSE_FREQ_64MHZ)
 8002810:	4b5f      	ldr	r3, [pc, #380]	; (8002990 <_ZN11DW1000Class4tuneEv+0xb10>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	2b02      	cmp	r3, #2
 8002816:	d115      	bne.n	8002844 <_ZN11DW1000Class4tuneEv+0x9c4>
		{
			if (_smartPower)
 8002818:	4b5e      	ldr	r3, [pc, #376]	; (8002994 <_ZN11DW1000Class4tuneEv+0xb14>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d007      	beq.n	8002830 <_ZN11DW1000Class4tuneEv+0x9b0>
			{
				writeValueToBytes(txpower, 0x5171B1D1L, LEN_TX_POWER);
 8002820:	f107 0320 	add.w	r3, r7, #32
 8002824:	2204      	movs	r2, #4
 8002826:	495f      	ldr	r1, [pc, #380]	; (80029a4 <_ZN11DW1000Class4tuneEv+0xb24>)
 8002828:	4618      	mov	r0, r3
 800282a:	f001 fc39 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 800282e:	e009      	b.n	8002844 <_ZN11DW1000Class4tuneEv+0x9c4>
			}
			else
			{
				writeValueToBytes(txpower, 0xD1D1D1D1L, LEN_TX_POWER);
 8002830:	f107 0320 	add.w	r3, r7, #32
 8002834:	2204      	movs	r2, #4
 8002836:	f04f 31d1 	mov.w	r1, #3520188881	; 0xd1d1d1d1
 800283a:	4618      	mov	r0, r3
 800283c:	f001 fc30 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 8002840:	e000      	b.n	8002844 <_ZN11DW1000Class4tuneEv+0x9c4>
		if (_pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8002842:	bf00      	nop
	{
		// TODO proper error/warning handling
	}
	// Crystal calibration from OTP (if available)
	byte buf_otp[4];
	readBytesOTP(0x01E, buf_otp);
 8002844:	1d3b      	adds	r3, r7, #4
 8002846:	4619      	mov	r1, r3
 8002848:	201e      	movs	r0, #30
 800284a:	f001 fc67 	bl	800411c <_ZN11DW1000Class12readBytesOTPEtPh>
	if (buf_otp[0] == 0)
 800284e:	793b      	ldrb	r3, [r7, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d107      	bne.n	8002864 <_ZN11DW1000Class4tuneEv+0x9e4>
	{
		// No trim value available from OTP, use midrange value of 0x10
		writeValueToBytes(fsxtalt, ((0x10 & 0x1F) | 0x60), LEN_FS_XTALT);
 8002854:	f107 0308 	add.w	r3, r7, #8
 8002858:	2201      	movs	r2, #1
 800285a:	2170      	movs	r1, #112	; 0x70
 800285c:	4618      	mov	r0, r3
 800285e:	f001 fc1f 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
 8002862:	e00d      	b.n	8002880 <_ZN11DW1000Class4tuneEv+0xa00>
	}
	else
	{
		writeValueToBytes(fsxtalt, ((buf_otp[0] & 0x1F) | 0x60), LEN_FS_XTALT);
 8002864:	793b      	ldrb	r3, [r7, #4]
 8002866:	f003 031f 	and.w	r3, r3, #31
 800286a:	b2db      	uxtb	r3, r3
 800286c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002870:	b2db      	uxtb	r3, r3
 8002872:	4619      	mov	r1, r3
 8002874:	f107 0308 	add.w	r3, r7, #8
 8002878:	2201      	movs	r2, #1
 800287a:	4618      	mov	r0, r3
 800287c:	f001 fc10 	bl	80040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>
	}
	// write configuration back to chip
	writeBytes(AGC_TUNE, AGC_TUNE1_SUB, agctune1, LEN_AGC_TUNE1);
 8002880:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002884:	2302      	movs	r3, #2
 8002886:	2104      	movs	r1, #4
 8002888:	2023      	movs	r0, #35	; 0x23
 800288a:	f001 fc88 	bl	800419e <_ZN11DW1000Class10writeBytesEhtPht>
	writeBytes(AGC_TUNE, AGC_TUNE2_SUB, agctune2, LEN_AGC_TUNE2);
 800288e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002892:	2304      	movs	r3, #4
 8002894:	210c      	movs	r1, #12
 8002896:	2023      	movs	r0, #35	; 0x23
 8002898:	f001 fc81 	bl	800419e <_ZN11DW1000Class10writeBytesEhtPht>
	writeBytes(AGC_TUNE, AGC_TUNE3_SUB, agctune3, LEN_AGC_TUNE3);
 800289c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80028a0:	2302      	movs	r3, #2
 80028a2:	2112      	movs	r1, #18
 80028a4:	2023      	movs	r0, #35	; 0x23
 80028a6:	f001 fc7a 	bl	800419e <_ZN11DW1000Class10writeBytesEhtPht>
	writeBytes(DRX_TUNE, DRX_TUNE0b_SUB, drxtune0b, LEN_DRX_TUNE0b);
 80028aa:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80028ae:	2302      	movs	r3, #2
 80028b0:	2102      	movs	r1, #2
 80028b2:	2027      	movs	r0, #39	; 0x27
 80028b4:	f001 fc73 	bl	800419e <_ZN11DW1000Class10writeBytesEhtPht>
	writeBytes(DRX_TUNE, DRX_TUNE1a_SUB, drxtune1a, LEN_DRX_TUNE1a);
 80028b8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80028bc:	2302      	movs	r3, #2
 80028be:	2104      	movs	r1, #4
 80028c0:	2027      	movs	r0, #39	; 0x27
 80028c2:	f001 fc6c 	bl	800419e <_ZN11DW1000Class10writeBytesEhtPht>
	writeBytes(DRX_TUNE, DRX_TUNE1b_SUB, drxtune1b, LEN_DRX_TUNE1b);
 80028c6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80028ca:	2302      	movs	r3, #2
 80028cc:	2106      	movs	r1, #6
 80028ce:	2027      	movs	r0, #39	; 0x27
 80028d0:	f001 fc65 	bl	800419e <_ZN11DW1000Class10writeBytesEhtPht>
	writeBytes(DRX_TUNE, DRX_TUNE2_SUB, drxtune2, LEN_DRX_TUNE2);
 80028d4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80028d8:	2304      	movs	r3, #4
 80028da:	2108      	movs	r1, #8
 80028dc:	2027      	movs	r0, #39	; 0x27
 80028de:	f001 fc5e 	bl	800419e <_ZN11DW1000Class10writeBytesEhtPht>
	writeBytes(DRX_TUNE, DRX_TUNE4H_SUB, drxtune4H, LEN_DRX_TUNE4H);
 80028e2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80028e6:	2302      	movs	r3, #2
 80028e8:	2126      	movs	r1, #38	; 0x26
 80028ea:	2027      	movs	r0, #39	; 0x27
 80028ec:	f001 fc57 	bl	800419e <_ZN11DW1000Class10writeBytesEhtPht>
	writeBytes(LDE_IF, LDE_CFG1_SUB, ldecfg1, LEN_LDE_CFG1);
 80028f0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80028f4:	2301      	movs	r3, #1
 80028f6:	f640 0106 	movw	r1, #2054	; 0x806
 80028fa:	202e      	movs	r0, #46	; 0x2e
 80028fc:	f001 fc4f 	bl	800419e <_ZN11DW1000Class10writeBytesEhtPht>
	writeBytes(LDE_IF, LDE_CFG2_SUB, ldecfg2, LEN_LDE_CFG2);
 8002900:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002904:	2302      	movs	r3, #2
 8002906:	f641 0106 	movw	r1, #6150	; 0x1806
 800290a:	202e      	movs	r0, #46	; 0x2e
 800290c:	f001 fc47 	bl	800419e <_ZN11DW1000Class10writeBytesEhtPht>
	writeBytes(LDE_IF, LDE_REPC_SUB, lderepc, LEN_LDE_REPC);
 8002910:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002914:	2302      	movs	r3, #2
 8002916:	f642 0104 	movw	r1, #10244	; 0x2804
 800291a:	202e      	movs	r0, #46	; 0x2e
 800291c:	f001 fc3f 	bl	800419e <_ZN11DW1000Class10writeBytesEhtPht>
	writeBytes(TX_POWER, NO_SUB, txpower, LEN_TX_POWER);
 8002920:	f107 0220 	add.w	r2, r7, #32
 8002924:	2304      	movs	r3, #4
 8002926:	2100      	movs	r1, #0
 8002928:	201e      	movs	r0, #30
 800292a:	f001 fc38 	bl	800419e <_ZN11DW1000Class10writeBytesEhtPht>
	writeBytes(RF_CONF, RF_RXCTRLH_SUB, rfrxctrlh, LEN_RF_RXCTRLH);
 800292e:	f107 021c 	add.w	r2, r7, #28
 8002932:	2301      	movs	r3, #1
 8002934:	210b      	movs	r1, #11
 8002936:	2028      	movs	r0, #40	; 0x28
 8002938:	f001 fc31 	bl	800419e <_ZN11DW1000Class10writeBytesEhtPht>
	writeBytes(RF_CONF, RF_TXCTRL_SUB, rftxctrl, LEN_RF_TXCTRL);
 800293c:	f107 0218 	add.w	r2, r7, #24
 8002940:	2304      	movs	r3, #4
 8002942:	210c      	movs	r1, #12
 8002944:	2028      	movs	r0, #40	; 0x28
 8002946:	f001 fc2a 	bl	800419e <_ZN11DW1000Class10writeBytesEhtPht>
	writeBytes(TX_CAL, TC_PGDELAY_SUB, tcpgdelay, LEN_TC_PGDELAY);
 800294a:	f107 0214 	add.w	r2, r7, #20
 800294e:	2301      	movs	r3, #1
 8002950:	210b      	movs	r1, #11
 8002952:	202a      	movs	r0, #42	; 0x2a
 8002954:	f001 fc23 	bl	800419e <_ZN11DW1000Class10writeBytesEhtPht>
	writeBytes(FS_CTRL, FS_PLLTUNE_SUB, fsplltune, LEN_FS_PLLTUNE);
 8002958:	f107 020c 	add.w	r2, r7, #12
 800295c:	2301      	movs	r3, #1
 800295e:	210b      	movs	r1, #11
 8002960:	202b      	movs	r0, #43	; 0x2b
 8002962:	f001 fc1c 	bl	800419e <_ZN11DW1000Class10writeBytesEhtPht>
	writeBytes(FS_CTRL, FS_PLLCFG_SUB, fspllcfg, LEN_FS_PLLCFG);
 8002966:	f107 0210 	add.w	r2, r7, #16
 800296a:	2304      	movs	r3, #4
 800296c:	2107      	movs	r1, #7
 800296e:	202b      	movs	r0, #43	; 0x2b
 8002970:	f001 fc15 	bl	800419e <_ZN11DW1000Class10writeBytesEhtPht>
	writeBytes(FS_CTRL, FS_XTALT_SUB, fsxtalt, LEN_FS_XTALT);
 8002974:	f107 0208 	add.w	r2, r7, #8
 8002978:	2301      	movs	r3, #1
 800297a:	210e      	movs	r1, #14
 800297c:	202b      	movs	r0, #43	; 0x2b
 800297e:	f001 fc0e 	bl	800419e <_ZN11DW1000Class10writeBytesEhtPht>
}
 8002982:	bf00      	nop
 8002984:	3750      	adds	r7, #80	; 0x50
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	20000009 	.word	0x20000009
 8002990:	20000005 	.word	0x20000005
 8002994:	200002b9 	.word	0x200002b9
 8002998:	0e082848 	.word	0x0e082848
 800299c:	25456585 	.word	0x25456585
 80029a0:	32527292 	.word	0x32527292
 80029a4:	5171b1d1 	.word	0x5171b1d1

080029a8 <_ZN11DW1000Class15handleInterruptEv>:
/* ###########################################################################
 * #### Interrupt handling ###################################################
 * ######################################################################### */

void DW1000Class::handleInterrupt()
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
	// read current status and handle via callbacks
	readSystemEventStatusRegister();
 80029ac:	f000 f8b4 	bl	8002b18 <_ZN11DW1000Class29readSystemEventStatusRegisterEv>
	if (isClockProblem() /* TODO and others */ && _handleError != 0)
 80029b0:	f001 f8bc 	bl	8003b2c <_ZN11DW1000Class14isClockProblemEv>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d005      	beq.n	80029c6 <_ZN11DW1000Class15handleInterruptEv+0x1e>
 80029ba:	4b44      	ldr	r3, [pc, #272]	; (8002acc <_ZN11DW1000Class15handleInterruptEv+0x124>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <_ZN11DW1000Class15handleInterruptEv+0x1e>
 80029c2:	2301      	movs	r3, #1
 80029c4:	e000      	b.n	80029c8 <_ZN11DW1000Class15handleInterruptEv+0x20>
 80029c6:	2300      	movs	r3, #0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d002      	beq.n	80029d2 <_ZN11DW1000Class15handleInterruptEv+0x2a>
	{
		(*_handleError)();
 80029cc:	4b3f      	ldr	r3, [pc, #252]	; (8002acc <_ZN11DW1000Class15handleInterruptEv+0x124>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4798      	blx	r3
	}
	if (isTransmitDone() && _handleSent != 0)
 80029d2:	f001 f823 	bl	8003a1c <_ZN11DW1000Class14isTransmitDoneEv>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d005      	beq.n	80029e8 <_ZN11DW1000Class15handleInterruptEv+0x40>
 80029dc:	4b3c      	ldr	r3, [pc, #240]	; (8002ad0 <_ZN11DW1000Class15handleInterruptEv+0x128>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <_ZN11DW1000Class15handleInterruptEv+0x40>
 80029e4:	2301      	movs	r3, #1
 80029e6:	e000      	b.n	80029ea <_ZN11DW1000Class15handleInterruptEv+0x42>
 80029e8:	2300      	movs	r3, #0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d004      	beq.n	80029f8 <_ZN11DW1000Class15handleInterruptEv+0x50>
	{
		(*_handleSent)();
 80029ee:	4b38      	ldr	r3, [pc, #224]	; (8002ad0 <_ZN11DW1000Class15handleInterruptEv+0x128>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4798      	blx	r3
		clearTransmitStatus();
 80029f4:	f001 f914 	bl	8003c20 <_ZN11DW1000Class19clearTransmitStatusEv>
	}
	if (isReceiveTimestampAvailable() && _handleReceiveTimestampAvailable != 0)
 80029f8:	f001 f81c 	bl	8003a34 <_ZN11DW1000Class27isReceiveTimestampAvailableEv>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d005      	beq.n	8002a0e <_ZN11DW1000Class15handleInterruptEv+0x66>
 8002a02:	4b34      	ldr	r3, [pc, #208]	; (8002ad4 <_ZN11DW1000Class15handleInterruptEv+0x12c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <_ZN11DW1000Class15handleInterruptEv+0x66>
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e000      	b.n	8002a10 <_ZN11DW1000Class15handleInterruptEv+0x68>
 8002a0e:	2300      	movs	r3, #0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d004      	beq.n	8002a1e <_ZN11DW1000Class15handleInterruptEv+0x76>
	{
		(*_handleReceiveTimestampAvailable)();
 8002a14:	4b2f      	ldr	r3, [pc, #188]	; (8002ad4 <_ZN11DW1000Class15handleInterruptEv+0x12c>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4798      	blx	r3
		clearReceiveTimestampAvailableStatus();
 8002a1a:	f001 f8b9 	bl	8003b90 <_ZN11DW1000Class36clearReceiveTimestampAvailableStatusEv>
	}
	if (isReceiveFailed() && _handleReceiveFailed != 0)
 8002a1e:	f001 f82f 	bl	8003a80 <_ZN11DW1000Class15isReceiveFailedEv>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d005      	beq.n	8002a34 <_ZN11DW1000Class15handleInterruptEv+0x8c>
 8002a28:	4b2b      	ldr	r3, [pc, #172]	; (8002ad8 <_ZN11DW1000Class15handleInterruptEv+0x130>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <_ZN11DW1000Class15handleInterruptEv+0x8c>
 8002a30:	2301      	movs	r3, #1
 8002a32:	e000      	b.n	8002a36 <_ZN11DW1000Class15handleInterruptEv+0x8e>
 8002a34:	2300      	movs	r3, #0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00d      	beq.n	8002a56 <_ZN11DW1000Class15handleInterruptEv+0xae>
	{
		(*_handleReceiveFailed)();
 8002a3a:	4b27      	ldr	r3, [pc, #156]	; (8002ad8 <_ZN11DW1000Class15handleInterruptEv+0x130>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4798      	blx	r3
		clearReceiveStatus();
 8002a40:	f001 f8b8 	bl	8003bb4 <_ZN11DW1000Class18clearReceiveStatusEv>
		if (_permanentReceive)
 8002a44:	4b25      	ldr	r3, [pc, #148]	; (8002adc <_ZN11DW1000Class15handleInterruptEv+0x134>)
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d03b      	beq.n	8002ac4 <_ZN11DW1000Class15handleInterruptEv+0x11c>
		{
			newReceive();
 8002a4c:	f000 fa5a 	bl	8002f04 <_ZN11DW1000Class10newReceiveEv>
			startReceive();
 8002a50:	f000 fa6c 	bl	8002f2c <_ZN11DW1000Class12startReceiveEv>
 8002a54:	e036      	b.n	8002ac4 <_ZN11DW1000Class15handleInterruptEv+0x11c>
		}
	}
	else if (isReceiveTimeout() && _handleReceiveTimeout != 0)
 8002a56:	f001 f847 	bl	8003ae8 <_ZN11DW1000Class16isReceiveTimeoutEv>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d005      	beq.n	8002a6c <_ZN11DW1000Class15handleInterruptEv+0xc4>
 8002a60:	4b1f      	ldr	r3, [pc, #124]	; (8002ae0 <_ZN11DW1000Class15handleInterruptEv+0x138>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <_ZN11DW1000Class15handleInterruptEv+0xc4>
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e000      	b.n	8002a6e <_ZN11DW1000Class15handleInterruptEv+0xc6>
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00d      	beq.n	8002a8e <_ZN11DW1000Class15handleInterruptEv+0xe6>
	{
		(*_handleReceiveTimeout)();
 8002a72:	4b1b      	ldr	r3, [pc, #108]	; (8002ae0 <_ZN11DW1000Class15handleInterruptEv+0x138>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4798      	blx	r3
		clearReceiveStatus();
 8002a78:	f001 f89c 	bl	8003bb4 <_ZN11DW1000Class18clearReceiveStatusEv>
		if (_permanentReceive)
 8002a7c:	4b17      	ldr	r3, [pc, #92]	; (8002adc <_ZN11DW1000Class15handleInterruptEv+0x134>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d01f      	beq.n	8002ac4 <_ZN11DW1000Class15handleInterruptEv+0x11c>
		{
			newReceive();
 8002a84:	f000 fa3e 	bl	8002f04 <_ZN11DW1000Class10newReceiveEv>
			startReceive();
 8002a88:	f000 fa50 	bl	8002f2c <_ZN11DW1000Class12startReceiveEv>
 8002a8c:	e01a      	b.n	8002ac4 <_ZN11DW1000Class15handleInterruptEv+0x11c>
		}
	}
	else if (isReceiveDone() && _handleReceived != 0)
 8002a8e:	f000 ffdd 	bl	8003a4c <_ZN11DW1000Class13isReceiveDoneEv>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d005      	beq.n	8002aa4 <_ZN11DW1000Class15handleInterruptEv+0xfc>
 8002a98:	4b12      	ldr	r3, [pc, #72]	; (8002ae4 <_ZN11DW1000Class15handleInterruptEv+0x13c>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <_ZN11DW1000Class15handleInterruptEv+0xfc>
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e000      	b.n	8002aa6 <_ZN11DW1000Class15handleInterruptEv+0xfe>
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00c      	beq.n	8002ac4 <_ZN11DW1000Class15handleInterruptEv+0x11c>
	{
		(*_handleReceived)();
 8002aaa:	4b0e      	ldr	r3, [pc, #56]	; (8002ae4 <_ZN11DW1000Class15handleInterruptEv+0x13c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4798      	blx	r3
		clearReceiveStatus();
 8002ab0:	f001 f880 	bl	8003bb4 <_ZN11DW1000Class18clearReceiveStatusEv>
		if (_permanentReceive)
 8002ab4:	4b09      	ldr	r3, [pc, #36]	; (8002adc <_ZN11DW1000Class15handleInterruptEv+0x134>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d003      	beq.n	8002ac4 <_ZN11DW1000Class15handleInterruptEv+0x11c>
		{
			newReceive();
 8002abc:	f000 fa22 	bl	8002f04 <_ZN11DW1000Class10newReceiveEv>
			startReceive();
 8002ac0:	f000 fa34 	bl	8002f2c <_ZN11DW1000Class12startReceiveEv>
		}
	}
	// clear all status that is left unhandled
	clearAllStatus();
 8002ac4:	f001 f852 	bl	8003b6c <_ZN11DW1000Class14clearAllStatusEv>
}
 8002ac8:	bf00      	nop
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	20000270 	.word	0x20000270
 8002ad0:	2000026c 	.word	0x2000026c
 8002ad4:	20000280 	.word	0x20000280
 8002ad8:	20000278 	.word	0x20000278
 8002adc:	200002ba 	.word	0x200002ba
 8002ae0:	2000027c 	.word	0x2000027c
 8002ae4:	20000274 	.word	0x20000274

08002ae8 <_ZN11DW1000Class31readSystemConfigurationRegisterEv>:
/* ###########################################################################
 * #### DW1000 register read/write ###########################################
 * ######################################################################### */

void DW1000Class::readSystemConfigurationRegister()
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
	readBytes(SYS_CFG, NO_SUB, _syscfg, LEN_SYS_CFG);
 8002aec:	2304      	movs	r3, #4
 8002aee:	4a03      	ldr	r2, [pc, #12]	; (8002afc <_ZN11DW1000Class31readSystemConfigurationRegisterEv+0x14>)
 8002af0:	2100      	movs	r1, #0
 8002af2:	2004      	movs	r0, #4
 8002af4:	f001 faf5 	bl	80040e2 <_ZN11DW1000Class9readBytesEhtPht>
}
 8002af8:	bf00      	nop
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	20000284 	.word	0x20000284

08002b00 <_ZN11DW1000Class32writeSystemConfigurationRegisterEv>:

void DW1000Class::writeSystemConfigurationRegister()
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
	writeBytes(SYS_CFG, NO_SUB, _syscfg, LEN_SYS_CFG);
 8002b04:	2304      	movs	r3, #4
 8002b06:	4a03      	ldr	r2, [pc, #12]	; (8002b14 <_ZN11DW1000Class32writeSystemConfigurationRegisterEv+0x14>)
 8002b08:	2100      	movs	r1, #0
 8002b0a:	2004      	movs	r0, #4
 8002b0c:	f001 fb47 	bl	800419e <_ZN11DW1000Class10writeBytesEhtPht>
}
 8002b10:	bf00      	nop
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	20000284 	.word	0x20000284

08002b18 <_ZN11DW1000Class29readSystemEventStatusRegisterEv>:

void DW1000Class::readSystemEventStatusRegister()
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
	readBytes(SYS_STATUS, NO_SUB, _sysstatus, LEN_SYS_STATUS);
 8002b1c:	2305      	movs	r3, #5
 8002b1e:	4a03      	ldr	r2, [pc, #12]	; (8002b2c <_ZN11DW1000Class29readSystemEventStatusRegisterEv+0x14>)
 8002b20:	2100      	movs	r1, #0
 8002b22:	200f      	movs	r0, #15
 8002b24:	f001 fadd 	bl	80040e2 <_ZN11DW1000Class9readBytesEhtPht>
}
 8002b28:	bf00      	nop
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	2000028c 	.word	0x2000028c

08002b30 <_ZN11DW1000Class29readNetworkIdAndDeviceAddressEv>:

void DW1000Class::readNetworkIdAndDeviceAddress()
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
	readBytes(PANADR, NO_SUB, _networkAndAddress, LEN_PANADR);
 8002b34:	2304      	movs	r3, #4
 8002b36:	4a03      	ldr	r2, [pc, #12]	; (8002b44 <_ZN11DW1000Class29readNetworkIdAndDeviceAddressEv+0x14>)
 8002b38:	2100      	movs	r1, #0
 8002b3a:	2003      	movs	r0, #3
 8002b3c:	f001 fad1 	bl	80040e2 <_ZN11DW1000Class9readBytesEhtPht>
}
 8002b40:	bf00      	nop
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	200002a4 	.word	0x200002a4

08002b48 <_ZN11DW1000Class30writeNetworkIdAndDeviceAddressEv>:

void DW1000Class::writeNetworkIdAndDeviceAddress()
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
	writeBytes(PANADR, NO_SUB, _networkAndAddress, LEN_PANADR);
 8002b4c:	2304      	movs	r3, #4
 8002b4e:	4a03      	ldr	r2, [pc, #12]	; (8002b5c <_ZN11DW1000Class30writeNetworkIdAndDeviceAddressEv+0x14>)
 8002b50:	2100      	movs	r1, #0
 8002b52:	2003      	movs	r0, #3
 8002b54:	f001 fb23 	bl	800419e <_ZN11DW1000Class10writeBytesEhtPht>
}
 8002b58:	bf00      	nop
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	200002a4 	.word	0x200002a4

08002b60 <_ZN11DW1000Class27readSystemEventMaskRegisterEv>:

void DW1000Class::readSystemEventMaskRegister()
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
	readBytes(SYS_MASK, NO_SUB, _sysmask, LEN_SYS_MASK);
 8002b64:	2304      	movs	r3, #4
 8002b66:	4a03      	ldr	r2, [pc, #12]	; (8002b74 <_ZN11DW1000Class27readSystemEventMaskRegisterEv+0x14>)
 8002b68:	2100      	movs	r1, #0
 8002b6a:	200e      	movs	r0, #14
 8002b6c:	f001 fab9 	bl	80040e2 <_ZN11DW1000Class9readBytesEhtPht>
}
 8002b70:	bf00      	nop
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	2000029c 	.word	0x2000029c

08002b78 <_ZN11DW1000Class28writeSystemEventMaskRegisterEv>:

void DW1000Class::writeSystemEventMaskRegister()
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
	writeBytes(SYS_MASK, NO_SUB, _sysmask, LEN_SYS_MASK);
 8002b7c:	2304      	movs	r3, #4
 8002b7e:	4a03      	ldr	r2, [pc, #12]	; (8002b8c <_ZN11DW1000Class28writeSystemEventMaskRegisterEv+0x14>)
 8002b80:	2100      	movs	r1, #0
 8002b82:	200e      	movs	r0, #14
 8002b84:	f001 fb0b 	bl	800419e <_ZN11DW1000Class10writeBytesEhtPht>
}
 8002b88:	bf00      	nop
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	2000029c 	.word	0x2000029c

08002b90 <_ZN11DW1000Class26readChannelControlRegisterEv>:

void DW1000Class::readChannelControlRegister()
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
	readBytes(CHAN_CTRL, NO_SUB, _chanctrl, LEN_CHAN_CTRL);
 8002b94:	2304      	movs	r3, #4
 8002b96:	4a03      	ldr	r2, [pc, #12]	; (8002ba4 <_ZN11DW1000Class26readChannelControlRegisterEv+0x14>)
 8002b98:	2100      	movs	r1, #0
 8002b9a:	201f      	movs	r0, #31
 8002b9c:	f001 faa1 	bl	80040e2 <_ZN11DW1000Class9readBytesEhtPht>
}
 8002ba0:	bf00      	nop
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	200002a0 	.word	0x200002a0

08002ba8 <_ZN11DW1000Class27writeChannelControlRegisterEv>:

void DW1000Class::writeChannelControlRegister()
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
	writeBytes(CHAN_CTRL, NO_SUB, _chanctrl, LEN_CHAN_CTRL);
 8002bac:	2304      	movs	r3, #4
 8002bae:	4a03      	ldr	r2, [pc, #12]	; (8002bbc <_ZN11DW1000Class27writeChannelControlRegisterEv+0x14>)
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	201f      	movs	r0, #31
 8002bb4:	f001 faf3 	bl	800419e <_ZN11DW1000Class10writeBytesEhtPht>
}
 8002bb8:	bf00      	nop
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	200002a0 	.word	0x200002a0

08002bc0 <_ZN11DW1000Class32readTransmitFrameControlRegisterEv>:

void DW1000Class::readTransmitFrameControlRegister()
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
	readBytes(TX_FCTRL, NO_SUB, _txfctrl, LEN_TX_FCTRL);
 8002bc4:	2305      	movs	r3, #5
 8002bc6:	4a03      	ldr	r2, [pc, #12]	; (8002bd4 <_ZN11DW1000Class32readTransmitFrameControlRegisterEv+0x14>)
 8002bc8:	2100      	movs	r1, #0
 8002bca:	2008      	movs	r0, #8
 8002bcc:	f001 fa89 	bl	80040e2 <_ZN11DW1000Class9readBytesEhtPht>
}
 8002bd0:	bf00      	nop
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	20000294 	.word	0x20000294

08002bd8 <_ZN11DW1000Class33writeTransmitFrameControlRegisterEv>:

void DW1000Class::writeTransmitFrameControlRegister()
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
	writeBytes(TX_FCTRL, NO_SUB, _txfctrl, LEN_TX_FCTRL);
 8002bdc:	2305      	movs	r3, #5
 8002bde:	4a03      	ldr	r2, [pc, #12]	; (8002bec <_ZN11DW1000Class33writeTransmitFrameControlRegisterEv+0x14>)
 8002be0:	2100      	movs	r1, #0
 8002be2:	2008      	movs	r0, #8
 8002be4:	f001 fadb 	bl	800419e <_ZN11DW1000Class10writeBytesEhtPht>
}
 8002be8:	bf00      	nop
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	20000294 	.word	0x20000294

08002bf0 <_ZN11DW1000Class12setNetworkIdEt>:

void DW1000Class::setNetworkId(uint16_t val)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	80fb      	strh	r3, [r7, #6]
	_networkAndAddress[2] = (byte)(val & 0xFF);
 8002bfa:	88fb      	ldrh	r3, [r7, #6]
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	4b07      	ldr	r3, [pc, #28]	; (8002c1c <_ZN11DW1000Class12setNetworkIdEt+0x2c>)
 8002c00:	709a      	strb	r2, [r3, #2]
	_networkAndAddress[3] = (byte)((val >> 8) & 0xFF);
 8002c02:	88fb      	ldrh	r3, [r7, #6]
 8002c04:	0a1b      	lsrs	r3, r3, #8
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	b2da      	uxtb	r2, r3
 8002c0a:	4b04      	ldr	r3, [pc, #16]	; (8002c1c <_ZN11DW1000Class12setNetworkIdEt+0x2c>)
 8002c0c:	70da      	strb	r2, [r3, #3]
}
 8002c0e:	bf00      	nop
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	200002a4 	.word	0x200002a4

08002c20 <_ZN11DW1000Class16setDeviceAddressEt>:

void DW1000Class::setDeviceAddress(uint16_t val)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	4603      	mov	r3, r0
 8002c28:	80fb      	strh	r3, [r7, #6]
	_networkAndAddress[0] = (byte)(val & 0xFF);
 8002c2a:	88fb      	ldrh	r3, [r7, #6]
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	4b07      	ldr	r3, [pc, #28]	; (8002c4c <_ZN11DW1000Class16setDeviceAddressEt+0x2c>)
 8002c30:	701a      	strb	r2, [r3, #0]
	_networkAndAddress[1] = (byte)((val >> 8) & 0xFF);
 8002c32:	88fb      	ldrh	r3, [r7, #6]
 8002c34:	0a1b      	lsrs	r3, r3, #8
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	b2da      	uxtb	r2, r3
 8002c3a:	4b04      	ldr	r3, [pc, #16]	; (8002c4c <_ZN11DW1000Class16setDeviceAddressEt+0x2c>)
 8002c3c:	705a      	strb	r2, [r3, #1]
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	200002a4 	.word	0x200002a4

08002c50 <_ZN11DW1000Class14nibbleFromCharEc>:

uint8_t DW1000Class::nibbleFromChar(char c)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	4603      	mov	r3, r0
 8002c58:	71fb      	strb	r3, [r7, #7]
	if (c >= '0' && c <= '9')
 8002c5a:	79fb      	ldrb	r3, [r7, #7]
 8002c5c:	2b2f      	cmp	r3, #47	; 0x2f
 8002c5e:	d906      	bls.n	8002c6e <_ZN11DW1000Class14nibbleFromCharEc+0x1e>
 8002c60:	79fb      	ldrb	r3, [r7, #7]
 8002c62:	2b39      	cmp	r3, #57	; 0x39
 8002c64:	d803      	bhi.n	8002c6e <_ZN11DW1000Class14nibbleFromCharEc+0x1e>
	{
		return c - '0';
 8002c66:	79fb      	ldrb	r3, [r7, #7]
 8002c68:	3b30      	subs	r3, #48	; 0x30
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	e014      	b.n	8002c98 <_ZN11DW1000Class14nibbleFromCharEc+0x48>
	}
	if (c >= 'a' && c <= 'f')
 8002c6e:	79fb      	ldrb	r3, [r7, #7]
 8002c70:	2b60      	cmp	r3, #96	; 0x60
 8002c72:	d906      	bls.n	8002c82 <_ZN11DW1000Class14nibbleFromCharEc+0x32>
 8002c74:	79fb      	ldrb	r3, [r7, #7]
 8002c76:	2b66      	cmp	r3, #102	; 0x66
 8002c78:	d803      	bhi.n	8002c82 <_ZN11DW1000Class14nibbleFromCharEc+0x32>
	{
		return c - 'a' + 10;
 8002c7a:	79fb      	ldrb	r3, [r7, #7]
 8002c7c:	3b57      	subs	r3, #87	; 0x57
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	e00a      	b.n	8002c98 <_ZN11DW1000Class14nibbleFromCharEc+0x48>
	}
	if (c >= 'A' && c <= 'F')
 8002c82:	79fb      	ldrb	r3, [r7, #7]
 8002c84:	2b40      	cmp	r3, #64	; 0x40
 8002c86:	d906      	bls.n	8002c96 <_ZN11DW1000Class14nibbleFromCharEc+0x46>
 8002c88:	79fb      	ldrb	r3, [r7, #7]
 8002c8a:	2b46      	cmp	r3, #70	; 0x46
 8002c8c:	d803      	bhi.n	8002c96 <_ZN11DW1000Class14nibbleFromCharEc+0x46>
	{
		return c - 'A' + 10;
 8002c8e:	79fb      	ldrb	r3, [r7, #7]
 8002c90:	3b37      	subs	r3, #55	; 0x37
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	e000      	b.n	8002c98 <_ZN11DW1000Class14nibbleFromCharEc+0x48>
	}
	return 255;
 8002c96:	23ff      	movs	r3, #255	; 0xff
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <_ZN11DW1000Class13convertToByteEPcPh>:

void DW1000Class::convertToByte(char string[], byte *bytes)
{
 8002ca4:	b590      	push	{r4, r7, lr}
 8002ca6:	b087      	sub	sp, #28
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
	byte eui_byte[LEN_EUI];
	// we fill it with the char array under the form of "AA:FF:1C:...."
	for (uint16_t i = 0; i < LEN_EUI; i++)
 8002cae:	2300      	movs	r3, #0
 8002cb0:	82fb      	strh	r3, [r7, #22]
 8002cb2:	8afb      	ldrh	r3, [r7, #22]
 8002cb4:	2b07      	cmp	r3, #7
 8002cb6:	d825      	bhi.n	8002d04 <_ZN11DW1000Class13convertToByteEPcPh+0x60>
	{
		eui_byte[i] = (nibbleFromChar(string[i * 3]) << 4) + nibbleFromChar(string[i * 3 + 1]);
 8002cb8:	8afa      	ldrh	r2, [r7, #22]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	4413      	add	r3, r2
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff ffc1 	bl	8002c50 <_ZN11DW1000Class14nibbleFromCharEc>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	011b      	lsls	r3, r3, #4
 8002cd2:	b2dc      	uxtb	r4, r3
 8002cd4:	8afa      	ldrh	r2, [r7, #22]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	4413      	add	r3, r2
 8002cdc:	3301      	adds	r3, #1
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff ffb3 	bl	8002c50 <_ZN11DW1000Class14nibbleFromCharEc>
 8002cea:	4603      	mov	r3, r0
 8002cec:	461a      	mov	r2, r3
 8002cee:	8afb      	ldrh	r3, [r7, #22]
 8002cf0:	4422      	add	r2, r4
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	3318      	adds	r3, #24
 8002cf6:	443b      	add	r3, r7
 8002cf8:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for (uint16_t i = 0; i < LEN_EUI; i++)
 8002cfc:	8afb      	ldrh	r3, [r7, #22]
 8002cfe:	3301      	adds	r3, #1
 8002d00:	82fb      	strh	r3, [r7, #22]
 8002d02:	e7d6      	b.n	8002cb2 <_ZN11DW1000Class13convertToByteEPcPh+0xe>
	}
	memcpy(bytes, eui_byte, LEN_EUI);
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	461a      	mov	r2, r3
 8002d08:	f107 030c 	add.w	r3, r7, #12
 8002d0c:	cb03      	ldmia	r3!, {r0, r1}
 8002d0e:	6010      	str	r0, [r2, #0]
 8002d10:	6051      	str	r1, [r2, #4]
}
 8002d12:	bf00      	nop
 8002d14:	371c      	adds	r7, #28
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd90      	pop	{r4, r7, pc}

08002d1a <_ZN11DW1000Class6setEUIEPc>:

void DW1000Class::setEUI(char eui[])
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b084      	sub	sp, #16
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
	byte eui_byte[LEN_EUI];
	convertToByte(eui, eui_byte);
 8002d22:	f107 0308 	add.w	r3, r7, #8
 8002d26:	4619      	mov	r1, r3
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f7ff ffbb 	bl	8002ca4 <_ZN11DW1000Class13convertToByteEPcPh>
	setEUI(eui_byte);
 8002d2e:	f107 0308 	add.w	r3, r7, #8
 8002d32:	4618      	mov	r0, r3
 8002d34:	f000 f804 	bl	8002d40 <_ZN11DW1000Class6setEUIEPh>
}
 8002d38:	bf00      	nop
 8002d3a:	3710      	adds	r7, #16
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <_ZN11DW1000Class6setEUIEPh>:

void DW1000Class::setEUI(byte eui[])
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
	// we reverse the address->
	byte reverseEUI[8];
	uint8_t size = 8;
 8002d48:	2308      	movs	r3, #8
 8002d4a:	75bb      	strb	r3, [r7, #22]
	for (uint8_t i = 0; i < size; i++)
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	75fb      	strb	r3, [r7, #23]
 8002d50:	7dfa      	ldrb	r2, [r7, #23]
 8002d52:	7dbb      	ldrb	r3, [r7, #22]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d20f      	bcs.n	8002d78 <_ZN11DW1000Class6setEUIEPh+0x38>
	{
		*(reverseEUI + i) = *(eui + size - i - 1);
 8002d58:	7dba      	ldrb	r2, [r7, #22]
 8002d5a:	7dfb      	ldrb	r3, [r7, #23]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	441a      	add	r2, r3
 8002d64:	7dfb      	ldrb	r3, [r7, #23]
 8002d66:	f107 010c 	add.w	r1, r7, #12
 8002d6a:	440b      	add	r3, r1
 8002d6c:	7812      	ldrb	r2, [r2, #0]
 8002d6e:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < size; i++)
 8002d70:	7dfb      	ldrb	r3, [r7, #23]
 8002d72:	3301      	adds	r3, #1
 8002d74:	75fb      	strb	r3, [r7, #23]
 8002d76:	e7eb      	b.n	8002d50 <_ZN11DW1000Class6setEUIEPh+0x10>
	}
	writeBytes(EUI, NO_SUB, reverseEUI, LEN_EUI);
 8002d78:	f107 020c 	add.w	r2, r7, #12
 8002d7c:	2308      	movs	r3, #8
 8002d7e:	2100      	movs	r1, #0
 8002d80:	2001      	movs	r0, #1
 8002d82:	f001 fa0c 	bl	800419e <_ZN11DW1000Class10writeBytesEhtPht>
}
 8002d86:	bf00      	nop
 8002d88:	3718      	adds	r7, #24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
	...

08002d90 <_ZN11DW1000Class14setFrameFilterEb>:

// Frame Filtering BIT in the SYS_CFG register
void DW1000Class::setFrameFilter(bool val)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	4603      	mov	r3, r0
 8002d98:	71fb      	strb	r3, [r7, #7]
	setBit(_syscfg, LEN_SYS_CFG, FFEN_BIT, val);
 8002d9a:	79fb      	ldrb	r3, [r7, #7]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	2104      	movs	r1, #4
 8002da0:	4803      	ldr	r0, [pc, #12]	; (8002db0 <_ZN11DW1000Class14setFrameFilterEb+0x20>)
 8002da2:	f001 f911 	bl	8003fc8 <_ZN11DW1000Class6setBitEPhttb>
}
 8002da6:	bf00      	nop
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	20000284 	.word	0x20000284

08002db4 <_ZN11DW1000Class23setReceiverAutoReenableEb>:
{
	setBit(_syscfg, LEN_SYS_CFG, FFAR_BIT, val);
}

void DW1000Class::setReceiverAutoReenable(bool val)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	4603      	mov	r3, r0
 8002dbc:	71fb      	strb	r3, [r7, #7]
	setBit(_syscfg, LEN_SYS_CFG, RXAUTR_BIT, val);
 8002dbe:	79fb      	ldrb	r3, [r7, #7]
 8002dc0:	221d      	movs	r2, #29
 8002dc2:	2104      	movs	r1, #4
 8002dc4:	4803      	ldr	r0, [pc, #12]	; (8002dd4 <_ZN11DW1000Class23setReceiverAutoReenableEb+0x20>)
 8002dc6:	f001 f8ff 	bl	8003fc8 <_ZN11DW1000Class6setBitEPhttb>
}
 8002dca:	bf00      	nop
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	20000284 	.word	0x20000284

08002dd8 <_ZN11DW1000Class15interruptOnSentEb>:

void DW1000Class::interruptOnSent(bool val)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	4603      	mov	r3, r0
 8002de0:	71fb      	strb	r3, [r7, #7]
	setBit(_sysmask, LEN_SYS_MASK, TXFRS_BIT, val);
 8002de2:	79fb      	ldrb	r3, [r7, #7]
 8002de4:	2207      	movs	r2, #7
 8002de6:	2104      	movs	r1, #4
 8002de8:	4803      	ldr	r0, [pc, #12]	; (8002df8 <_ZN11DW1000Class15interruptOnSentEb+0x20>)
 8002dea:	f001 f8ed 	bl	8003fc8 <_ZN11DW1000Class6setBitEPhttb>
}
 8002dee:	bf00      	nop
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	2000029c 	.word	0x2000029c

08002dfc <_ZN11DW1000Class19interruptOnReceivedEb>:

void DW1000Class::interruptOnReceived(bool val)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	4603      	mov	r3, r0
 8002e04:	71fb      	strb	r3, [r7, #7]
	setBit(_sysmask, LEN_SYS_MASK, RXDFR_BIT, val);
 8002e06:	79fb      	ldrb	r3, [r7, #7]
 8002e08:	220d      	movs	r2, #13
 8002e0a:	2104      	movs	r1, #4
 8002e0c:	4806      	ldr	r0, [pc, #24]	; (8002e28 <_ZN11DW1000Class19interruptOnReceivedEb+0x2c>)
 8002e0e:	f001 f8db 	bl	8003fc8 <_ZN11DW1000Class6setBitEPhttb>
	setBit(_sysmask, LEN_SYS_MASK, RXFCG_BIT, val);
 8002e12:	79fb      	ldrb	r3, [r7, #7]
 8002e14:	220e      	movs	r2, #14
 8002e16:	2104      	movs	r1, #4
 8002e18:	4803      	ldr	r0, [pc, #12]	; (8002e28 <_ZN11DW1000Class19interruptOnReceivedEb+0x2c>)
 8002e1a:	f001 f8d5 	bl	8003fc8 <_ZN11DW1000Class6setBitEPhttb>
}
 8002e1e:	bf00      	nop
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	2000029c 	.word	0x2000029c

08002e2c <_ZN11DW1000Class24interruptOnReceiveFailedEb>:

void DW1000Class::interruptOnReceiveFailed(bool val)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	71fb      	strb	r3, [r7, #7]
	setBit(_sysmask, LEN_SYS_STATUS, LDEERR_BIT, val);
 8002e36:	79fb      	ldrb	r3, [r7, #7]
 8002e38:	2212      	movs	r2, #18
 8002e3a:	2105      	movs	r1, #5
 8002e3c:	480c      	ldr	r0, [pc, #48]	; (8002e70 <_ZN11DW1000Class24interruptOnReceiveFailedEb+0x44>)
 8002e3e:	f001 f8c3 	bl	8003fc8 <_ZN11DW1000Class6setBitEPhttb>
	setBit(_sysmask, LEN_SYS_STATUS, RXFCE_BIT, val);
 8002e42:	79fb      	ldrb	r3, [r7, #7]
 8002e44:	220f      	movs	r2, #15
 8002e46:	2105      	movs	r1, #5
 8002e48:	4809      	ldr	r0, [pc, #36]	; (8002e70 <_ZN11DW1000Class24interruptOnReceiveFailedEb+0x44>)
 8002e4a:	f001 f8bd 	bl	8003fc8 <_ZN11DW1000Class6setBitEPhttb>
	setBit(_sysmask, LEN_SYS_STATUS, RXPHE_BIT, val);
 8002e4e:	79fb      	ldrb	r3, [r7, #7]
 8002e50:	220c      	movs	r2, #12
 8002e52:	2105      	movs	r1, #5
 8002e54:	4806      	ldr	r0, [pc, #24]	; (8002e70 <_ZN11DW1000Class24interruptOnReceiveFailedEb+0x44>)
 8002e56:	f001 f8b7 	bl	8003fc8 <_ZN11DW1000Class6setBitEPhttb>
	setBit(_sysmask, LEN_SYS_STATUS, RXRFSL_BIT, val);
 8002e5a:	79fb      	ldrb	r3, [r7, #7]
 8002e5c:	2210      	movs	r2, #16
 8002e5e:	2105      	movs	r1, #5
 8002e60:	4803      	ldr	r0, [pc, #12]	; (8002e70 <_ZN11DW1000Class24interruptOnReceiveFailedEb+0x44>)
 8002e62:	f001 f8b1 	bl	8003fc8 <_ZN11DW1000Class6setBitEPhttb>
}
 8002e66:	bf00      	nop
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	2000029c 	.word	0x2000029c

08002e74 <_ZN11DW1000Class36interruptOnReceiveTimestampAvailableEb>:
{
	setBit(_sysmask, LEN_SYS_MASK, RXRFTO_BIT, val);
}

void DW1000Class::interruptOnReceiveTimestampAvailable(bool val)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	71fb      	strb	r3, [r7, #7]
	setBit(_sysmask, LEN_SYS_MASK, LDEDONE_BIT, val);
 8002e7e:	79fb      	ldrb	r3, [r7, #7]
 8002e80:	220a      	movs	r2, #10
 8002e82:	2104      	movs	r1, #4
 8002e84:	4803      	ldr	r0, [pc, #12]	; (8002e94 <_ZN11DW1000Class36interruptOnReceiveTimestampAvailableEb+0x20>)
 8002e86:	f001 f89f 	bl	8003fc8 <_ZN11DW1000Class6setBitEPhttb>
}
 8002e8a:	bf00      	nop
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	2000029c 	.word	0x2000029c

08002e98 <_ZN11DW1000Class38interruptOnAutomaticAcknowledgeTriggerEb>:

void DW1000Class::interruptOnAutomaticAcknowledgeTrigger(bool val)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	71fb      	strb	r3, [r7, #7]
	setBit(_sysmask, LEN_SYS_MASK, AAT_BIT, val);
 8002ea2:	79fb      	ldrb	r3, [r7, #7]
 8002ea4:	2203      	movs	r2, #3
 8002ea6:	2104      	movs	r1, #4
 8002ea8:	4803      	ldr	r0, [pc, #12]	; (8002eb8 <_ZN11DW1000Class38interruptOnAutomaticAcknowledgeTriggerEb+0x20>)
 8002eaa:	f001 f88d 	bl	8003fc8 <_ZN11DW1000Class6setBitEPhttb>
}
 8002eae:	bf00      	nop
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	2000029c 	.word	0x2000029c

08002ebc <_ZN11DW1000Class15setAntennaDelayEt>:

void DW1000Class::setAntennaDelay(const uint16_t value)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	4601      	mov	r1, r0
 8002ec4:	80f9      	strh	r1, [r7, #6]
	_antennaDelay.setTimestamp(value);
 8002ec6:	88f9      	ldrh	r1, [r7, #6]
 8002ec8:	2000      	movs	r0, #0
 8002eca:	460a      	mov	r2, r1
 8002ecc:	4603      	mov	r3, r0
 8002ece:	4805      	ldr	r0, [pc, #20]	; (8002ee4 <_ZN11DW1000Class15setAntennaDelayEt+0x28>)
 8002ed0:	f003 fa90 	bl	80063f4 <_ZN10DW1000Time12setTimestampEx>
	_antennaCalibrated = true;
 8002ed4:	4b04      	ldr	r3, [pc, #16]	; (8002ee8 <_ZN11DW1000Class15setAntennaDelayEt+0x2c>)
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	701a      	strb	r2, [r3, #0]
}
 8002eda:	bf00      	nop
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	200002b0 	.word	0x200002b0
 8002ee8:	200002b8 	.word	0x200002b8

08002eec <_ZN11DW1000Class4idleEv>:
{
	return static_cast<uint16_t>(_antennaDelay.getTimestamp());
}

void DW1000Class::idle()
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
	dwt_forcetrxoff();
 8002ef0:	f7fe ff14 	bl	8001d1c <dwt_forcetrxoff>
	_deviceMode = IDLE_MODE;
 8002ef4:	4b02      	ldr	r3, [pc, #8]	; (8002f00 <_ZN11DW1000Class4idleEv+0x14>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	701a      	strb	r2, [r3, #0]

}
 8002efa:	bf00      	nop
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	200002bb 	.word	0x200002bb

08002f04 <_ZN11DW1000Class10newReceiveEv>:

void DW1000Class::newReceive()
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
	idle();
 8002f08:	f7ff fff0 	bl	8002eec <_ZN11DW1000Class4idleEv>
	memset(_sysctrl, 0, LEN_SYS_CTRL);
 8002f0c:	2204      	movs	r2, #4
 8002f0e:	2100      	movs	r1, #0
 8002f10:	4804      	ldr	r0, [pc, #16]	; (8002f24 <_ZN11DW1000Class10newReceiveEv+0x20>)
 8002f12:	f007 f991 	bl	800a238 <memset>
	clearReceiveStatus();
 8002f16:	f000 fe4d 	bl	8003bb4 <_ZN11DW1000Class18clearReceiveStatusEv>
	_deviceMode = RX_MODE;
 8002f1a:	4b03      	ldr	r3, [pc, #12]	; (8002f28 <_ZN11DW1000Class10newReceiveEv+0x24>)
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	701a      	strb	r2, [r3, #0]
}
 8002f20:	bf00      	nop
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	20000288 	.word	0x20000288
 8002f28:	200002bb 	.word	0x200002bb

08002f2c <_ZN11DW1000Class12startReceiveEv>:

void DW1000Class::startReceive()
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
	setBit(_sysctrl, LEN_SYS_CTRL, SFCST_BIT, !_frameCheck);
 8002f30:	4b0b      	ldr	r3, [pc, #44]	; (8002f60 <_ZN11DW1000Class12startReceiveEv+0x34>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	f083 0301 	eor.w	r3, r3, #1
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	2104      	movs	r1, #4
 8002f3e:	4809      	ldr	r0, [pc, #36]	; (8002f64 <_ZN11DW1000Class12startReceiveEv+0x38>)
 8002f40:	f001 f842 	bl	8003fc8 <_ZN11DW1000Class6setBitEPhttb>
	setBit(_sysctrl, LEN_SYS_CTRL, RXENAB_BIT, true);
 8002f44:	2301      	movs	r3, #1
 8002f46:	2208      	movs	r2, #8
 8002f48:	2104      	movs	r1, #4
 8002f4a:	4806      	ldr	r0, [pc, #24]	; (8002f64 <_ZN11DW1000Class12startReceiveEv+0x38>)
 8002f4c:	f001 f83c 	bl	8003fc8 <_ZN11DW1000Class6setBitEPhttb>
	writeBytes(SYS_CTRL, NO_SUB, _sysctrl, LEN_SYS_CTRL);
 8002f50:	2304      	movs	r3, #4
 8002f52:	4a04      	ldr	r2, [pc, #16]	; (8002f64 <_ZN11DW1000Class12startReceiveEv+0x38>)
 8002f54:	2100      	movs	r1, #0
 8002f56:	200d      	movs	r0, #13
 8002f58:	f001 f921 	bl	800419e <_ZN11DW1000Class10writeBytesEhtPht>
}
 8002f5c:	bf00      	nop
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	2000000a 	.word	0x2000000a
 8002f64:	20000288 	.word	0x20000288

08002f68 <_ZN11DW1000Class11newTransmitEv>:

void DW1000Class::newTransmit()
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
	idle();
 8002f6c:	f7ff ffbe 	bl	8002eec <_ZN11DW1000Class4idleEv>
	memset(_sysctrl, 0, LEN_SYS_CTRL);
 8002f70:	2204      	movs	r2, #4
 8002f72:	2100      	movs	r1, #0
 8002f74:	4804      	ldr	r0, [pc, #16]	; (8002f88 <_ZN11DW1000Class11newTransmitEv+0x20>)
 8002f76:	f007 f95f 	bl	800a238 <memset>
	clearTransmitStatus();
 8002f7a:	f000 fe51 	bl	8003c20 <_ZN11DW1000Class19clearTransmitStatusEv>
	_deviceMode = TX_MODE;
 8002f7e:	4b03      	ldr	r3, [pc, #12]	; (8002f8c <_ZN11DW1000Class11newTransmitEv+0x24>)
 8002f80:	2202      	movs	r2, #2
 8002f82:	701a      	strb	r2, [r3, #0]
}
 8002f84:	bf00      	nop
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	20000288 	.word	0x20000288
 8002f8c:	200002bb 	.word	0x200002bb

08002f90 <_ZN11DW1000Class13startTransmitEv>:

void DW1000Class::startTransmit()
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
	writeTransmitFrameControlRegister();
 8002f94:	f7ff fe20 	bl	8002bd8 <_ZN11DW1000Class33writeTransmitFrameControlRegisterEv>
	setBit(_sysctrl, LEN_SYS_CTRL, SFCST_BIT, !_frameCheck);
 8002f98:	4b14      	ldr	r3, [pc, #80]	; (8002fec <_ZN11DW1000Class13startTransmitEv+0x5c>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	f083 0301 	eor.w	r3, r3, #1
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	2104      	movs	r1, #4
 8002fa6:	4812      	ldr	r0, [pc, #72]	; (8002ff0 <_ZN11DW1000Class13startTransmitEv+0x60>)
 8002fa8:	f001 f80e 	bl	8003fc8 <_ZN11DW1000Class6setBitEPhttb>
	setBit(_sysctrl, LEN_SYS_CTRL, TXSTRT_BIT, true);
 8002fac:	2301      	movs	r3, #1
 8002fae:	2201      	movs	r2, #1
 8002fb0:	2104      	movs	r1, #4
 8002fb2:	480f      	ldr	r0, [pc, #60]	; (8002ff0 <_ZN11DW1000Class13startTransmitEv+0x60>)
 8002fb4:	f001 f808 	bl	8003fc8 <_ZN11DW1000Class6setBitEPhttb>
	writeBytes(SYS_CTRL, NO_SUB, _sysctrl, LEN_SYS_CTRL);
 8002fb8:	2304      	movs	r3, #4
 8002fba:	4a0d      	ldr	r2, [pc, #52]	; (8002ff0 <_ZN11DW1000Class13startTransmitEv+0x60>)
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	200d      	movs	r0, #13
 8002fc0:	f001 f8ed 	bl	800419e <_ZN11DW1000Class10writeBytesEhtPht>
	if (_permanentReceive)
 8002fc4:	4b0b      	ldr	r3, [pc, #44]	; (8002ff4 <_ZN11DW1000Class13startTransmitEv+0x64>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00a      	beq.n	8002fe2 <_ZN11DW1000Class13startTransmitEv+0x52>
	{
		memset(_sysctrl, 0, LEN_SYS_CTRL);
 8002fcc:	2204      	movs	r2, #4
 8002fce:	2100      	movs	r1, #0
 8002fd0:	4807      	ldr	r0, [pc, #28]	; (8002ff0 <_ZN11DW1000Class13startTransmitEv+0x60>)
 8002fd2:	f007 f931 	bl	800a238 <memset>
		_deviceMode = RX_MODE;
 8002fd6:	4b08      	ldr	r3, [pc, #32]	; (8002ff8 <_ZN11DW1000Class13startTransmitEv+0x68>)
 8002fd8:	2201      	movs	r2, #1
 8002fda:	701a      	strb	r2, [r3, #0]
		startReceive();
 8002fdc:	f7ff ffa6 	bl	8002f2c <_ZN11DW1000Class12startReceiveEv>
	}
	else
	{
		_deviceMode = IDLE_MODE;
	}
}
 8002fe0:	e002      	b.n	8002fe8 <_ZN11DW1000Class13startTransmitEv+0x58>
		_deviceMode = IDLE_MODE;
 8002fe2:	4b05      	ldr	r3, [pc, #20]	; (8002ff8 <_ZN11DW1000Class13startTransmitEv+0x68>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	701a      	strb	r2, [r3, #0]
}
 8002fe8:	bf00      	nop
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	2000000a 	.word	0x2000000a
 8002ff0:	20000288 	.word	0x20000288
 8002ff4:	200002ba 	.word	0x200002ba
 8002ff8:	200002bb 	.word	0x200002bb

08002ffc <_ZN11DW1000Class16newConfigurationEv>:

	}
}

void DW1000Class::newConfiguration()
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
	idle();
 8003000:	f7ff ff74 	bl	8002eec <_ZN11DW1000Class4idleEv>
	readNetworkIdAndDeviceAddress();
 8003004:	f7ff fd94 	bl	8002b30 <_ZN11DW1000Class29readNetworkIdAndDeviceAddressEv>
	readSystemConfigurationRegister();
 8003008:	f7ff fd6e 	bl	8002ae8 <_ZN11DW1000Class31readSystemConfigurationRegisterEv>
	readChannelControlRegister();
 800300c:	f7ff fdc0 	bl	8002b90 <_ZN11DW1000Class26readChannelControlRegisterEv>
	readTransmitFrameControlRegister();
 8003010:	f7ff fdd6 	bl	8002bc0 <_ZN11DW1000Class32readTransmitFrameControlRegisterEv>
	readSystemEventMaskRegister();
 8003014:	f7ff fda4 	bl	8002b60 <_ZN11DW1000Class27readSystemEventMaskRegisterEv>
}
 8003018:	bf00      	nop
 800301a:	bd80      	pop	{r7, pc}

0800301c <_ZN11DW1000Class19commitConfigurationEv>:

void DW1000Class::commitConfiguration()
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
	// write all configurations back to device
	writeNetworkIdAndDeviceAddress();
 8003022:	f7ff fd91 	bl	8002b48 <_ZN11DW1000Class30writeNetworkIdAndDeviceAddressEv>
	writeSystemConfigurationRegister();
 8003026:	f7ff fd6b 	bl	8002b00 <_ZN11DW1000Class32writeSystemConfigurationRegisterEv>
	writeChannelControlRegister();
 800302a:	f7ff fdbd 	bl	8002ba8 <_ZN11DW1000Class27writeChannelControlRegisterEv>
	writeTransmitFrameControlRegister();
 800302e:	f7ff fdd3 	bl	8002bd8 <_ZN11DW1000Class33writeTransmitFrameControlRegisterEv>
	writeSystemEventMaskRegister();
 8003032:	f7ff fda1 	bl	8002b78 <_ZN11DW1000Class28writeSystemEventMaskRegisterEv>
	// tune according to configuration
	tune();
 8003036:	f7fe ff23 	bl	8001e80 <_ZN11DW1000Class4tuneEv>
	// TODO check not larger two bytes integer
	byte antennaDelayBytes[DW1000Time::LENGTH_TIMESTAMP];
	if (_antennaDelay.getTimestamp() == 0 && _antennaCalibrated == false)
 800303a:	4818      	ldr	r0, [pc, #96]	; (800309c <_ZN11DW1000Class19commitConfigurationEv+0x80>)
 800303c:	f003 fa6f 	bl	800651e <_ZNK10DW1000Time12getTimestampEv>
 8003040:	4602      	mov	r2, r0
 8003042:	460b      	mov	r3, r1
 8003044:	4313      	orrs	r3, r2
 8003046:	d105      	bne.n	8003054 <_ZN11DW1000Class19commitConfigurationEv+0x38>
 8003048:	4b15      	ldr	r3, [pc, #84]	; (80030a0 <_ZN11DW1000Class19commitConfigurationEv+0x84>)
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <_ZN11DW1000Class19commitConfigurationEv+0x38>
 8003050:	2301      	movs	r3, #1
 8003052:	e000      	b.n	8003056 <_ZN11DW1000Class19commitConfigurationEv+0x3a>
 8003054:	2300      	movs	r3, #0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d009      	beq.n	800306e <_ZN11DW1000Class19commitConfigurationEv+0x52>
	{
		_antennaDelay.setTimestamp(16384);
 800305a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800305e:	f04f 0300 	mov.w	r3, #0
 8003062:	480e      	ldr	r0, [pc, #56]	; (800309c <_ZN11DW1000Class19commitConfigurationEv+0x80>)
 8003064:	f003 f9c6 	bl	80063f4 <_ZN10DW1000Time12setTimestampEx>
		_antennaCalibrated = true;
 8003068:	4b0d      	ldr	r3, [pc, #52]	; (80030a0 <_ZN11DW1000Class19commitConfigurationEv+0x84>)
 800306a:	2201      	movs	r2, #1
 800306c:	701a      	strb	r2, [r3, #0]
	} // Compatibility with old versions.
	_antennaDelay.getTimestamp(antennaDelayBytes);
 800306e:	463b      	mov	r3, r7
 8003070:	4619      	mov	r1, r3
 8003072:	480a      	ldr	r0, [pc, #40]	; (800309c <_ZN11DW1000Class19commitConfigurationEv+0x80>)
 8003074:	f003 fa61 	bl	800653a <_ZNK10DW1000Time12getTimestampEPh>

	writeBytes(TX_ANTD, NO_SUB, antennaDelayBytes, LEN_TX_ANTD);
 8003078:	463a      	mov	r2, r7
 800307a:	2302      	movs	r3, #2
 800307c:	2100      	movs	r1, #0
 800307e:	2018      	movs	r0, #24
 8003080:	f001 f88d 	bl	800419e <_ZN11DW1000Class10writeBytesEhtPht>
	writeBytes(LDE_IF, LDE_RXANTD_SUB, antennaDelayBytes, LEN_LDE_RXANTD);
 8003084:	463a      	mov	r2, r7
 8003086:	2302      	movs	r3, #2
 8003088:	f641 0104 	movw	r1, #6148	; 0x1804
 800308c:	202e      	movs	r0, #46	; 0x2e
 800308e:	f001 f886 	bl	800419e <_ZN11DW1000Class10writeBytesEhtPht>
}
 8003092:	bf00      	nop
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	200002b0 	.word	0x200002b0
 80030a0:	200002b8 	.word	0x200002b8

080030a4 <_ZN11DW1000Class18suppressFrameCheckEb>:

void DW1000Class::suppressFrameCheck(bool val)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	4603      	mov	r3, r0
 80030ac:	71fb      	strb	r3, [r7, #7]
	_frameCheck = !val;
 80030ae:	79fb      	ldrb	r3, [r7, #7]
 80030b0:	f083 0301 	eor.w	r3, r3, #1
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	4b04      	ldr	r3, [pc, #16]	; (80030c8 <_ZN11DW1000Class18suppressFrameCheckEb+0x24>)
 80030b8:	701a      	strb	r2, [r3, #0]
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	2000000a 	.word	0x2000000a

080030cc <_ZN11DW1000Class13useSmartPowerEb>:

void DW1000Class::useSmartPower(bool smartPower)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	71fb      	strb	r3, [r7, #7]
	_smartPower = smartPower;
 80030d6:	4a08      	ldr	r2, [pc, #32]	; (80030f8 <_ZN11DW1000Class13useSmartPowerEb+0x2c>)
 80030d8:	79fb      	ldrb	r3, [r7, #7]
 80030da:	7013      	strb	r3, [r2, #0]
	setBit(_syscfg, LEN_SYS_CFG, DIS_STXP_BIT, !smartPower);
 80030dc:	79fb      	ldrb	r3, [r7, #7]
 80030de:	f083 0301 	eor.w	r3, r3, #1
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2212      	movs	r2, #18
 80030e6:	2104      	movs	r1, #4
 80030e8:	4804      	ldr	r0, [pc, #16]	; (80030fc <_ZN11DW1000Class13useSmartPowerEb+0x30>)
 80030ea:	f000 ff6d 	bl	8003fc8 <_ZN11DW1000Class6setBitEPhttb>
}
 80030ee:	bf00      	nop
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	200002b9 	.word	0x200002b9
 80030fc:	20000284 	.word	0x20000284

08003100 <_ZN11DW1000Class8setDelayERK10DW1000Time>:

DW1000Time DW1000Class::setDelay(const DW1000Time &delay)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
	if (_deviceMode == TX_MODE)
 800310a:	4b2e      	ldr	r3, [pc, #184]	; (80031c4 <_ZN11DW1000Class8setDelayERK10DW1000Time+0xc4>)
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	2b02      	cmp	r3, #2
 8003110:	d106      	bne.n	8003120 <_ZN11DW1000Class8setDelayERK10DW1000Time+0x20>
	{
		setBit(_sysctrl, LEN_SYS_CTRL, TXDLYS_BIT, true);
 8003112:	2301      	movs	r3, #1
 8003114:	2202      	movs	r2, #2
 8003116:	2104      	movs	r1, #4
 8003118:	482b      	ldr	r0, [pc, #172]	; (80031c8 <_ZN11DW1000Class8setDelayERK10DW1000Time+0xc8>)
 800311a:	f000 ff55 	bl	8003fc8 <_ZN11DW1000Class6setBitEPhttb>
 800311e:	e00e      	b.n	800313e <_ZN11DW1000Class8setDelayERK10DW1000Time+0x3e>
	}
	else if (_deviceMode == RX_MODE)
 8003120:	4b28      	ldr	r3, [pc, #160]	; (80031c4 <_ZN11DW1000Class8setDelayERK10DW1000Time+0xc4>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d106      	bne.n	8003136 <_ZN11DW1000Class8setDelayERK10DW1000Time+0x36>
	{
		setBit(_sysctrl, LEN_SYS_CTRL, RXDLYS_BIT, true);
 8003128:	2301      	movs	r3, #1
 800312a:	2209      	movs	r2, #9
 800312c:	2104      	movs	r1, #4
 800312e:	4826      	ldr	r0, [pc, #152]	; (80031c8 <_ZN11DW1000Class8setDelayERK10DW1000Time+0xc8>)
 8003130:	f000 ff4a 	bl	8003fc8 <_ZN11DW1000Class6setBitEPhttb>
 8003134:	e003      	b.n	800313e <_ZN11DW1000Class8setDelayERK10DW1000Time+0x3e>
	}
	else
	{
		// in idle, ignore
		return DW1000Time();
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f003 f90a 	bl	8006350 <_ZN10DW1000TimeC1Ev>
 800313c:	e03e      	b.n	80031bc <_ZN11DW1000Class8setDelayERK10DW1000Time+0xbc>
	}
	byte delayBytes[5];
	DW1000Time futureTime;
 800313e:	f107 0308 	add.w	r3, r7, #8
 8003142:	4618      	mov	r0, r3
 8003144:	f003 f904 	bl	8006350 <_ZN10DW1000TimeC1Ev>
	getSystemTimestamp(futureTime);
 8003148:	f107 0308 	add.w	r3, r7, #8
 800314c:	4618      	mov	r0, r3
 800314e:	f000 fa31 	bl	80035b4 <_ZN11DW1000Class18getSystemTimestampER10DW1000Time>
	futureTime += delay;
 8003152:	f107 0308 	add.w	r3, r7, #8
 8003156:	6839      	ldr	r1, [r7, #0]
 8003158:	4618      	mov	r0, r3
 800315a:	f003 fa80 	bl	800665e <_ZN10DW1000TimepLERKS_>
	futureTime.getTimestamp(delayBytes);
 800315e:	f107 0210 	add.w	r2, r7, #16
 8003162:	f107 0308 	add.w	r3, r7, #8
 8003166:	4611      	mov	r1, r2
 8003168:	4618      	mov	r0, r3
 800316a:	f003 f9e6 	bl	800653a <_ZNK10DW1000Time12getTimestampEPh>
	delayBytes[0] = 0;
 800316e:	2300      	movs	r3, #0
 8003170:	743b      	strb	r3, [r7, #16]
	delayBytes[1] &= 0xFE;
 8003172:	7c7b      	ldrb	r3, [r7, #17]
 8003174:	f023 0301 	bic.w	r3, r3, #1
 8003178:	b2db      	uxtb	r3, r3
 800317a:	747b      	strb	r3, [r7, #17]
	writeBytes(DX_TIME, NO_SUB, delayBytes, LEN_DX_TIME);
 800317c:	f107 0210 	add.w	r2, r7, #16
 8003180:	2305      	movs	r3, #5
 8003182:	2100      	movs	r1, #0
 8003184:	200a      	movs	r0, #10
 8003186:	f001 f80a 	bl	800419e <_ZN11DW1000Class10writeBytesEhtPht>
	// adjust expected time with configured antenna delay
	futureTime.setTimestamp(delayBytes);
 800318a:	f107 0210 	add.w	r2, r7, #16
 800318e:	f107 0308 	add.w	r3, r7, #8
 8003192:	4611      	mov	r1, r2
 8003194:	4618      	mov	r0, r3
 8003196:	f003 f93e 	bl	8006416 <_ZN10DW1000Time12setTimestampEPh>
	futureTime += _antennaDelay;
 800319a:	f107 0308 	add.w	r3, r7, #8
 800319e:	490b      	ldr	r1, [pc, #44]	; (80031cc <_ZN11DW1000Class8setDelayERK10DW1000Time+0xcc>)
 80031a0:	4618      	mov	r0, r3
 80031a2:	f003 fa5c 	bl	800665e <_ZN10DW1000TimepLERKS_>
	return futureTime;
 80031a6:	f107 0308 	add.w	r3, r7, #8
 80031aa:	4619      	mov	r1, r3
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f003 f8e8 	bl	8006382 <_ZN10DW1000TimeC1ERKS_>
	DW1000Time futureTime;
 80031b2:	f107 0308 	add.w	r3, r7, #8
 80031b6:	4618      	mov	r0, r3
 80031b8:	f003 f911 	bl	80063de <_ZN10DW1000TimeD1Ev>
}
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	3718      	adds	r7, #24
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	200002bb 	.word	0x200002bb
 80031c8:	20000288 	.word	0x20000288
 80031cc:	200002b0 	.word	0x200002b0

080031d0 <_ZN11DW1000Class18receivePermanentlyEb>:

void DW1000Class::receivePermanently(bool val)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	4603      	mov	r3, r0
 80031d8:	71fb      	strb	r3, [r7, #7]
	_permanentReceive = val;
 80031da:	4a07      	ldr	r2, [pc, #28]	; (80031f8 <_ZN11DW1000Class18receivePermanentlyEb+0x28>)
 80031dc:	79fb      	ldrb	r3, [r7, #7]
 80031de:	7013      	strb	r3, [r2, #0]
	if (val)
 80031e0:	79fb      	ldrb	r3, [r7, #7]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d004      	beq.n	80031f0 <_ZN11DW1000Class18receivePermanentlyEb+0x20>
	{
		// in case permanent, also reenable receiver once failed
		setReceiverAutoReenable(true);
 80031e6:	2001      	movs	r0, #1
 80031e8:	f7ff fde4 	bl	8002db4 <_ZN11DW1000Class23setReceiverAutoReenableEb>
		writeSystemConfigurationRegister();
 80031ec:	f7ff fc88 	bl	8002b00 <_ZN11DW1000Class32writeSystemConfigurationRegisterEv>
	}
}
 80031f0:	bf00      	nop
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	200002ba 	.word	0x200002ba

080031fc <_ZN11DW1000Class7setDataEPht>:

void DW1000Class::setData(byte data[], uint16_t n)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	460b      	mov	r3, r1
 8003206:	807b      	strh	r3, [r7, #2]
	if (_frameCheck)
 8003208:	4b1b      	ldr	r3, [pc, #108]	; (8003278 <_ZN11DW1000Class7setDataEPht+0x7c>)
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d002      	beq.n	8003216 <_ZN11DW1000Class7setDataEPht+0x1a>
	{
		n += 2; // two bytes CRC-16
 8003210:	887b      	ldrh	r3, [r7, #2]
 8003212:	3302      	adds	r3, #2
 8003214:	807b      	strh	r3, [r7, #2]
	}
	if (n > LEN_EXT_UWB_FRAMES)
 8003216:	887b      	ldrh	r3, [r7, #2]
 8003218:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800321c:	d225      	bcs.n	800326a <_ZN11DW1000Class7setDataEPht+0x6e>
	{
		return; // TODO proper error handling: frame/buffer size
	}
	if (n > LEN_UWB_FRAMES && !_extendedFrameLength)
 800321e:	887b      	ldrh	r3, [r7, #2]
 8003220:	2b7f      	cmp	r3, #127	; 0x7f
 8003222:	d903      	bls.n	800322c <_ZN11DW1000Class7setDataEPht+0x30>
 8003224:	4b15      	ldr	r3, [pc, #84]	; (800327c <_ZN11DW1000Class7setDataEPht+0x80>)
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d020      	beq.n	800326e <_ZN11DW1000Class7setDataEPht+0x72>
	{
		return; // TODO proper error handling: frame/buffer size
	}
	// transmit data and length
	writeBytes(TX_BUFFER, NO_SUB, data, n);
 800322c:	887b      	ldrh	r3, [r7, #2]
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	2100      	movs	r1, #0
 8003232:	2009      	movs	r0, #9
 8003234:	f000 ffb3 	bl	800419e <_ZN11DW1000Class10writeBytesEhtPht>
	_txfctrl[0] = (byte)(n & 0xFF); // 1 byte (regular length + 1 bit)
 8003238:	887b      	ldrh	r3, [r7, #2]
 800323a:	b2da      	uxtb	r2, r3
 800323c:	4b10      	ldr	r3, [pc, #64]	; (8003280 <_ZN11DW1000Class7setDataEPht+0x84>)
 800323e:	701a      	strb	r2, [r3, #0]
	_txfctrl[1] &= 0xE0;
 8003240:	4b0f      	ldr	r3, [pc, #60]	; (8003280 <_ZN11DW1000Class7setDataEPht+0x84>)
 8003242:	785b      	ldrb	r3, [r3, #1]
 8003244:	f023 031f 	bic.w	r3, r3, #31
 8003248:	b2da      	uxtb	r2, r3
 800324a:	4b0d      	ldr	r3, [pc, #52]	; (8003280 <_ZN11DW1000Class7setDataEPht+0x84>)
 800324c:	705a      	strb	r2, [r3, #1]
	_txfctrl[1] |= (byte)((n >> 8) & 0x03); // 2 added bits if extended length
 800324e:	4b0c      	ldr	r3, [pc, #48]	; (8003280 <_ZN11DW1000Class7setDataEPht+0x84>)
 8003250:	785a      	ldrb	r2, [r3, #1]
 8003252:	887b      	ldrh	r3, [r7, #2]
 8003254:	0a1b      	lsrs	r3, r3, #8
 8003256:	b29b      	uxth	r3, r3
 8003258:	b2db      	uxtb	r3, r3
 800325a:	f003 0303 	and.w	r3, r3, #3
 800325e:	b2db      	uxtb	r3, r3
 8003260:	4313      	orrs	r3, r2
 8003262:	b2da      	uxtb	r2, r3
 8003264:	4b06      	ldr	r3, [pc, #24]	; (8003280 <_ZN11DW1000Class7setDataEPht+0x84>)
 8003266:	705a      	strb	r2, [r3, #1]
 8003268:	e002      	b.n	8003270 <_ZN11DW1000Class7setDataEPht+0x74>
		return; // TODO proper error handling: frame/buffer size
 800326a:	bf00      	nop
 800326c:	e000      	b.n	8003270 <_ZN11DW1000Class7setDataEPht+0x74>
		return; // TODO proper error handling: frame/buffer size
 800326e:	bf00      	nop
}
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	2000000a 	.word	0x2000000a
 800327c:	200002a8 	.word	0x200002a8
 8003280:	20000294 	.word	0x20000294

08003284 <_ZN11DW1000Class7getDataEPht>:
	}
	return len;
}

void DW1000Class::getData(byte data[], uint16_t n)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	460b      	mov	r3, r1
 800328e:	807b      	strh	r3, [r7, #2]
	if (n <= 0)
 8003290:	887b      	ldrh	r3, [r7, #2]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d006      	beq.n	80032a4 <_ZN11DW1000Class7getDataEPht+0x20>
	{
		return;
	}
	readBytes(RX_BUFFER, NO_SUB, data, n);
 8003296:	887b      	ldrh	r3, [r7, #2]
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	2100      	movs	r1, #0
 800329c:	2011      	movs	r0, #17
 800329e:	f000 ff20 	bl	80040e2 <_ZN11DW1000Class9readBytesEhtPht>
 80032a2:	e000      	b.n	80032a6 <_ZN11DW1000Class7getDataEPht+0x22>
		return;
 80032a4:	bf00      	nop
}
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <_ZN11DW1000Class20getTransmitTimestampER10DW1000Time>:
	}
	free(dataBytes);
}

void DW1000Class::getTransmitTimestamp(DW1000Time &time)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
	byte txTimeBytes[LEN_TX_STAMP];
	readBytes(TX_TIME, TX_STAMP_SUB, txTimeBytes, LEN_TX_STAMP);
 80032b4:	f107 0208 	add.w	r2, r7, #8
 80032b8:	2305      	movs	r3, #5
 80032ba:	2100      	movs	r1, #0
 80032bc:	2017      	movs	r0, #23
 80032be:	f000 ff10 	bl	80040e2 <_ZN11DW1000Class9readBytesEhtPht>
	time.setTimestamp(txTimeBytes);
 80032c2:	f107 0308 	add.w	r3, r7, #8
 80032c6:	4619      	mov	r1, r3
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f003 f8a4 	bl	8006416 <_ZN10DW1000Time12setTimestampEPh>
}
 80032ce:	bf00      	nop
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <_ZN11DW1000Class19getReceiveTimestampER10DW1000Time>:

void DW1000Class::getReceiveTimestamp(DW1000Time &time)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b084      	sub	sp, #16
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
	byte rxTimeBytes[LEN_RX_STAMP];
	readBytes(RX_TIME, RX_STAMP_SUB, rxTimeBytes, LEN_RX_STAMP);
 80032de:	f107 0208 	add.w	r2, r7, #8
 80032e2:	2305      	movs	r3, #5
 80032e4:	2100      	movs	r1, #0
 80032e6:	2015      	movs	r0, #21
 80032e8:	f000 fefb 	bl	80040e2 <_ZN11DW1000Class9readBytesEhtPht>
	time.setTimestamp(rxTimeBytes);
 80032ec:	f107 0308 	add.w	r3, r7, #8
 80032f0:	4619      	mov	r1, r3
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f003 f88f 	bl	8006416 <_ZN10DW1000Time12setTimestampEPh>
	// correct timestamp (i.e. consider range bias)
	correctTimestamp(time);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 f805 	bl	8003308 <_ZN11DW1000Class16correctTimestampER10DW1000Time>
}
 80032fe:	bf00      	nop
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
	...

08003308 <_ZN11DW1000Class16correctTimestampER10DW1000Time>:

// TODO check function, different type violations between byte and int
void DW1000Class::correctTimestamp(DW1000Time &timestamp)
{
 8003308:	b5b0      	push	{r4, r5, r7, lr}
 800330a:	b088      	sub	sp, #32
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
	// base line dBm, which is -61, 2 dBm steps, total 18 data points (down to -95 dBm)
	float rxPowerBase = -(getReceivePower() + 61.0f) * 0.5f;
 8003310:	f000 fdb8 	bl	8003e84 <_ZN11DW1000Class15getReceivePowerEv>
 8003314:	eef0 7a40 	vmov.f32	s15, s0
 8003318:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8003590 <_ZN11DW1000Class16correctTimestampER10DW1000Time+0x288>
 800331c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003320:	eef1 7a67 	vneg.f32	s15, s15
 8003324:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003328:	ee67 7a87 	vmul.f32	s15, s15, s14
 800332c:	edc7 7a05 	vstr	s15, [r7, #20]
	int16_t rxPowerBaseLow = (int16_t)rxPowerBase; // TODO check type
 8003330:	edd7 7a05 	vldr	s15, [r7, #20]
 8003334:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003338:	ee17 3a90 	vmov	r3, s15
 800333c:	83fb      	strh	r3, [r7, #30]
	int16_t rxPowerBaseHigh = rxPowerBaseLow + 1;  // TODO check type
 800333e:	8bfb      	ldrh	r3, [r7, #30]
 8003340:	3301      	adds	r3, #1
 8003342:	b29b      	uxth	r3, r3
 8003344:	83bb      	strh	r3, [r7, #28]
	if (rxPowerBaseLow <= 0)
 8003346:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800334a:	2b00      	cmp	r3, #0
 800334c:	dc04      	bgt.n	8003358 <_ZN11DW1000Class16correctTimestampER10DW1000Time+0x50>
	{
		rxPowerBaseLow = 0;
 800334e:	2300      	movs	r3, #0
 8003350:	83fb      	strh	r3, [r7, #30]
		rxPowerBaseHigh = 0;
 8003352:	2300      	movs	r3, #0
 8003354:	83bb      	strh	r3, [r7, #28]
 8003356:	e007      	b.n	8003368 <_ZN11DW1000Class16correctTimestampER10DW1000Time+0x60>
	}
	else if (rxPowerBaseHigh >= 17)
 8003358:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800335c:	2b10      	cmp	r3, #16
 800335e:	dd03      	ble.n	8003368 <_ZN11DW1000Class16correctTimestampER10DW1000Time+0x60>
	{
		rxPowerBaseLow = 17;
 8003360:	2311      	movs	r3, #17
 8003362:	83fb      	strh	r3, [r7, #30]
		rxPowerBaseHigh = 17;
 8003364:	2311      	movs	r3, #17
 8003366:	83bb      	strh	r3, [r7, #28]
	}
	// select range low/high values from corresponding table
	int16_t rangeBiasHigh;
	int16_t rangeBiasLow;
	if (_channel == CHANNEL_4 || _channel == CHANNEL_7)
 8003368:	4b8a      	ldr	r3, [pc, #552]	; (8003594 <_ZN11DW1000Class16correctTimestampER10DW1000Time+0x28c>)
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	2b04      	cmp	r3, #4
 800336e:	d003      	beq.n	8003378 <_ZN11DW1000Class16correctTimestampER10DW1000Time+0x70>
 8003370:	4b88      	ldr	r3, [pc, #544]	; (8003594 <_ZN11DW1000Class16correctTimestampER10DW1000Time+0x28c>)
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	2b07      	cmp	r3, #7
 8003376:	d166      	bne.n	8003446 <_ZN11DW1000Class16correctTimestampER10DW1000Time+0x13e>
	{
		// 900 MHz receiver bandwidth
		if (_pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8003378:	4b87      	ldr	r3, [pc, #540]	; (8003598 <_ZN11DW1000Class16correctTimestampER10DW1000Time+0x290>)
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d12e      	bne.n	80033de <_ZN11DW1000Class16correctTimestampER10DW1000Time+0xd6>
		{
			rangeBiasHigh = (rxPowerBaseHigh < BIAS_900_16_ZERO ? -BIAS_900_16[rxPowerBaseHigh] : BIAS_900_16[rxPowerBaseHigh]);
 8003380:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003384:	2b06      	cmp	r3, #6
 8003386:	dc08      	bgt.n	800339a <_ZN11DW1000Class16correctTimestampER10DW1000Time+0x92>
 8003388:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800338c:	4a83      	ldr	r2, [pc, #524]	; (800359c <_ZN11DW1000Class16correctTimestampER10DW1000Time+0x294>)
 800338e:	5cd3      	ldrb	r3, [r2, r3]
 8003390:	b29b      	uxth	r3, r3
 8003392:	425b      	negs	r3, r3
 8003394:	b29b      	uxth	r3, r3
 8003396:	b21b      	sxth	r3, r3
 8003398:	e004      	b.n	80033a4 <_ZN11DW1000Class16correctTimestampER10DW1000Time+0x9c>
 800339a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800339e:	4a7f      	ldr	r2, [pc, #508]	; (800359c <_ZN11DW1000Class16correctTimestampER10DW1000Time+0x294>)
 80033a0:	5cd3      	ldrb	r3, [r2, r3]
 80033a2:	b21b      	sxth	r3, r3
 80033a4:	837b      	strh	r3, [r7, #26]
			rangeBiasHigh <<= 1;
 80033a6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	837b      	strh	r3, [r7, #26]
			rangeBiasLow = (rxPowerBaseLow < BIAS_900_16_ZERO ? -BIAS_900_16[rxPowerBaseLow] : BIAS_900_16[rxPowerBaseLow]);
 80033ae:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80033b2:	2b06      	cmp	r3, #6
 80033b4:	dc08      	bgt.n	80033c8 <_ZN11DW1000Class16correctTimestampER10DW1000Time+0xc0>
 80033b6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80033ba:	4a78      	ldr	r2, [pc, #480]	; (800359c <_ZN11DW1000Class16correctTimestampER10DW1000Time+0x294>)
 80033bc:	5cd3      	ldrb	r3, [r2, r3]
 80033be:	b29b      	uxth	r3, r3
 80033c0:	425b      	negs	r3, r3
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	b21b      	sxth	r3, r3
 80033c6:	e004      	b.n	80033d2 <_ZN11DW1000Class16correctTimestampER10DW1000Time+0xca>
 80033c8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80033cc:	4a73      	ldr	r2, [pc, #460]	; (800359c <_ZN11DW1000Class16correctTimestampER10DW1000Time+0x294>)
 80033ce:	5cd3      	ldrb	r3, [r2, r3]
 80033d0:	b21b      	sxth	r3, r3
 80033d2:	833b      	strh	r3, [r7, #24]
			rangeBiasLow <<= 1;
 80033d4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	833b      	strh	r3, [r7, #24]
		if (_pulseFrequency == TX_PULSE_FREQ_16MHZ)
 80033dc:	e088      	b.n	80034f0 <_ZN11DW1000Class16correctTimestampER10DW1000Time+0x1e8>
		}
		else if (_pulseFrequency == TX_PULSE_FREQ_64MHZ)
 80033de:	4b6e      	ldr	r3, [pc, #440]	; (8003598 <_ZN11DW1000Class16correctTimestampER10DW1000Time+0x290>)
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	f040 80ce 	bne.w	8003584 <_ZN11DW1000Class16correctTimestampER10DW1000Time+0x27c>
		{
			rangeBiasHigh = (rxPowerBaseHigh < BIAS_900_64_ZERO ? -BIAS_900_64[rxPowerBaseHigh] : BIAS_900_64[rxPowerBaseHigh]);
 80033e8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80033ec:	2b06      	cmp	r3, #6
 80033ee:	dc08      	bgt.n	8003402 <_ZN11DW1000Class16correctTimestampER10DW1000Time+0xfa>
 80033f0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80033f4:	4a6a      	ldr	r2, [pc, #424]	; (80035a0 <_ZN11DW1000Class16correctTimestampER10DW1000Time+0x298>)
 80033f6:	5cd3      	ldrb	r3, [r2, r3]
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	425b      	negs	r3, r3
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	b21b      	sxth	r3, r3
 8003400:	e004      	b.n	800340c <_ZN11DW1000Class16correctTimestampER10DW1000Time+0x104>
 8003402:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003406:	4a66      	ldr	r2, [pc, #408]	; (80035a0 <_ZN11DW1000Class16correctTimestampER10DW1000Time+0x298>)
 8003408:	5cd3      	ldrb	r3, [r2, r3]
 800340a:	b21b      	sxth	r3, r3
 800340c:	837b      	strh	r3, [r7, #26]
			rangeBiasHigh <<= 1;
 800340e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	837b      	strh	r3, [r7, #26]
			rangeBiasLow = (rxPowerBaseLow < BIAS_900_64_ZERO ? -BIAS_900_64[rxPowerBaseLow] : BIAS_900_64[rxPowerBaseLow]);
 8003416:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800341a:	2b06      	cmp	r3, #6
 800341c:	dc08      	bgt.n	8003430 <_ZN11DW1000Class16correctTimestampER10DW1000Time+0x128>
 800341e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003422:	4a5f      	ldr	r2, [pc, #380]	; (80035a0 <_ZN11DW1000Class16correctTimestampER10DW1000Time+0x298>)
 8003424:	5cd3      	ldrb	r3, [r2, r3]
 8003426:	b29b      	uxth	r3, r3
 8003428:	425b      	negs	r3, r3
 800342a:	b29b      	uxth	r3, r3
 800342c:	b21b      	sxth	r3, r3
 800342e:	e004      	b.n	800343a <_ZN11DW1000Class16correctTimestampER10DW1000Time+0x132>
 8003430:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003434:	4a5a      	ldr	r2, [pc, #360]	; (80035a0 <_ZN11DW1000Class16correctTimestampER10DW1000Time+0x298>)
 8003436:	5cd3      	ldrb	r3, [r2, r3]
 8003438:	b21b      	sxth	r3, r3
 800343a:	833b      	strh	r3, [r7, #24]
			rangeBiasLow <<= 1;
 800343c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	833b      	strh	r3, [r7, #24]
		if (_pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8003444:	e054      	b.n	80034f0 <_ZN11DW1000Class16correctTimestampER10DW1000Time+0x1e8>
		}
	}
	else
	{
		// 500 MHz receiver bandwidth
		if (_pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8003446:	4b54      	ldr	r3, [pc, #336]	; (8003598 <_ZN11DW1000Class16correctTimestampER10DW1000Time+0x290>)
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d126      	bne.n	800349c <_ZN11DW1000Class16correctTimestampER10DW1000Time+0x194>
		{
			rangeBiasHigh = (rxPowerBaseHigh < BIAS_500_16_ZERO ? -BIAS_500_16[rxPowerBaseHigh] : BIAS_500_16[rxPowerBaseHigh]);
 800344e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003452:	2b09      	cmp	r3, #9
 8003454:	dc08      	bgt.n	8003468 <_ZN11DW1000Class16correctTimestampER10DW1000Time+0x160>
 8003456:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800345a:	4a52      	ldr	r2, [pc, #328]	; (80035a4 <_ZN11DW1000Class16correctTimestampER10DW1000Time+0x29c>)
 800345c:	5cd3      	ldrb	r3, [r2, r3]
 800345e:	b29b      	uxth	r3, r3
 8003460:	425b      	negs	r3, r3
 8003462:	b29b      	uxth	r3, r3
 8003464:	b21b      	sxth	r3, r3
 8003466:	e004      	b.n	8003472 <_ZN11DW1000Class16correctTimestampER10DW1000Time+0x16a>
 8003468:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800346c:	4a4d      	ldr	r2, [pc, #308]	; (80035a4 <_ZN11DW1000Class16correctTimestampER10DW1000Time+0x29c>)
 800346e:	5cd3      	ldrb	r3, [r2, r3]
 8003470:	b21b      	sxth	r3, r3
 8003472:	837b      	strh	r3, [r7, #26]
			rangeBiasLow = (rxPowerBaseLow < BIAS_500_16_ZERO ? -BIAS_500_16[rxPowerBaseLow] : BIAS_500_16[rxPowerBaseLow]);
 8003474:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003478:	2b09      	cmp	r3, #9
 800347a:	dc08      	bgt.n	800348e <_ZN11DW1000Class16correctTimestampER10DW1000Time+0x186>
 800347c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003480:	4a48      	ldr	r2, [pc, #288]	; (80035a4 <_ZN11DW1000Class16correctTimestampER10DW1000Time+0x29c>)
 8003482:	5cd3      	ldrb	r3, [r2, r3]
 8003484:	b29b      	uxth	r3, r3
 8003486:	425b      	negs	r3, r3
 8003488:	b29b      	uxth	r3, r3
 800348a:	b21b      	sxth	r3, r3
 800348c:	e004      	b.n	8003498 <_ZN11DW1000Class16correctTimestampER10DW1000Time+0x190>
 800348e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003492:	4a44      	ldr	r2, [pc, #272]	; (80035a4 <_ZN11DW1000Class16correctTimestampER10DW1000Time+0x29c>)
 8003494:	5cd3      	ldrb	r3, [r2, r3]
 8003496:	b21b      	sxth	r3, r3
 8003498:	833b      	strh	r3, [r7, #24]
 800349a:	e029      	b.n	80034f0 <_ZN11DW1000Class16correctTimestampER10DW1000Time+0x1e8>
		}
		else if (_pulseFrequency == TX_PULSE_FREQ_64MHZ)
 800349c:	4b3e      	ldr	r3, [pc, #248]	; (8003598 <_ZN11DW1000Class16correctTimestampER10DW1000Time+0x290>)
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d171      	bne.n	8003588 <_ZN11DW1000Class16correctTimestampER10DW1000Time+0x280>
		{
			rangeBiasHigh = (rxPowerBaseHigh < BIAS_500_64_ZERO ? -BIAS_500_64[rxPowerBaseHigh] : BIAS_500_64[rxPowerBaseHigh]);
 80034a4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80034a8:	2b07      	cmp	r3, #7
 80034aa:	dc08      	bgt.n	80034be <_ZN11DW1000Class16correctTimestampER10DW1000Time+0x1b6>
 80034ac:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80034b0:	4a3d      	ldr	r2, [pc, #244]	; (80035a8 <_ZN11DW1000Class16correctTimestampER10DW1000Time+0x2a0>)
 80034b2:	5cd3      	ldrb	r3, [r2, r3]
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	425b      	negs	r3, r3
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	b21b      	sxth	r3, r3
 80034bc:	e004      	b.n	80034c8 <_ZN11DW1000Class16correctTimestampER10DW1000Time+0x1c0>
 80034be:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80034c2:	4a39      	ldr	r2, [pc, #228]	; (80035a8 <_ZN11DW1000Class16correctTimestampER10DW1000Time+0x2a0>)
 80034c4:	5cd3      	ldrb	r3, [r2, r3]
 80034c6:	b21b      	sxth	r3, r3
 80034c8:	837b      	strh	r3, [r7, #26]
			rangeBiasLow = (rxPowerBaseLow < BIAS_500_64_ZERO ? -BIAS_500_64[rxPowerBaseLow] : BIAS_500_64[rxPowerBaseLow]);
 80034ca:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80034ce:	2b07      	cmp	r3, #7
 80034d0:	dc08      	bgt.n	80034e4 <_ZN11DW1000Class16correctTimestampER10DW1000Time+0x1dc>
 80034d2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80034d6:	4a34      	ldr	r2, [pc, #208]	; (80035a8 <_ZN11DW1000Class16correctTimestampER10DW1000Time+0x2a0>)
 80034d8:	5cd3      	ldrb	r3, [r2, r3]
 80034da:	b29b      	uxth	r3, r3
 80034dc:	425b      	negs	r3, r3
 80034de:	b29b      	uxth	r3, r3
 80034e0:	b21b      	sxth	r3, r3
 80034e2:	e004      	b.n	80034ee <_ZN11DW1000Class16correctTimestampER10DW1000Time+0x1e6>
 80034e4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80034e8:	4a2f      	ldr	r2, [pc, #188]	; (80035a8 <_ZN11DW1000Class16correctTimestampER10DW1000Time+0x2a0>)
 80034ea:	5cd3      	ldrb	r3, [r2, r3]
 80034ec:	b21b      	sxth	r3, r3
 80034ee:	833b      	strh	r3, [r7, #24]
			// TODO proper error handling
			return;
		}
	}
	// linear interpolation of bias values
	float rangeBias = rangeBiasLow + (rxPowerBase - rxPowerBaseLow) * (rangeBiasHigh - rangeBiasLow);
 80034f0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80034f4:	ee07 3a90 	vmov	s15, r3
 80034f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80034fc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003500:	ee07 3a90 	vmov	s15, r3
 8003504:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003508:	edd7 6a05 	vldr	s13, [r7, #20]
 800350c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003510:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8003514:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	ee07 3a90 	vmov	s15, r3
 800351e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003522:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003526:	ee77 7a27 	vadd.f32	s15, s14, s15
 800352a:	edc7 7a04 	vstr	s15, [r7, #16]
	// range bias [mm] to timestamp modification value conversion
	DW1000Time adjustmentTime;
 800352e:	f107 0308 	add.w	r3, r7, #8
 8003532:	4618      	mov	r0, r3
 8003534:	f002 ff0c 	bl	8006350 <_ZN10DW1000TimeC1Ev>
	adjustmentTime.setTimestamp((int16_t)(rangeBias * DW1000Time::DISTANCE_OF_RADIO_INV * 0.001f));
 8003538:	edd7 7a04 	vldr	s15, [r7, #16]
 800353c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80035ac <_ZN11DW1000Class16correctTimestampER10DW1000Time+0x2a4>
 8003540:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003544:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80035b0 <_ZN11DW1000Class16correctTimestampER10DW1000Time+0x2a8>
 8003548:	ee67 7a87 	vmul.f32	s15, s15, s14
 800354c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003550:	ee17 3a90 	vmov	r3, s15
 8003554:	b21b      	sxth	r3, r3
 8003556:	b21b      	sxth	r3, r3
 8003558:	17da      	asrs	r2, r3, #31
 800355a:	461c      	mov	r4, r3
 800355c:	4615      	mov	r5, r2
 800355e:	f107 0108 	add.w	r1, r7, #8
 8003562:	4622      	mov	r2, r4
 8003564:	462b      	mov	r3, r5
 8003566:	4608      	mov	r0, r1
 8003568:	f002 ff44 	bl	80063f4 <_ZN10DW1000Time12setTimestampEx>
	// apply correction
	timestamp -= adjustmentTime;
 800356c:	f107 0308 	add.w	r3, r7, #8
 8003570:	4619      	mov	r1, r3
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f003 f8aa 	bl	80066cc <_ZN10DW1000TimemIERKS_>
	DW1000Time adjustmentTime;
 8003578:	f107 0308 	add.w	r3, r7, #8
 800357c:	4618      	mov	r0, r3
 800357e:	f002 ff2e 	bl	80063de <_ZN10DW1000TimeD1Ev>
 8003582:	e002      	b.n	800358a <_ZN11DW1000Class16correctTimestampER10DW1000Time+0x282>
			return;
 8003584:	bf00      	nop
 8003586:	e000      	b.n	800358a <_ZN11DW1000Class16correctTimestampER10DW1000Time+0x282>
			return;
 8003588:	bf00      	nop
}
 800358a:	3720      	adds	r7, #32
 800358c:	46bd      	mov	sp, r7
 800358e:	bdb0      	pop	{r4, r5, r7, pc}
 8003590:	42740000 	.word	0x42740000
 8003594:	20000009 	.word	0x20000009
 8003598:	20000005 	.word	0x20000005
 800359c:	0800d21c 	.word	0x0800d21c
 80035a0:	0800d230 	.word	0x0800d230
 80035a4:	0800d1f4 	.word	0x0800d1f4
 80035a8:	0800d208 	.word	0x0800d208
 80035ac:	435523b3 	.word	0x435523b3
 80035b0:	3a83126f 	.word	0x3a83126f

080035b4 <_ZN11DW1000Class18getSystemTimestampER10DW1000Time>:

void DW1000Class::getSystemTimestamp(DW1000Time &time)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
	byte sysTimeBytes[LEN_SYS_TIME];
	readBytes(SYS_TIME, NO_SUB, sysTimeBytes, LEN_SYS_TIME);
 80035bc:	f107 0208 	add.w	r2, r7, #8
 80035c0:	2305      	movs	r3, #5
 80035c2:	2100      	movs	r1, #0
 80035c4:	2006      	movs	r0, #6
 80035c6:	f000 fd8c 	bl	80040e2 <_ZN11DW1000Class9readBytesEhtPht>
	time.setTimestamp(sysTimeBytes);
 80035ca:	f107 0308 	add.w	r3, r7, #8
 80035ce:	4619      	mov	r1, r3
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f002 ff20 	bl	8006416 <_ZN10DW1000Time12setTimestampEPh>
}
 80035d6:	bf00      	nop
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
	...

080035e0 <_ZN11DW1000Class11setDataRateEh>:




void DW1000Class::setDataRate(byte rate)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	4603      	mov	r3, r0
 80035e8:	71fb      	strb	r3, [r7, #7]
	rate &= 0x03;
 80035ea:	79fb      	ldrb	r3, [r7, #7]
 80035ec:	f003 0303 	and.w	r3, r3, #3
 80035f0:	71fb      	strb	r3, [r7, #7]
	_txfctrl[1] &= 0x83;
 80035f2:	4b3d      	ldr	r3, [pc, #244]	; (80036e8 <_ZN11DW1000Class11setDataRateEh+0x108>)
 80035f4:	785b      	ldrb	r3, [r3, #1]
 80035f6:	f023 037c 	bic.w	r3, r3, #124	; 0x7c
 80035fa:	b2da      	uxtb	r2, r3
 80035fc:	4b3a      	ldr	r3, [pc, #232]	; (80036e8 <_ZN11DW1000Class11setDataRateEh+0x108>)
 80035fe:	705a      	strb	r2, [r3, #1]
	_txfctrl[1] |= (byte)((rate << 5) & 0xFF);
 8003600:	4b39      	ldr	r3, [pc, #228]	; (80036e8 <_ZN11DW1000Class11setDataRateEh+0x108>)
 8003602:	785a      	ldrb	r2, [r3, #1]
 8003604:	79fb      	ldrb	r3, [r7, #7]
 8003606:	015b      	lsls	r3, r3, #5
 8003608:	b2db      	uxtb	r3, r3
 800360a:	4313      	orrs	r3, r2
 800360c:	b2da      	uxtb	r2, r3
 800360e:	4b36      	ldr	r3, [pc, #216]	; (80036e8 <_ZN11DW1000Class11setDataRateEh+0x108>)
 8003610:	705a      	strb	r2, [r3, #1]
	// special 110kbps flag
	if (rate == TRX_RATE_110KBPS)
 8003612:	79fb      	ldrb	r3, [r7, #7]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d106      	bne.n	8003626 <_ZN11DW1000Class11setDataRateEh+0x46>
	{
		setBit(_syscfg, LEN_SYS_CFG, RXM110K_BIT, true);
 8003618:	2301      	movs	r3, #1
 800361a:	2216      	movs	r2, #22
 800361c:	2104      	movs	r1, #4
 800361e:	4833      	ldr	r0, [pc, #204]	; (80036ec <_ZN11DW1000Class11setDataRateEh+0x10c>)
 8003620:	f000 fcd2 	bl	8003fc8 <_ZN11DW1000Class6setBitEPhttb>
 8003624:	e005      	b.n	8003632 <_ZN11DW1000Class11setDataRateEh+0x52>
	}
	else
	{
		setBit(_syscfg, LEN_SYS_CFG, RXM110K_BIT, false);
 8003626:	2300      	movs	r3, #0
 8003628:	2216      	movs	r2, #22
 800362a:	2104      	movs	r1, #4
 800362c:	482f      	ldr	r0, [pc, #188]	; (80036ec <_ZN11DW1000Class11setDataRateEh+0x10c>)
 800362e:	f000 fccb 	bl	8003fc8 <_ZN11DW1000Class6setBitEPhttb>
	}
	// SFD mode and type (non-configurable, as in Table )
	if (rate == TRX_RATE_6800KBPS)
 8003632:	79fb      	ldrb	r3, [r7, #7]
 8003634:	2b02      	cmp	r3, #2
 8003636:	d112      	bne.n	800365e <_ZN11DW1000Class11setDataRateEh+0x7e>
	{
		setBit(_chanctrl, LEN_CHAN_CTRL, DWSFD_BIT, false);
 8003638:	2300      	movs	r3, #0
 800363a:	2211      	movs	r2, #17
 800363c:	2104      	movs	r1, #4
 800363e:	482c      	ldr	r0, [pc, #176]	; (80036f0 <_ZN11DW1000Class11setDataRateEh+0x110>)
 8003640:	f000 fcc2 	bl	8003fc8 <_ZN11DW1000Class6setBitEPhttb>
		setBit(_chanctrl, LEN_CHAN_CTRL, TNSSFD_BIT, false);
 8003644:	2300      	movs	r3, #0
 8003646:	2214      	movs	r2, #20
 8003648:	2104      	movs	r1, #4
 800364a:	4829      	ldr	r0, [pc, #164]	; (80036f0 <_ZN11DW1000Class11setDataRateEh+0x110>)
 800364c:	f000 fcbc 	bl	8003fc8 <_ZN11DW1000Class6setBitEPhttb>
		setBit(_chanctrl, LEN_CHAN_CTRL, RNSSFD_BIT, false);
 8003650:	2300      	movs	r3, #0
 8003652:	2215      	movs	r2, #21
 8003654:	2104      	movs	r1, #4
 8003656:	4826      	ldr	r0, [pc, #152]	; (80036f0 <_ZN11DW1000Class11setDataRateEh+0x110>)
 8003658:	f000 fcb6 	bl	8003fc8 <_ZN11DW1000Class6setBitEPhttb>
 800365c:	e027      	b.n	80036ae <_ZN11DW1000Class11setDataRateEh+0xce>
	}
	else if (rate == TRX_RATE_850KBPS)
 800365e:	79fb      	ldrb	r3, [r7, #7]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d112      	bne.n	800368a <_ZN11DW1000Class11setDataRateEh+0xaa>
	{
		setBit(_chanctrl, LEN_CHAN_CTRL, DWSFD_BIT, true);
 8003664:	2301      	movs	r3, #1
 8003666:	2211      	movs	r2, #17
 8003668:	2104      	movs	r1, #4
 800366a:	4821      	ldr	r0, [pc, #132]	; (80036f0 <_ZN11DW1000Class11setDataRateEh+0x110>)
 800366c:	f000 fcac 	bl	8003fc8 <_ZN11DW1000Class6setBitEPhttb>
		setBit(_chanctrl, LEN_CHAN_CTRL, TNSSFD_BIT, true);
 8003670:	2301      	movs	r3, #1
 8003672:	2214      	movs	r2, #20
 8003674:	2104      	movs	r1, #4
 8003676:	481e      	ldr	r0, [pc, #120]	; (80036f0 <_ZN11DW1000Class11setDataRateEh+0x110>)
 8003678:	f000 fca6 	bl	8003fc8 <_ZN11DW1000Class6setBitEPhttb>
		setBit(_chanctrl, LEN_CHAN_CTRL, RNSSFD_BIT, true);
 800367c:	2301      	movs	r3, #1
 800367e:	2215      	movs	r2, #21
 8003680:	2104      	movs	r1, #4
 8003682:	481b      	ldr	r0, [pc, #108]	; (80036f0 <_ZN11DW1000Class11setDataRateEh+0x110>)
 8003684:	f000 fca0 	bl	8003fc8 <_ZN11DW1000Class6setBitEPhttb>
 8003688:	e011      	b.n	80036ae <_ZN11DW1000Class11setDataRateEh+0xce>
	}
	else
	{
		setBit(_chanctrl, LEN_CHAN_CTRL, DWSFD_BIT, true);
 800368a:	2301      	movs	r3, #1
 800368c:	2211      	movs	r2, #17
 800368e:	2104      	movs	r1, #4
 8003690:	4817      	ldr	r0, [pc, #92]	; (80036f0 <_ZN11DW1000Class11setDataRateEh+0x110>)
 8003692:	f000 fc99 	bl	8003fc8 <_ZN11DW1000Class6setBitEPhttb>
		setBit(_chanctrl, LEN_CHAN_CTRL, TNSSFD_BIT, false);
 8003696:	2300      	movs	r3, #0
 8003698:	2214      	movs	r2, #20
 800369a:	2104      	movs	r1, #4
 800369c:	4814      	ldr	r0, [pc, #80]	; (80036f0 <_ZN11DW1000Class11setDataRateEh+0x110>)
 800369e:	f000 fc93 	bl	8003fc8 <_ZN11DW1000Class6setBitEPhttb>
		setBit(_chanctrl, LEN_CHAN_CTRL, RNSSFD_BIT, false);
 80036a2:	2300      	movs	r3, #0
 80036a4:	2215      	movs	r2, #21
 80036a6:	2104      	movs	r1, #4
 80036a8:	4811      	ldr	r0, [pc, #68]	; (80036f0 <_ZN11DW1000Class11setDataRateEh+0x110>)
 80036aa:	f000 fc8d 	bl	8003fc8 <_ZN11DW1000Class6setBitEPhttb>
	}
	byte sfdLength;
	if (rate == TRX_RATE_6800KBPS)
 80036ae:	79fb      	ldrb	r3, [r7, #7]
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d102      	bne.n	80036ba <_ZN11DW1000Class11setDataRateEh+0xda>
	{
		sfdLength = 0x08;
 80036b4:	2308      	movs	r3, #8
 80036b6:	73fb      	strb	r3, [r7, #15]
 80036b8:	e007      	b.n	80036ca <_ZN11DW1000Class11setDataRateEh+0xea>
	}
	else if (rate == TRX_RATE_850KBPS)
 80036ba:	79fb      	ldrb	r3, [r7, #7]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d102      	bne.n	80036c6 <_ZN11DW1000Class11setDataRateEh+0xe6>
	{
		sfdLength = 0x10;
 80036c0:	2310      	movs	r3, #16
 80036c2:	73fb      	strb	r3, [r7, #15]
 80036c4:	e001      	b.n	80036ca <_ZN11DW1000Class11setDataRateEh+0xea>
	}
	else
	{
		sfdLength = 0x40;
 80036c6:	2340      	movs	r3, #64	; 0x40
 80036c8:	73fb      	strb	r3, [r7, #15]
	}
	writeBytes(USR_SFD, SFD_LENGTH_SUB, &sfdLength, LEN_SFD_LENGTH);
 80036ca:	f107 020f 	add.w	r2, r7, #15
 80036ce:	2301      	movs	r3, #1
 80036d0:	2100      	movs	r1, #0
 80036d2:	2021      	movs	r0, #33	; 0x21
 80036d4:	f000 fd63 	bl	800419e <_ZN11DW1000Class10writeBytesEhtPht>
	_dataRate = rate;
 80036d8:	4a06      	ldr	r2, [pc, #24]	; (80036f4 <_ZN11DW1000Class11setDataRateEh+0x114>)
 80036da:	79fb      	ldrb	r3, [r7, #7]
 80036dc:	7013      	strb	r3, [r2, #0]
}
 80036de:	bf00      	nop
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	20000294 	.word	0x20000294
 80036ec:	20000284 	.word	0x20000284
 80036f0:	200002a0 	.word	0x200002a0
 80036f4:	20000006 	.word	0x20000006

080036f8 <_ZN11DW1000Class17setPulseFrequencyEh>:

void DW1000Class::setPulseFrequency(byte freq)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	4603      	mov	r3, r0
 8003700:	71fb      	strb	r3, [r7, #7]
	freq &= 0x03;
 8003702:	79fb      	ldrb	r3, [r7, #7]
 8003704:	f003 0303 	and.w	r3, r3, #3
 8003708:	71fb      	strb	r3, [r7, #7]
	_txfctrl[2] &= 0xFC;
 800370a:	4b13      	ldr	r3, [pc, #76]	; (8003758 <_ZN11DW1000Class17setPulseFrequencyEh+0x60>)
 800370c:	789b      	ldrb	r3, [r3, #2]
 800370e:	f023 0303 	bic.w	r3, r3, #3
 8003712:	b2da      	uxtb	r2, r3
 8003714:	4b10      	ldr	r3, [pc, #64]	; (8003758 <_ZN11DW1000Class17setPulseFrequencyEh+0x60>)
 8003716:	709a      	strb	r2, [r3, #2]
	_txfctrl[2] |= (byte)(freq & 0xFF);
 8003718:	4b0f      	ldr	r3, [pc, #60]	; (8003758 <_ZN11DW1000Class17setPulseFrequencyEh+0x60>)
 800371a:	789a      	ldrb	r2, [r3, #2]
 800371c:	79fb      	ldrb	r3, [r7, #7]
 800371e:	4313      	orrs	r3, r2
 8003720:	b2da      	uxtb	r2, r3
 8003722:	4b0d      	ldr	r3, [pc, #52]	; (8003758 <_ZN11DW1000Class17setPulseFrequencyEh+0x60>)
 8003724:	709a      	strb	r2, [r3, #2]
	_chanctrl[2] &= 0xF3;
 8003726:	4b0d      	ldr	r3, [pc, #52]	; (800375c <_ZN11DW1000Class17setPulseFrequencyEh+0x64>)
 8003728:	789b      	ldrb	r3, [r3, #2]
 800372a:	f023 030c 	bic.w	r3, r3, #12
 800372e:	b2da      	uxtb	r2, r3
 8003730:	4b0a      	ldr	r3, [pc, #40]	; (800375c <_ZN11DW1000Class17setPulseFrequencyEh+0x64>)
 8003732:	709a      	strb	r2, [r3, #2]
	_chanctrl[2] |= (byte)((freq << 2) & 0xFF);
 8003734:	4b09      	ldr	r3, [pc, #36]	; (800375c <_ZN11DW1000Class17setPulseFrequencyEh+0x64>)
 8003736:	789a      	ldrb	r2, [r3, #2]
 8003738:	79fb      	ldrb	r3, [r7, #7]
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	b2db      	uxtb	r3, r3
 800373e:	4313      	orrs	r3, r2
 8003740:	b2da      	uxtb	r2, r3
 8003742:	4b06      	ldr	r3, [pc, #24]	; (800375c <_ZN11DW1000Class17setPulseFrequencyEh+0x64>)
 8003744:	709a      	strb	r2, [r3, #2]
	_pulseFrequency = freq;
 8003746:	4a06      	ldr	r2, [pc, #24]	; (8003760 <_ZN11DW1000Class17setPulseFrequencyEh+0x68>)
 8003748:	79fb      	ldrb	r3, [r7, #7]
 800374a:	7013      	strb	r3, [r2, #0]
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr
 8003758:	20000294 	.word	0x20000294
 800375c:	200002a0 	.word	0x200002a0
 8003760:	20000005 	.word	0x20000005

08003764 <_ZN11DW1000Class17getPulseFrequencyEv>:

byte DW1000Class::getPulseFrequency()
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
	return _pulseFrequency;
 8003768:	4b03      	ldr	r3, [pc, #12]	; (8003778 <_ZN11DW1000Class17getPulseFrequencyEv+0x14>)
 800376a:	781b      	ldrb	r3, [r3, #0]
}
 800376c:	4618      	mov	r0, r3
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	20000005 	.word	0x20000005

0800377c <_ZN11DW1000Class17setPreambleLengthEh>:

void DW1000Class::setPreambleLength(byte prealen)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	4603      	mov	r3, r0
 8003784:	71fb      	strb	r3, [r7, #7]
	prealen &= 0x0F;
 8003786:	79fb      	ldrb	r3, [r7, #7]
 8003788:	f003 030f 	and.w	r3, r3, #15
 800378c:	71fb      	strb	r3, [r7, #7]
	_txfctrl[2] &= 0xC3;
 800378e:	4b1b      	ldr	r3, [pc, #108]	; (80037fc <_ZN11DW1000Class17setPreambleLengthEh+0x80>)
 8003790:	789b      	ldrb	r3, [r3, #2]
 8003792:	f023 033c 	bic.w	r3, r3, #60	; 0x3c
 8003796:	b2da      	uxtb	r2, r3
 8003798:	4b18      	ldr	r3, [pc, #96]	; (80037fc <_ZN11DW1000Class17setPreambleLengthEh+0x80>)
 800379a:	709a      	strb	r2, [r3, #2]
	_txfctrl[2] |= (byte)((prealen << 2) & 0xFF);
 800379c:	4b17      	ldr	r3, [pc, #92]	; (80037fc <_ZN11DW1000Class17setPreambleLengthEh+0x80>)
 800379e:	789a      	ldrb	r2, [r3, #2]
 80037a0:	79fb      	ldrb	r3, [r7, #7]
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	4313      	orrs	r3, r2
 80037a8:	b2da      	uxtb	r2, r3
 80037aa:	4b14      	ldr	r3, [pc, #80]	; (80037fc <_ZN11DW1000Class17setPreambleLengthEh+0x80>)
 80037ac:	709a      	strb	r2, [r3, #2]
	if (prealen == TX_PREAMBLE_LEN_64 || prealen == TX_PREAMBLE_LEN_128)
 80037ae:	79fb      	ldrb	r3, [r7, #7]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d002      	beq.n	80037ba <_ZN11DW1000Class17setPreambleLengthEh+0x3e>
 80037b4:	79fb      	ldrb	r3, [r7, #7]
 80037b6:	2b05      	cmp	r3, #5
 80037b8:	d103      	bne.n	80037c2 <_ZN11DW1000Class17setPreambleLengthEh+0x46>
	{
		_pacSize = PAC_SIZE_8;
 80037ba:	4b11      	ldr	r3, [pc, #68]	; (8003800 <_ZN11DW1000Class17setPreambleLengthEh+0x84>)
 80037bc:	2208      	movs	r2, #8
 80037be:	701a      	strb	r2, [r3, #0]
 80037c0:	e013      	b.n	80037ea <_ZN11DW1000Class17setPreambleLengthEh+0x6e>
	}
	else if (prealen == TX_PREAMBLE_LEN_256 || prealen == TX_PREAMBLE_LEN_512)
 80037c2:	79fb      	ldrb	r3, [r7, #7]
 80037c4:	2b09      	cmp	r3, #9
 80037c6:	d002      	beq.n	80037ce <_ZN11DW1000Class17setPreambleLengthEh+0x52>
 80037c8:	79fb      	ldrb	r3, [r7, #7]
 80037ca:	2b0d      	cmp	r3, #13
 80037cc:	d103      	bne.n	80037d6 <_ZN11DW1000Class17setPreambleLengthEh+0x5a>
	{
		_pacSize = PAC_SIZE_16;
 80037ce:	4b0c      	ldr	r3, [pc, #48]	; (8003800 <_ZN11DW1000Class17setPreambleLengthEh+0x84>)
 80037d0:	2210      	movs	r2, #16
 80037d2:	701a      	strb	r2, [r3, #0]
 80037d4:	e009      	b.n	80037ea <_ZN11DW1000Class17setPreambleLengthEh+0x6e>
	}
	else if (prealen == TX_PREAMBLE_LEN_1024)
 80037d6:	79fb      	ldrb	r3, [r7, #7]
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d103      	bne.n	80037e4 <_ZN11DW1000Class17setPreambleLengthEh+0x68>
	{
		_pacSize = PAC_SIZE_32;
 80037dc:	4b08      	ldr	r3, [pc, #32]	; (8003800 <_ZN11DW1000Class17setPreambleLengthEh+0x84>)
 80037de:	2220      	movs	r2, #32
 80037e0:	701a      	strb	r2, [r3, #0]
 80037e2:	e002      	b.n	80037ea <_ZN11DW1000Class17setPreambleLengthEh+0x6e>
	}
	else
	{
		_pacSize = PAC_SIZE_64;
 80037e4:	4b06      	ldr	r3, [pc, #24]	; (8003800 <_ZN11DW1000Class17setPreambleLengthEh+0x84>)
 80037e6:	2240      	movs	r2, #64	; 0x40
 80037e8:	701a      	strb	r2, [r3, #0]
	}
	_preambleLength = prealen;
 80037ea:	4a06      	ldr	r2, [pc, #24]	; (8003804 <_ZN11DW1000Class17setPreambleLengthEh+0x88>)
 80037ec:	79fb      	ldrb	r3, [r7, #7]
 80037ee:	7013      	strb	r3, [r2, #0]
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr
 80037fc:	20000294 	.word	0x20000294
 8003800:	20000004 	.word	0x20000004
 8003804:	20000007 	.word	0x20000007

08003808 <_ZN11DW1000Class22useExtendedFrameLengthEb>:


void DW1000Class::useExtendedFrameLength(bool val)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	4603      	mov	r3, r0
 8003810:	71fb      	strb	r3, [r7, #7]
	_extendedFrameLength = (val ? FRAME_LENGTH_EXTENDED : FRAME_LENGTH_NORMAL);
 8003812:	79fb      	ldrb	r3, [r7, #7]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <_ZN11DW1000Class22useExtendedFrameLengthEb+0x14>
 8003818:	2203      	movs	r2, #3
 800381a:	e000      	b.n	800381e <_ZN11DW1000Class22useExtendedFrameLengthEb+0x16>
 800381c:	2200      	movs	r2, #0
 800381e:	4b0b      	ldr	r3, [pc, #44]	; (800384c <_ZN11DW1000Class22useExtendedFrameLengthEb+0x44>)
 8003820:	701a      	strb	r2, [r3, #0]
	_syscfg[2] &= 0xFC;
 8003822:	4b0b      	ldr	r3, [pc, #44]	; (8003850 <_ZN11DW1000Class22useExtendedFrameLengthEb+0x48>)
 8003824:	789b      	ldrb	r3, [r3, #2]
 8003826:	f023 0303 	bic.w	r3, r3, #3
 800382a:	b2da      	uxtb	r2, r3
 800382c:	4b08      	ldr	r3, [pc, #32]	; (8003850 <_ZN11DW1000Class22useExtendedFrameLengthEb+0x48>)
 800382e:	709a      	strb	r2, [r3, #2]
	_syscfg[2] |= _extendedFrameLength;
 8003830:	4b07      	ldr	r3, [pc, #28]	; (8003850 <_ZN11DW1000Class22useExtendedFrameLengthEb+0x48>)
 8003832:	789a      	ldrb	r2, [r3, #2]
 8003834:	4b05      	ldr	r3, [pc, #20]	; (800384c <_ZN11DW1000Class22useExtendedFrameLengthEb+0x44>)
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	4313      	orrs	r3, r2
 800383a:	b2da      	uxtb	r2, r3
 800383c:	4b04      	ldr	r3, [pc, #16]	; (8003850 <_ZN11DW1000Class22useExtendedFrameLengthEb+0x48>)
 800383e:	709a      	strb	r2, [r3, #2]
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	200002a8 	.word	0x200002a8
 8003850:	20000284 	.word	0x20000284

08003854 <_ZN11DW1000Class10setChannelEh>:

void DW1000Class::setChannel(byte channel)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	4603      	mov	r3, r0
 800385c:	71fb      	strb	r3, [r7, #7]
	channel &= 0xF;
 800385e:	79fb      	ldrb	r3, [r7, #7]
 8003860:	f003 030f 	and.w	r3, r3, #15
 8003864:	71fb      	strb	r3, [r7, #7]
	_chanctrl[0] = ((channel | (channel << 4)) & 0xFF);
 8003866:	79fb      	ldrb	r3, [r7, #7]
 8003868:	011b      	lsls	r3, r3, #4
 800386a:	b25a      	sxtb	r2, r3
 800386c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003870:	4313      	orrs	r3, r2
 8003872:	b25b      	sxtb	r3, r3
 8003874:	b2da      	uxtb	r2, r3
 8003876:	4b24      	ldr	r3, [pc, #144]	; (8003908 <_ZN11DW1000Class10setChannelEh+0xb4>)
 8003878:	701a      	strb	r2, [r3, #0]
	_channel = channel;
 800387a:	4a24      	ldr	r2, [pc, #144]	; (800390c <_ZN11DW1000Class10setChannelEh+0xb8>)
 800387c:	79fb      	ldrb	r3, [r7, #7]
 800387e:	7013      	strb	r3, [r2, #0]
	// Set preambleCode in based of CHANNEL. see chapter 10.5, table 61, dw1000 user manual
	if (_channel == CHANNEL_1)
 8003880:	4b22      	ldr	r3, [pc, #136]	; (800390c <_ZN11DW1000Class10setChannelEh+0xb8>)
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d10b      	bne.n	80038a0 <_ZN11DW1000Class10setChannelEh+0x4c>
	{
		if (_pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8003888:	4b21      	ldr	r3, [pc, #132]	; (8003910 <_ZN11DW1000Class10setChannelEh+0xbc>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d103      	bne.n	8003898 <_ZN11DW1000Class10setChannelEh+0x44>
		{
			setPreambleCode(PREAMBLE_CODE_16MHZ_2);
 8003890:	2002      	movs	r0, #2
 8003892:	f000 f83f 	bl	8003914 <_ZN11DW1000Class15setPreambleCodeEh>
	}
	else
	{
		setPreambleCode(PREAMBLE_CODE_64MHZ_10);
	}
}
 8003896:	e033      	b.n	8003900 <_ZN11DW1000Class10setChannelEh+0xac>
			setPreambleCode(PREAMBLE_CODE_64MHZ_10);
 8003898:	200a      	movs	r0, #10
 800389a:	f000 f83b 	bl	8003914 <_ZN11DW1000Class15setPreambleCodeEh>
}
 800389e:	e02f      	b.n	8003900 <_ZN11DW1000Class10setChannelEh+0xac>
	else if (_channel == CHANNEL_3)
 80038a0:	4b1a      	ldr	r3, [pc, #104]	; (800390c <_ZN11DW1000Class10setChannelEh+0xb8>)
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b03      	cmp	r3, #3
 80038a6:	d10b      	bne.n	80038c0 <_ZN11DW1000Class10setChannelEh+0x6c>
		if (_pulseFrequency == TX_PULSE_FREQ_16MHZ)
 80038a8:	4b19      	ldr	r3, [pc, #100]	; (8003910 <_ZN11DW1000Class10setChannelEh+0xbc>)
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d103      	bne.n	80038b8 <_ZN11DW1000Class10setChannelEh+0x64>
			setPreambleCode(PREAMBLE_CODE_16MHZ_6);
 80038b0:	2006      	movs	r0, #6
 80038b2:	f000 f82f 	bl	8003914 <_ZN11DW1000Class15setPreambleCodeEh>
}
 80038b6:	e023      	b.n	8003900 <_ZN11DW1000Class10setChannelEh+0xac>
			setPreambleCode(PREAMBLE_CODE_64MHZ_10);
 80038b8:	200a      	movs	r0, #10
 80038ba:	f000 f82b 	bl	8003914 <_ZN11DW1000Class15setPreambleCodeEh>
}
 80038be:	e01f      	b.n	8003900 <_ZN11DW1000Class10setChannelEh+0xac>
	else if (_channel == CHANNEL_4 || _channel == CHANNEL_7)
 80038c0:	4b12      	ldr	r3, [pc, #72]	; (800390c <_ZN11DW1000Class10setChannelEh+0xb8>)
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	2b04      	cmp	r3, #4
 80038c6:	d003      	beq.n	80038d0 <_ZN11DW1000Class10setChannelEh+0x7c>
 80038c8:	4b10      	ldr	r3, [pc, #64]	; (800390c <_ZN11DW1000Class10setChannelEh+0xb8>)
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	2b07      	cmp	r3, #7
 80038ce:	d10b      	bne.n	80038e8 <_ZN11DW1000Class10setChannelEh+0x94>
		if (_pulseFrequency == TX_PULSE_FREQ_16MHZ)
 80038d0:	4b0f      	ldr	r3, [pc, #60]	; (8003910 <_ZN11DW1000Class10setChannelEh+0xbc>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d103      	bne.n	80038e0 <_ZN11DW1000Class10setChannelEh+0x8c>
			setPreambleCode(PREAMBLE_CODE_16MHZ_8);
 80038d8:	2008      	movs	r0, #8
 80038da:	f000 f81b 	bl	8003914 <_ZN11DW1000Class15setPreambleCodeEh>
		if (_pulseFrequency == TX_PULSE_FREQ_16MHZ)
 80038de:	e00f      	b.n	8003900 <_ZN11DW1000Class10setChannelEh+0xac>
			setPreambleCode(PREAMBLE_CODE_64MHZ_18);
 80038e0:	2012      	movs	r0, #18
 80038e2:	f000 f817 	bl	8003914 <_ZN11DW1000Class15setPreambleCodeEh>
		if (_pulseFrequency == TX_PULSE_FREQ_16MHZ)
 80038e6:	e00b      	b.n	8003900 <_ZN11DW1000Class10setChannelEh+0xac>
	else if (_pulseFrequency == TX_PULSE_FREQ_16MHZ)
 80038e8:	4b09      	ldr	r3, [pc, #36]	; (8003910 <_ZN11DW1000Class10setChannelEh+0xbc>)
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d103      	bne.n	80038f8 <_ZN11DW1000Class10setChannelEh+0xa4>
		setPreambleCode(PREAMBLE_CODE_16MHZ_4);
 80038f0:	2004      	movs	r0, #4
 80038f2:	f000 f80f 	bl	8003914 <_ZN11DW1000Class15setPreambleCodeEh>
}
 80038f6:	e003      	b.n	8003900 <_ZN11DW1000Class10setChannelEh+0xac>
		setPreambleCode(PREAMBLE_CODE_64MHZ_10);
 80038f8:	200a      	movs	r0, #10
 80038fa:	f000 f80b 	bl	8003914 <_ZN11DW1000Class15setPreambleCodeEh>
}
 80038fe:	e7ff      	b.n	8003900 <_ZN11DW1000Class10setChannelEh+0xac>
 8003900:	bf00      	nop
 8003902:	3708      	adds	r7, #8
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	200002a0 	.word	0x200002a0
 800390c:	20000009 	.word	0x20000009
 8003910:	20000005 	.word	0x20000005

08003914 <_ZN11DW1000Class15setPreambleCodeEh>:

void DW1000Class::setPreambleCode(byte preacode)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	4603      	mov	r3, r0
 800391c:	71fb      	strb	r3, [r7, #7]
	preacode &= 0x1F;
 800391e:	79fb      	ldrb	r3, [r7, #7]
 8003920:	f003 031f 	and.w	r3, r3, #31
 8003924:	71fb      	strb	r3, [r7, #7]
	_chanctrl[2] &= 0x3F;
 8003926:	4b16      	ldr	r3, [pc, #88]	; (8003980 <_ZN11DW1000Class15setPreambleCodeEh+0x6c>)
 8003928:	789b      	ldrb	r3, [r3, #2]
 800392a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800392e:	b2da      	uxtb	r2, r3
 8003930:	4b13      	ldr	r3, [pc, #76]	; (8003980 <_ZN11DW1000Class15setPreambleCodeEh+0x6c>)
 8003932:	709a      	strb	r2, [r3, #2]
	_chanctrl[2] |= ((preacode << 6) & 0xFF);
 8003934:	4b12      	ldr	r3, [pc, #72]	; (8003980 <_ZN11DW1000Class15setPreambleCodeEh+0x6c>)
 8003936:	789b      	ldrb	r3, [r3, #2]
 8003938:	b25a      	sxtb	r2, r3
 800393a:	79fb      	ldrb	r3, [r7, #7]
 800393c:	019b      	lsls	r3, r3, #6
 800393e:	b25b      	sxtb	r3, r3
 8003940:	4313      	orrs	r3, r2
 8003942:	b25b      	sxtb	r3, r3
 8003944:	b2da      	uxtb	r2, r3
 8003946:	4b0e      	ldr	r3, [pc, #56]	; (8003980 <_ZN11DW1000Class15setPreambleCodeEh+0x6c>)
 8003948:	709a      	strb	r2, [r3, #2]
	_chanctrl[3] = 0x00;
 800394a:	4b0d      	ldr	r3, [pc, #52]	; (8003980 <_ZN11DW1000Class15setPreambleCodeEh+0x6c>)
 800394c:	2200      	movs	r2, #0
 800394e:	70da      	strb	r2, [r3, #3]
	_chanctrl[3] = ((((preacode >> 2) & 0x07) | (preacode << 3)) & 0xFF);
 8003950:	79fb      	ldrb	r3, [r7, #7]
 8003952:	089b      	lsrs	r3, r3, #2
 8003954:	b2db      	uxtb	r3, r3
 8003956:	b25b      	sxtb	r3, r3
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	b25a      	sxtb	r2, r3
 800395e:	79fb      	ldrb	r3, [r7, #7]
 8003960:	00db      	lsls	r3, r3, #3
 8003962:	b25b      	sxtb	r3, r3
 8003964:	4313      	orrs	r3, r2
 8003966:	b25b      	sxtb	r3, r3
 8003968:	b2da      	uxtb	r2, r3
 800396a:	4b05      	ldr	r3, [pc, #20]	; (8003980 <_ZN11DW1000Class15setPreambleCodeEh+0x6c>)
 800396c:	70da      	strb	r2, [r3, #3]
	_preambleCode = preacode;
 800396e:	4a05      	ldr	r2, [pc, #20]	; (8003984 <_ZN11DW1000Class15setPreambleCodeEh+0x70>)
 8003970:	79fb      	ldrb	r3, [r7, #7]
 8003972:	7013      	strb	r3, [r2, #0]
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr
 8003980:	200002a0 	.word	0x200002a0
 8003984:	20000008 	.word	0x20000008

08003988 <_ZN11DW1000Class11setDefaultsEv>:

void DW1000Class::setDefaults()
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
	if (_deviceMode == TX_MODE)
 800398c:	4b21      	ldr	r3, [pc, #132]	; (8003a14 <_ZN11DW1000Class11setDefaultsEv+0x8c>)
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	2b02      	cmp	r3, #2
 8003992:	d03c      	beq.n	8003a0e <_ZN11DW1000Class11setDefaultsEv+0x86>
	{
	}
	else if (_deviceMode == RX_MODE)
 8003994:	4b1f      	ldr	r3, [pc, #124]	; (8003a14 <_ZN11DW1000Class11setDefaultsEv+0x8c>)
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d038      	beq.n	8003a0e <_ZN11DW1000Class11setDefaultsEv+0x86>
	{
	}
	else if (_deviceMode == IDLE_MODE)
 800399c:	4b1d      	ldr	r3, [pc, #116]	; (8003a14 <_ZN11DW1000Class11setDefaultsEv+0x8c>)
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d134      	bne.n	8003a0e <_ZN11DW1000Class11setDefaultsEv+0x86>
	{
		useExtendedFrameLength(false);
 80039a4:	2000      	movs	r0, #0
 80039a6:	f7ff ff2f 	bl	8003808 <_ZN11DW1000Class22useExtendedFrameLengthEb>
		useSmartPower(false);
 80039aa:	2000      	movs	r0, #0
 80039ac:	f7ff fb8e 	bl	80030cc <_ZN11DW1000Class13useSmartPowerEb>
		suppressFrameCheck(false);
 80039b0:	2000      	movs	r0, #0
 80039b2:	f7ff fb77 	bl	80030a4 <_ZN11DW1000Class18suppressFrameCheckEb>
		// for global frame filtering
		setFrameFilter(false);
 80039b6:	2000      	movs	r0, #0
 80039b8:	f7ff f9ea 	bl	8002d90 <_ZN11DW1000Class14setFrameFilterEb>

		interruptOnSent(true);
 80039bc:	2001      	movs	r0, #1
 80039be:	f7ff fa0b 	bl	8002dd8 <_ZN11DW1000Class15interruptOnSentEb>
		interruptOnReceived(true);
 80039c2:	2001      	movs	r0, #1
 80039c4:	f7ff fa1a 	bl	8002dfc <_ZN11DW1000Class19interruptOnReceivedEb>
		interruptOnReceiveFailed(true);
 80039c8:	2001      	movs	r0, #1
 80039ca:	f7ff fa2f 	bl	8002e2c <_ZN11DW1000Class24interruptOnReceiveFailedEb>
		interruptOnReceiveTimestampAvailable(false);
 80039ce:	2000      	movs	r0, #0
 80039d0:	f7ff fa50 	bl	8002e74 <_ZN11DW1000Class36interruptOnReceiveTimestampAvailableEb>
		interruptOnAutomaticAcknowledgeTrigger(true);
 80039d4:	2001      	movs	r0, #1
 80039d6:	f7ff fa5f 	bl	8002e98 <_ZN11DW1000Class38interruptOnAutomaticAcknowledgeTriggerEb>
		setReceiverAutoReenable(true);
 80039da:	2001      	movs	r0, #1
 80039dc:	f7ff f9ea 	bl	8002db4 <_ZN11DW1000Class23setReceiverAutoReenableEb>
		// default mode when powering up the chip
		// still explicitly selected for later tuning
		enableMode(MODE_LONGDATA_RANGE_LOWPOWER);
 80039e0:	480d      	ldr	r0, [pc, #52]	; (8003a18 <_ZN11DW1000Class11setDefaultsEv+0x90>)
 80039e2:	f7fe fa33 	bl	8001e4c <_ZN11DW1000Class10enableModeEPKh>

		// TODO add channel and code to mode tuples
		// TODO add channel and code settings with checks (see DW1000 user manual 10.5 table 61)/
		setChannel(CHANNEL_5);
 80039e6:	2005      	movs	r0, #5
 80039e8:	f7ff ff34 	bl	8003854 <_ZN11DW1000Class10setChannelEh>
		if (getPulseFrequency() == TX_PULSE_FREQ_16MHZ)
 80039ec:	f7ff feba 	bl	8003764 <_ZN11DW1000Class17getPulseFrequencyEv>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	bf0c      	ite	eq
 80039f6:	2301      	moveq	r3, #1
 80039f8:	2300      	movne	r3, #0
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d003      	beq.n	8003a08 <_ZN11DW1000Class11setDefaultsEv+0x80>
		{
			setPreambleCode(PREAMBLE_CODE_16MHZ_4);
 8003a00:	2004      	movs	r0, #4
 8003a02:	f7ff ff87 	bl	8003914 <_ZN11DW1000Class15setPreambleCodeEh>
		else
		{
			setPreambleCode(PREAMBLE_CODE_64MHZ_10);
		}
	}
}
 8003a06:	e002      	b.n	8003a0e <_ZN11DW1000Class11setDefaultsEv+0x86>
			setPreambleCode(PREAMBLE_CODE_64MHZ_10);
 8003a08:	200a      	movs	r0, #10
 8003a0a:	f7ff ff83 	bl	8003914 <_ZN11DW1000Class15setPreambleCodeEh>
}
 8003a0e:	bf00      	nop
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	200002bb 	.word	0x200002bb
 8003a18:	0800d1f0 	.word	0x0800d1f0

08003a1c <_ZN11DW1000Class14isTransmitDoneEv>:

bool DW1000Class::isTransmitDone()
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
	return getBit(_sysstatus, LEN_SYS_STATUS, TXFRS_BIT);
 8003a20:	2207      	movs	r2, #7
 8003a22:	2105      	movs	r1, #5
 8003a24:	4802      	ldr	r0, [pc, #8]	; (8003a30 <_ZN11DW1000Class14isTransmitDoneEv+0x14>)
 8003a26:	f000 fb0f 	bl	8004048 <_ZN11DW1000Class6getBitEPhtt>
 8003a2a:	4603      	mov	r3, r0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	2000028c 	.word	0x2000028c

08003a34 <_ZN11DW1000Class27isReceiveTimestampAvailableEv>:

bool DW1000Class::isReceiveTimestampAvailable()
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
	return getBit(_sysstatus, LEN_SYS_STATUS, LDEDONE_BIT);
 8003a38:	220a      	movs	r2, #10
 8003a3a:	2105      	movs	r1, #5
 8003a3c:	4802      	ldr	r0, [pc, #8]	; (8003a48 <_ZN11DW1000Class27isReceiveTimestampAvailableEv+0x14>)
 8003a3e:	f000 fb03 	bl	8004048 <_ZN11DW1000Class6getBitEPhtt>
 8003a42:	4603      	mov	r3, r0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	2000028c 	.word	0x2000028c

08003a4c <_ZN11DW1000Class13isReceiveDoneEv>:

bool DW1000Class::isReceiveDone()
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
	if (_frameCheck)
 8003a50:	4b09      	ldr	r3, [pc, #36]	; (8003a78 <_ZN11DW1000Class13isReceiveDoneEv+0x2c>)
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d006      	beq.n	8003a66 <_ZN11DW1000Class13isReceiveDoneEv+0x1a>
	{
		return getBit(_sysstatus, LEN_SYS_STATUS, RXFCG_BIT);
 8003a58:	220e      	movs	r2, #14
 8003a5a:	2105      	movs	r1, #5
 8003a5c:	4807      	ldr	r0, [pc, #28]	; (8003a7c <_ZN11DW1000Class13isReceiveDoneEv+0x30>)
 8003a5e:	f000 faf3 	bl	8004048 <_ZN11DW1000Class6getBitEPhtt>
 8003a62:	4603      	mov	r3, r0
 8003a64:	e006      	b.n	8003a74 <_ZN11DW1000Class13isReceiveDoneEv+0x28>
	}
	return getBit(_sysstatus, LEN_SYS_STATUS, RXDFR_BIT);
 8003a66:	220d      	movs	r2, #13
 8003a68:	2105      	movs	r1, #5
 8003a6a:	4804      	ldr	r0, [pc, #16]	; (8003a7c <_ZN11DW1000Class13isReceiveDoneEv+0x30>)
 8003a6c:	f000 faec 	bl	8004048 <_ZN11DW1000Class6getBitEPhtt>
 8003a70:	4603      	mov	r3, r0
 8003a72:	bf00      	nop
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	2000000a 	.word	0x2000000a
 8003a7c:	2000028c 	.word	0x2000028c

08003a80 <_ZN11DW1000Class15isReceiveFailedEv>:

bool DW1000Class::isReceiveFailed()
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
	bool ldeErr, rxCRCErr, rxHeaderErr, rxDecodeErr;
	ldeErr = getBit(_sysstatus, LEN_SYS_STATUS, LDEERR_BIT);
 8003a86:	2212      	movs	r2, #18
 8003a88:	2105      	movs	r1, #5
 8003a8a:	4816      	ldr	r0, [pc, #88]	; (8003ae4 <_ZN11DW1000Class15isReceiveFailedEv+0x64>)
 8003a8c:	f000 fadc 	bl	8004048 <_ZN11DW1000Class6getBitEPhtt>
 8003a90:	4603      	mov	r3, r0
 8003a92:	71fb      	strb	r3, [r7, #7]
	rxCRCErr = getBit(_sysstatus, LEN_SYS_STATUS, RXFCE_BIT);
 8003a94:	220f      	movs	r2, #15
 8003a96:	2105      	movs	r1, #5
 8003a98:	4812      	ldr	r0, [pc, #72]	; (8003ae4 <_ZN11DW1000Class15isReceiveFailedEv+0x64>)
 8003a9a:	f000 fad5 	bl	8004048 <_ZN11DW1000Class6getBitEPhtt>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	71bb      	strb	r3, [r7, #6]
	rxHeaderErr = getBit(_sysstatus, LEN_SYS_STATUS, RXPHE_BIT);
 8003aa2:	220c      	movs	r2, #12
 8003aa4:	2105      	movs	r1, #5
 8003aa6:	480f      	ldr	r0, [pc, #60]	; (8003ae4 <_ZN11DW1000Class15isReceiveFailedEv+0x64>)
 8003aa8:	f000 face 	bl	8004048 <_ZN11DW1000Class6getBitEPhtt>
 8003aac:	4603      	mov	r3, r0
 8003aae:	717b      	strb	r3, [r7, #5]
	rxDecodeErr = getBit(_sysstatus, LEN_SYS_STATUS, RXRFSL_BIT);
 8003ab0:	2210      	movs	r2, #16
 8003ab2:	2105      	movs	r1, #5
 8003ab4:	480b      	ldr	r0, [pc, #44]	; (8003ae4 <_ZN11DW1000Class15isReceiveFailedEv+0x64>)
 8003ab6:	f000 fac7 	bl	8004048 <_ZN11DW1000Class6getBitEPhtt>
 8003aba:	4603      	mov	r3, r0
 8003abc:	713b      	strb	r3, [r7, #4]
	if (ldeErr || rxCRCErr || rxHeaderErr || rxDecodeErr)
 8003abe:	79fb      	ldrb	r3, [r7, #7]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d108      	bne.n	8003ad6 <_ZN11DW1000Class15isReceiveFailedEv+0x56>
 8003ac4:	79bb      	ldrb	r3, [r7, #6]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d105      	bne.n	8003ad6 <_ZN11DW1000Class15isReceiveFailedEv+0x56>
 8003aca:	797b      	ldrb	r3, [r7, #5]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d102      	bne.n	8003ad6 <_ZN11DW1000Class15isReceiveFailedEv+0x56>
 8003ad0:	793b      	ldrb	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <_ZN11DW1000Class15isReceiveFailedEv+0x5a>
	{
		return true;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e000      	b.n	8003adc <_ZN11DW1000Class15isReceiveFailedEv+0x5c>
	}
	return false;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3708      	adds	r7, #8
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	2000028c 	.word	0x2000028c

08003ae8 <_ZN11DW1000Class16isReceiveTimeoutEv>:

// Checks to see any of the three timeout bits in sysstatus are high (RXRFTO (Frame Wait timeout), RXPTO (Preamble timeout), RXSFDTO (Start frame delimiter(?) timeout).
bool DW1000Class::isReceiveTimeout()
{
 8003ae8:	b598      	push	{r3, r4, r7, lr}
 8003aea:	af00      	add	r7, sp, #0
	return (getBit(_sysstatus, LEN_SYS_STATUS, RXRFTO_BIT) | getBit(_sysstatus, LEN_SYS_STATUS, RXPTO_BIT) | getBit(_sysstatus, LEN_SYS_STATUS, RXSFDTO_BIT));
 8003aec:	2211      	movs	r2, #17
 8003aee:	2105      	movs	r1, #5
 8003af0:	480d      	ldr	r0, [pc, #52]	; (8003b28 <_ZN11DW1000Class16isReceiveTimeoutEv+0x40>)
 8003af2:	f000 faa9 	bl	8004048 <_ZN11DW1000Class6getBitEPhtt>
 8003af6:	4603      	mov	r3, r0
 8003af8:	461c      	mov	r4, r3
 8003afa:	2215      	movs	r2, #21
 8003afc:	2105      	movs	r1, #5
 8003afe:	480a      	ldr	r0, [pc, #40]	; (8003b28 <_ZN11DW1000Class16isReceiveTimeoutEv+0x40>)
 8003b00:	f000 faa2 	bl	8004048 <_ZN11DW1000Class6getBitEPhtt>
 8003b04:	4603      	mov	r3, r0
 8003b06:	4323      	orrs	r3, r4
 8003b08:	b2dc      	uxtb	r4, r3
 8003b0a:	221a      	movs	r2, #26
 8003b0c:	2105      	movs	r1, #5
 8003b0e:	4806      	ldr	r0, [pc, #24]	; (8003b28 <_ZN11DW1000Class16isReceiveTimeoutEv+0x40>)
 8003b10:	f000 fa9a 	bl	8004048 <_ZN11DW1000Class6getBitEPhtt>
 8003b14:	4603      	mov	r3, r0
 8003b16:	4323      	orrs	r3, r4
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	bf14      	ite	ne
 8003b1e:	2301      	movne	r3, #1
 8003b20:	2300      	moveq	r3, #0
 8003b22:	b2db      	uxtb	r3, r3
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	bd98      	pop	{r3, r4, r7, pc}
 8003b28:	2000028c 	.word	0x2000028c

08003b2c <_ZN11DW1000Class14isClockProblemEv>:

bool DW1000Class::isClockProblem()
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
	bool clkllErr, rfllErr;
	clkllErr = getBit(_sysstatus, LEN_SYS_STATUS, CLKPLL_LL_BIT);
 8003b32:	2219      	movs	r2, #25
 8003b34:	2105      	movs	r1, #5
 8003b36:	480c      	ldr	r0, [pc, #48]	; (8003b68 <_ZN11DW1000Class14isClockProblemEv+0x3c>)
 8003b38:	f000 fa86 	bl	8004048 <_ZN11DW1000Class6getBitEPhtt>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	71fb      	strb	r3, [r7, #7]
	rfllErr = getBit(_sysstatus, LEN_SYS_STATUS, RFPLL_LL_BIT);
 8003b40:	2218      	movs	r2, #24
 8003b42:	2105      	movs	r1, #5
 8003b44:	4808      	ldr	r0, [pc, #32]	; (8003b68 <_ZN11DW1000Class14isClockProblemEv+0x3c>)
 8003b46:	f000 fa7f 	bl	8004048 <_ZN11DW1000Class6getBitEPhtt>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	71bb      	strb	r3, [r7, #6]
	if (clkllErr || rfllErr)
 8003b4e:	79fb      	ldrb	r3, [r7, #7]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d102      	bne.n	8003b5a <_ZN11DW1000Class14isClockProblemEv+0x2e>
 8003b54:	79bb      	ldrb	r3, [r7, #6]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <_ZN11DW1000Class14isClockProblemEv+0x32>
	{
		return true;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e000      	b.n	8003b60 <_ZN11DW1000Class14isClockProblemEv+0x34>
	}
	return false;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3708      	adds	r7, #8
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	2000028c 	.word	0x2000028c

08003b6c <_ZN11DW1000Class14clearAllStatusEv>:
{
	memset(_sysmask, 0, LEN_SYS_MASK);
}

void DW1000Class::clearAllStatus()
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	af00      	add	r7, sp, #0
	// Latched bits in status register are reset by writing 1 to them
	memset(_sysstatus, 0xff, LEN_SYS_STATUS);
 8003b70:	2205      	movs	r2, #5
 8003b72:	21ff      	movs	r1, #255	; 0xff
 8003b74:	4805      	ldr	r0, [pc, #20]	; (8003b8c <_ZN11DW1000Class14clearAllStatusEv+0x20>)
 8003b76:	f006 fb5f 	bl	800a238 <memset>
	writeBytes(SYS_STATUS, NO_SUB, _sysstatus, LEN_SYS_STATUS);
 8003b7a:	2305      	movs	r3, #5
 8003b7c:	4a03      	ldr	r2, [pc, #12]	; (8003b8c <_ZN11DW1000Class14clearAllStatusEv+0x20>)
 8003b7e:	2100      	movs	r1, #0
 8003b80:	200f      	movs	r0, #15
 8003b82:	f000 fb0c 	bl	800419e <_ZN11DW1000Class10writeBytesEhtPht>
}
 8003b86:	bf00      	nop
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	2000028c 	.word	0x2000028c

08003b90 <_ZN11DW1000Class36clearReceiveTimestampAvailableStatusEv>:

void DW1000Class::clearReceiveTimestampAvailableStatus()
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
	setBit(_sysstatus, LEN_SYS_STATUS, LDEDONE_BIT, true);
 8003b94:	2301      	movs	r3, #1
 8003b96:	220a      	movs	r2, #10
 8003b98:	2105      	movs	r1, #5
 8003b9a:	4805      	ldr	r0, [pc, #20]	; (8003bb0 <_ZN11DW1000Class36clearReceiveTimestampAvailableStatusEv+0x20>)
 8003b9c:	f000 fa14 	bl	8003fc8 <_ZN11DW1000Class6setBitEPhttb>
	writeBytes(SYS_STATUS, NO_SUB, _sysstatus, LEN_SYS_STATUS);
 8003ba0:	2305      	movs	r3, #5
 8003ba2:	4a03      	ldr	r2, [pc, #12]	; (8003bb0 <_ZN11DW1000Class36clearReceiveTimestampAvailableStatusEv+0x20>)
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	200f      	movs	r0, #15
 8003ba8:	f000 faf9 	bl	800419e <_ZN11DW1000Class10writeBytesEhtPht>
}
 8003bac:	bf00      	nop
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	2000028c 	.word	0x2000028c

08003bb4 <_ZN11DW1000Class18clearReceiveStatusEv>:

void DW1000Class::clearReceiveStatus()
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
	// clear latched RX bits (i.e. write 1 to clear)
	setBit(_sysstatus, LEN_SYS_STATUS, RXDFR_BIT, true);
 8003bb8:	2301      	movs	r3, #1
 8003bba:	220d      	movs	r2, #13
 8003bbc:	2105      	movs	r1, #5
 8003bbe:	4817      	ldr	r0, [pc, #92]	; (8003c1c <_ZN11DW1000Class18clearReceiveStatusEv+0x68>)
 8003bc0:	f000 fa02 	bl	8003fc8 <_ZN11DW1000Class6setBitEPhttb>
	setBit(_sysstatus, LEN_SYS_STATUS, LDEDONE_BIT, true);
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	220a      	movs	r2, #10
 8003bc8:	2105      	movs	r1, #5
 8003bca:	4814      	ldr	r0, [pc, #80]	; (8003c1c <_ZN11DW1000Class18clearReceiveStatusEv+0x68>)
 8003bcc:	f000 f9fc 	bl	8003fc8 <_ZN11DW1000Class6setBitEPhttb>
	setBit(_sysstatus, LEN_SYS_STATUS, LDEERR_BIT, true);
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	2212      	movs	r2, #18
 8003bd4:	2105      	movs	r1, #5
 8003bd6:	4811      	ldr	r0, [pc, #68]	; (8003c1c <_ZN11DW1000Class18clearReceiveStatusEv+0x68>)
 8003bd8:	f000 f9f6 	bl	8003fc8 <_ZN11DW1000Class6setBitEPhttb>
	setBit(_sysstatus, LEN_SYS_STATUS, RXPHE_BIT, true);
 8003bdc:	2301      	movs	r3, #1
 8003bde:	220c      	movs	r2, #12
 8003be0:	2105      	movs	r1, #5
 8003be2:	480e      	ldr	r0, [pc, #56]	; (8003c1c <_ZN11DW1000Class18clearReceiveStatusEv+0x68>)
 8003be4:	f000 f9f0 	bl	8003fc8 <_ZN11DW1000Class6setBitEPhttb>
	setBit(_sysstatus, LEN_SYS_STATUS, RXFCE_BIT, true);
 8003be8:	2301      	movs	r3, #1
 8003bea:	220f      	movs	r2, #15
 8003bec:	2105      	movs	r1, #5
 8003bee:	480b      	ldr	r0, [pc, #44]	; (8003c1c <_ZN11DW1000Class18clearReceiveStatusEv+0x68>)
 8003bf0:	f000 f9ea 	bl	8003fc8 <_ZN11DW1000Class6setBitEPhttb>
	setBit(_sysstatus, LEN_SYS_STATUS, RXFCG_BIT, true);
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	220e      	movs	r2, #14
 8003bf8:	2105      	movs	r1, #5
 8003bfa:	4808      	ldr	r0, [pc, #32]	; (8003c1c <_ZN11DW1000Class18clearReceiveStatusEv+0x68>)
 8003bfc:	f000 f9e4 	bl	8003fc8 <_ZN11DW1000Class6setBitEPhttb>
	setBit(_sysstatus, LEN_SYS_STATUS, RXRFSL_BIT, true);
 8003c00:	2301      	movs	r3, #1
 8003c02:	2210      	movs	r2, #16
 8003c04:	2105      	movs	r1, #5
 8003c06:	4805      	ldr	r0, [pc, #20]	; (8003c1c <_ZN11DW1000Class18clearReceiveStatusEv+0x68>)
 8003c08:	f000 f9de 	bl	8003fc8 <_ZN11DW1000Class6setBitEPhttb>
	writeBytes(SYS_STATUS, NO_SUB, _sysstatus, LEN_SYS_STATUS);
 8003c0c:	2305      	movs	r3, #5
 8003c0e:	4a03      	ldr	r2, [pc, #12]	; (8003c1c <_ZN11DW1000Class18clearReceiveStatusEv+0x68>)
 8003c10:	2100      	movs	r1, #0
 8003c12:	200f      	movs	r0, #15
 8003c14:	f000 fac3 	bl	800419e <_ZN11DW1000Class10writeBytesEhtPht>
}
 8003c18:	bf00      	nop
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	2000028c 	.word	0x2000028c

08003c20 <_ZN11DW1000Class19clearTransmitStatusEv>:

void DW1000Class::clearTransmitStatus()
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
	// clear latched TX bits
	setBit(_sysstatus, LEN_SYS_STATUS, TXFRB_BIT, true);
 8003c24:	2301      	movs	r3, #1
 8003c26:	2204      	movs	r2, #4
 8003c28:	2105      	movs	r1, #5
 8003c2a:	480e      	ldr	r0, [pc, #56]	; (8003c64 <_ZN11DW1000Class19clearTransmitStatusEv+0x44>)
 8003c2c:	f000 f9cc 	bl	8003fc8 <_ZN11DW1000Class6setBitEPhttb>
	setBit(_sysstatus, LEN_SYS_STATUS, TXPRS_BIT, true);
 8003c30:	2301      	movs	r3, #1
 8003c32:	2205      	movs	r2, #5
 8003c34:	2105      	movs	r1, #5
 8003c36:	480b      	ldr	r0, [pc, #44]	; (8003c64 <_ZN11DW1000Class19clearTransmitStatusEv+0x44>)
 8003c38:	f000 f9c6 	bl	8003fc8 <_ZN11DW1000Class6setBitEPhttb>
	setBit(_sysstatus, LEN_SYS_STATUS, TXPHS_BIT, true);
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	2206      	movs	r2, #6
 8003c40:	2105      	movs	r1, #5
 8003c42:	4808      	ldr	r0, [pc, #32]	; (8003c64 <_ZN11DW1000Class19clearTransmitStatusEv+0x44>)
 8003c44:	f000 f9c0 	bl	8003fc8 <_ZN11DW1000Class6setBitEPhttb>
	setBit(_sysstatus, LEN_SYS_STATUS, TXFRS_BIT, true);
 8003c48:	2301      	movs	r3, #1
 8003c4a:	2207      	movs	r2, #7
 8003c4c:	2105      	movs	r1, #5
 8003c4e:	4805      	ldr	r0, [pc, #20]	; (8003c64 <_ZN11DW1000Class19clearTransmitStatusEv+0x44>)
 8003c50:	f000 f9ba 	bl	8003fc8 <_ZN11DW1000Class6setBitEPhttb>
	writeBytes(SYS_STATUS, NO_SUB, _sysstatus, LEN_SYS_STATUS);
 8003c54:	2305      	movs	r3, #5
 8003c56:	4a03      	ldr	r2, [pc, #12]	; (8003c64 <_ZN11DW1000Class19clearTransmitStatusEv+0x44>)
 8003c58:	2100      	movs	r1, #0
 8003c5a:	200f      	movs	r0, #15
 8003c5c:	f000 fa9f 	bl	800419e <_ZN11DW1000Class10writeBytesEhtPht>
}
 8003c60:	bf00      	nop
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	2000028c 	.word	0x2000028c

08003c68 <_ZN11DW1000Class17getReceiveQualityEv>:

float DW1000Class::getReceiveQuality()
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
	byte noiseBytes[LEN_STD_NOISE];
	byte fpAmpl2Bytes[LEN_FP_AMPL2];
	uint16_t noise, f2;
	readBytes(RX_FQUAL, STD_NOISE_SUB, noiseBytes, LEN_STD_NOISE);
 8003c6e:	f107 0208 	add.w	r2, r7, #8
 8003c72:	2302      	movs	r3, #2
 8003c74:	2100      	movs	r1, #0
 8003c76:	2012      	movs	r0, #18
 8003c78:	f000 fa33 	bl	80040e2 <_ZN11DW1000Class9readBytesEhtPht>
	readBytes(RX_FQUAL, FP_AMPL2_SUB, fpAmpl2Bytes, LEN_FP_AMPL2);
 8003c7c:	1d3a      	adds	r2, r7, #4
 8003c7e:	2302      	movs	r3, #2
 8003c80:	2102      	movs	r1, #2
 8003c82:	2012      	movs	r0, #18
 8003c84:	f000 fa2d 	bl	80040e2 <_ZN11DW1000Class9readBytesEhtPht>
	noise = (uint16_t)noiseBytes[0] | ((uint16_t)noiseBytes[1] << 8);
 8003c88:	7a3b      	ldrb	r3, [r7, #8]
 8003c8a:	b21a      	sxth	r2, r3
 8003c8c:	7a7b      	ldrb	r3, [r7, #9]
 8003c8e:	021b      	lsls	r3, r3, #8
 8003c90:	b21b      	sxth	r3, r3
 8003c92:	4313      	orrs	r3, r2
 8003c94:	b21b      	sxth	r3, r3
 8003c96:	81fb      	strh	r3, [r7, #14]
	f2 = (uint16_t)fpAmpl2Bytes[0] | ((uint16_t)fpAmpl2Bytes[1] << 8);
 8003c98:	793b      	ldrb	r3, [r7, #4]
 8003c9a:	b21a      	sxth	r2, r3
 8003c9c:	797b      	ldrb	r3, [r7, #5]
 8003c9e:	021b      	lsls	r3, r3, #8
 8003ca0:	b21b      	sxth	r3, r3
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	b21b      	sxth	r3, r3
 8003ca6:	81bb      	strh	r3, [r7, #12]
	return (float)f2 / noise;
 8003ca8:	89bb      	ldrh	r3, [r7, #12]
 8003caa:	ee07 3a90 	vmov	s15, r3
 8003cae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003cb2:	89fb      	ldrh	r3, [r7, #14]
 8003cb4:	ee07 3a90 	vmov	s15, r3
 8003cb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cbc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003cc0:	eef0 7a66 	vmov.f32	s15, s13
}
 8003cc4:	eeb0 0a67 	vmov.f32	s0, s15
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
	...

08003cd0 <_ZN11DW1000Class17getFirstPathPowerEv>:

float DW1000Class::getFirstPathPower()
{
 8003cd0:	b5b0      	push	{r4, r5, r7, lr}
 8003cd2:	b08a      	sub	sp, #40	; 0x28
 8003cd4:	af00      	add	r7, sp, #0
	byte fpAmpl2Bytes[LEN_FP_AMPL2];
	byte fpAmpl3Bytes[LEN_FP_AMPL3];
	byte rxFrameInfo[LEN_RX_FINFO];
	uint16_t f1, f2, f3, N;
	float A, corrFac;
	readBytes(RX_TIME, FP_AMPL1_SUB, fpAmpl1Bytes, LEN_FP_AMPL1);
 8003cd6:	f107 0210 	add.w	r2, r7, #16
 8003cda:	2302      	movs	r3, #2
 8003cdc:	2107      	movs	r1, #7
 8003cde:	2015      	movs	r0, #21
 8003ce0:	f000 f9ff 	bl	80040e2 <_ZN11DW1000Class9readBytesEhtPht>
	readBytes(RX_FQUAL, FP_AMPL2_SUB, fpAmpl2Bytes, LEN_FP_AMPL2);
 8003ce4:	f107 020c 	add.w	r2, r7, #12
 8003ce8:	2302      	movs	r3, #2
 8003cea:	2102      	movs	r1, #2
 8003cec:	2012      	movs	r0, #18
 8003cee:	f000 f9f8 	bl	80040e2 <_ZN11DW1000Class9readBytesEhtPht>
	readBytes(RX_FQUAL, FP_AMPL3_SUB, fpAmpl3Bytes, LEN_FP_AMPL3);
 8003cf2:	f107 0208 	add.w	r2, r7, #8
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	2104      	movs	r1, #4
 8003cfa:	2012      	movs	r0, #18
 8003cfc:	f000 f9f1 	bl	80040e2 <_ZN11DW1000Class9readBytesEhtPht>
	readBytes(RX_FINFO, NO_SUB, rxFrameInfo, LEN_RX_FINFO);
 8003d00:	1d3a      	adds	r2, r7, #4
 8003d02:	2304      	movs	r3, #4
 8003d04:	2100      	movs	r1, #0
 8003d06:	2010      	movs	r0, #16
 8003d08:	f000 f9eb 	bl	80040e2 <_ZN11DW1000Class9readBytesEhtPht>
	f1 = (uint16_t)fpAmpl1Bytes[0] | ((uint16_t)fpAmpl1Bytes[1] << 8);
 8003d0c:	7c3b      	ldrb	r3, [r7, #16]
 8003d0e:	b21a      	sxth	r2, r3
 8003d10:	7c7b      	ldrb	r3, [r7, #17]
 8003d12:	021b      	lsls	r3, r3, #8
 8003d14:	b21b      	sxth	r3, r3
 8003d16:	4313      	orrs	r3, r2
 8003d18:	b21b      	sxth	r3, r3
 8003d1a:	83fb      	strh	r3, [r7, #30]
	f2 = (uint16_t)fpAmpl2Bytes[0] | ((uint16_t)fpAmpl2Bytes[1] << 8);
 8003d1c:	7b3b      	ldrb	r3, [r7, #12]
 8003d1e:	b21a      	sxth	r2, r3
 8003d20:	7b7b      	ldrb	r3, [r7, #13]
 8003d22:	021b      	lsls	r3, r3, #8
 8003d24:	b21b      	sxth	r3, r3
 8003d26:	4313      	orrs	r3, r2
 8003d28:	b21b      	sxth	r3, r3
 8003d2a:	83bb      	strh	r3, [r7, #28]
	f3 = (uint16_t)fpAmpl3Bytes[0] | ((uint16_t)fpAmpl3Bytes[1] << 8);
 8003d2c:	7a3b      	ldrb	r3, [r7, #8]
 8003d2e:	b21a      	sxth	r2, r3
 8003d30:	7a7b      	ldrb	r3, [r7, #9]
 8003d32:	021b      	lsls	r3, r3, #8
 8003d34:	b21b      	sxth	r3, r3
 8003d36:	4313      	orrs	r3, r2
 8003d38:	b21b      	sxth	r3, r3
 8003d3a:	837b      	strh	r3, [r7, #26]
	N = (((uint16_t)rxFrameInfo[2] >> 4) & 0xFF) | ((uint16_t)rxFrameInfo[3] << 4);
 8003d3c:	79bb      	ldrb	r3, [r7, #6]
 8003d3e:	091b      	lsrs	r3, r3, #4
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	b21a      	sxth	r2, r3
 8003d44:	79fb      	ldrb	r3, [r7, #7]
 8003d46:	011b      	lsls	r3, r3, #4
 8003d48:	b21b      	sxth	r3, r3
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	b21b      	sxth	r3, r3
 8003d4e:	833b      	strh	r3, [r7, #24]
	if (_pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8003d50:	4b44      	ldr	r3, [pc, #272]	; (8003e64 <_ZN11DW1000Class17getFirstPathPowerEv+0x194>)
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d104      	bne.n	8003d62 <_ZN11DW1000Class17getFirstPathPowerEv+0x92>
	{
		A = 113.77;
 8003d58:	4b43      	ldr	r3, [pc, #268]	; (8003e68 <_ZN11DW1000Class17getFirstPathPowerEv+0x198>)
 8003d5a:	627b      	str	r3, [r7, #36]	; 0x24
		corrFac = 2.3334;
 8003d5c:	4b43      	ldr	r3, [pc, #268]	; (8003e6c <_ZN11DW1000Class17getFirstPathPowerEv+0x19c>)
 8003d5e:	623b      	str	r3, [r7, #32]
 8003d60:	e003      	b.n	8003d6a <_ZN11DW1000Class17getFirstPathPowerEv+0x9a>
	}
	else
	{
		A = 121.74;
 8003d62:	4b43      	ldr	r3, [pc, #268]	; (8003e70 <_ZN11DW1000Class17getFirstPathPowerEv+0x1a0>)
 8003d64:	627b      	str	r3, [r7, #36]	; 0x24
		corrFac = 1.1667;
 8003d66:	4b43      	ldr	r3, [pc, #268]	; (8003e74 <_ZN11DW1000Class17getFirstPathPowerEv+0x1a4>)
 8003d68:	623b      	str	r3, [r7, #32]
	}
	float estFpPwr = 10.0 * log10(((float)f1 * (float)f1 + (float)f2 * (float)f2 + (float)f3 * (float)f3) / ((float)N * (float)N)) - A;
 8003d6a:	8bfb      	ldrh	r3, [r7, #30]
 8003d6c:	ee07 3a90 	vmov	s15, r3
 8003d70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d74:	8bfb      	ldrh	r3, [r7, #30]
 8003d76:	ee07 3a90 	vmov	s15, r3
 8003d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d82:	8bbb      	ldrh	r3, [r7, #28]
 8003d84:	ee07 3a90 	vmov	s15, r3
 8003d88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d8c:	8bbb      	ldrh	r3, [r7, #28]
 8003d8e:	ee07 3a90 	vmov	s15, r3
 8003d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d9e:	8b7b      	ldrh	r3, [r7, #26]
 8003da0:	ee07 3a90 	vmov	s15, r3
 8003da4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003da8:	8b7b      	ldrh	r3, [r7, #26]
 8003daa:	ee07 3a90 	vmov	s15, r3
 8003dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003db2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003db6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003dba:	8b3b      	ldrh	r3, [r7, #24]
 8003dbc:	ee07 3a90 	vmov	s15, r3
 8003dc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dc4:	8b3b      	ldrh	r3, [r7, #24]
 8003dc6:	ee07 3a90 	vmov	s15, r3
 8003dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003dd2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003dd6:	eeb0 0a66 	vmov.f32	s0, s13
 8003dda:	f7fe f827 	bl	8001e2c <_ZSt5log10f>
 8003dde:	ee10 3a10 	vmov	r3, s0
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fc fbc0 	bl	8000568 <__aeabi_f2d>
 8003de8:	f04f 0200 	mov.w	r2, #0
 8003dec:	4b22      	ldr	r3, [pc, #136]	; (8003e78 <_ZN11DW1000Class17getFirstPathPowerEv+0x1a8>)
 8003dee:	f7fc fc13 	bl	8000618 <__aeabi_dmul>
 8003df2:	4602      	mov	r2, r0
 8003df4:	460b      	mov	r3, r1
 8003df6:	4614      	mov	r4, r2
 8003df8:	461d      	mov	r5, r3
 8003dfa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003dfc:	f7fc fbb4 	bl	8000568 <__aeabi_f2d>
 8003e00:	4602      	mov	r2, r0
 8003e02:	460b      	mov	r3, r1
 8003e04:	4620      	mov	r0, r4
 8003e06:	4629      	mov	r1, r5
 8003e08:	f7fc fa4e 	bl	80002a8 <__aeabi_dsub>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	460b      	mov	r3, r1
 8003e10:	4610      	mov	r0, r2
 8003e12:	4619      	mov	r1, r3
 8003e14:	f7fc fef8 	bl	8000c08 <__aeabi_d2f>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	617b      	str	r3, [r7, #20]
	if (estFpPwr <= -88)
 8003e1c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003e20:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003e7c <_ZN11DW1000Class17getFirstPathPowerEv+0x1ac>
 8003e24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e2c:	d801      	bhi.n	8003e32 <_ZN11DW1000Class17getFirstPathPowerEv+0x162>
	{
		return estFpPwr;
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	e010      	b.n	8003e54 <_ZN11DW1000Class17getFirstPathPowerEv+0x184>
	}
	else
	{
		// approximation of Fig. 22 in user manual for dbm correction
		estFpPwr += (estFpPwr + 88) * corrFac;
 8003e32:	edd7 7a05 	vldr	s15, [r7, #20]
 8003e36:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8003e80 <_ZN11DW1000Class17getFirstPathPowerEv+0x1b0>
 8003e3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e3e:	edd7 7a08 	vldr	s15, [r7, #32]
 8003e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e46:	ed97 7a05 	vldr	s14, [r7, #20]
 8003e4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e4e:	edc7 7a05 	vstr	s15, [r7, #20]
	}
	return estFpPwr;
 8003e52:	697b      	ldr	r3, [r7, #20]
}
 8003e54:	ee07 3a90 	vmov	s15, r3
 8003e58:	eeb0 0a67 	vmov.f32	s0, s15
 8003e5c:	3728      	adds	r7, #40	; 0x28
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bdb0      	pop	{r4, r5, r7, pc}
 8003e62:	bf00      	nop
 8003e64:	20000005 	.word	0x20000005
 8003e68:	42e38a3d 	.word	0x42e38a3d
 8003e6c:	4015566d 	.word	0x4015566d
 8003e70:	42f37ae1 	.word	0x42f37ae1
 8003e74:	3f95566d 	.word	0x3f95566d
 8003e78:	40240000 	.word	0x40240000
 8003e7c:	c2b00000 	.word	0xc2b00000
 8003e80:	42b00000 	.word	0x42b00000

08003e84 <_ZN11DW1000Class15getReceivePowerEv>:

float DW1000Class::getReceivePower()
{
 8003e84:	b5b0      	push	{r4, r5, r7, lr}
 8003e86:	b088      	sub	sp, #32
 8003e88:	af00      	add	r7, sp, #0
	byte cirPwrBytes[LEN_CIR_PWR];
	byte rxFrameInfo[LEN_RX_FINFO];
	uint32_t twoPower17 = 131072;
 8003e8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e8e:	617b      	str	r3, [r7, #20]
	uint16_t C, N;
	float A, corrFac;
	readBytes(RX_FQUAL, CIR_PWR_SUB, cirPwrBytes, LEN_CIR_PWR);
 8003e90:	f107 0208 	add.w	r2, r7, #8
 8003e94:	2302      	movs	r3, #2
 8003e96:	2106      	movs	r1, #6
 8003e98:	2012      	movs	r0, #18
 8003e9a:	f000 f922 	bl	80040e2 <_ZN11DW1000Class9readBytesEhtPht>
	readBytes(RX_FINFO, NO_SUB, rxFrameInfo, LEN_RX_FINFO);
 8003e9e:	1d3a      	adds	r2, r7, #4
 8003ea0:	2304      	movs	r3, #4
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	2010      	movs	r0, #16
 8003ea6:	f000 f91c 	bl	80040e2 <_ZN11DW1000Class9readBytesEhtPht>
	C = (uint16_t)cirPwrBytes[0] | ((uint16_t)cirPwrBytes[1] << 8);
 8003eaa:	7a3b      	ldrb	r3, [r7, #8]
 8003eac:	b21a      	sxth	r2, r3
 8003eae:	7a7b      	ldrb	r3, [r7, #9]
 8003eb0:	021b      	lsls	r3, r3, #8
 8003eb2:	b21b      	sxth	r3, r3
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	b21b      	sxth	r3, r3
 8003eb8:	827b      	strh	r3, [r7, #18]
	N = (((uint16_t)rxFrameInfo[2] >> 4) & 0xFF) | ((uint16_t)rxFrameInfo[3] << 4);
 8003eba:	79bb      	ldrb	r3, [r7, #6]
 8003ebc:	091b      	lsrs	r3, r3, #4
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	b21a      	sxth	r2, r3
 8003ec2:	79fb      	ldrb	r3, [r7, #7]
 8003ec4:	011b      	lsls	r3, r3, #4
 8003ec6:	b21b      	sxth	r3, r3
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	b21b      	sxth	r3, r3
 8003ecc:	823b      	strh	r3, [r7, #16]
	if (_pulseFrequency == TX_PULSE_FREQ_16MHZ)
 8003ece:	4b36      	ldr	r3, [pc, #216]	; (8003fa8 <_ZN11DW1000Class15getReceivePowerEv+0x124>)
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d104      	bne.n	8003ee0 <_ZN11DW1000Class15getReceivePowerEv+0x5c>
	{
		A = 113.77;
 8003ed6:	4b35      	ldr	r3, [pc, #212]	; (8003fac <_ZN11DW1000Class15getReceivePowerEv+0x128>)
 8003ed8:	61fb      	str	r3, [r7, #28]
		corrFac = 2.3334;
 8003eda:	4b35      	ldr	r3, [pc, #212]	; (8003fb0 <_ZN11DW1000Class15getReceivePowerEv+0x12c>)
 8003edc:	61bb      	str	r3, [r7, #24]
 8003ede:	e003      	b.n	8003ee8 <_ZN11DW1000Class15getReceivePowerEv+0x64>
	}
	else
	{
		A = 121.74;
 8003ee0:	4b34      	ldr	r3, [pc, #208]	; (8003fb4 <_ZN11DW1000Class15getReceivePowerEv+0x130>)
 8003ee2:	61fb      	str	r3, [r7, #28]
		corrFac = 1.1667;
 8003ee4:	4b34      	ldr	r3, [pc, #208]	; (8003fb8 <_ZN11DW1000Class15getReceivePowerEv+0x134>)
 8003ee6:	61bb      	str	r3, [r7, #24]
	}
	float estRxPwr = 10.0 * log10(((float)C * (float)twoPower17) / ((float)N * (float)N)) - A;
 8003ee8:	8a7b      	ldrh	r3, [r7, #18]
 8003eea:	ee07 3a90 	vmov	s15, r3
 8003eee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	ee07 3a90 	vmov	s15, r3
 8003ef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003efc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f00:	8a3b      	ldrh	r3, [r7, #16]
 8003f02:	ee07 3a90 	vmov	s15, r3
 8003f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f0a:	8a3b      	ldrh	r3, [r7, #16]
 8003f0c:	ee07 3a90 	vmov	s15, r3
 8003f10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f18:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003f1c:	eeb0 0a66 	vmov.f32	s0, s13
 8003f20:	f7fd ff84 	bl	8001e2c <_ZSt5log10f>
 8003f24:	ee10 3a10 	vmov	r3, s0
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7fc fb1d 	bl	8000568 <__aeabi_f2d>
 8003f2e:	f04f 0200 	mov.w	r2, #0
 8003f32:	4b22      	ldr	r3, [pc, #136]	; (8003fbc <_ZN11DW1000Class15getReceivePowerEv+0x138>)
 8003f34:	f7fc fb70 	bl	8000618 <__aeabi_dmul>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	4614      	mov	r4, r2
 8003f3e:	461d      	mov	r5, r3
 8003f40:	69f8      	ldr	r0, [r7, #28]
 8003f42:	f7fc fb11 	bl	8000568 <__aeabi_f2d>
 8003f46:	4602      	mov	r2, r0
 8003f48:	460b      	mov	r3, r1
 8003f4a:	4620      	mov	r0, r4
 8003f4c:	4629      	mov	r1, r5
 8003f4e:	f7fc f9ab 	bl	80002a8 <__aeabi_dsub>
 8003f52:	4602      	mov	r2, r0
 8003f54:	460b      	mov	r3, r1
 8003f56:	4610      	mov	r0, r2
 8003f58:	4619      	mov	r1, r3
 8003f5a:	f7fc fe55 	bl	8000c08 <__aeabi_d2f>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	60fb      	str	r3, [r7, #12]
	if (estRxPwr <= -88)
 8003f62:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f66:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003fc0 <_ZN11DW1000Class15getReceivePowerEv+0x13c>
 8003f6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f72:	d801      	bhi.n	8003f78 <_ZN11DW1000Class15getReceivePowerEv+0xf4>
	{
		return estRxPwr;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	e010      	b.n	8003f9a <_ZN11DW1000Class15getReceivePowerEv+0x116>
	}
	else
	{
		// approximation of Fig. 22 in user manual for dbm correction
		estRxPwr += (estRxPwr + 88) * corrFac;
 8003f78:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f7c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003fc4 <_ZN11DW1000Class15getReceivePowerEv+0x140>
 8003f80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f84:	edd7 7a06 	vldr	s15, [r7, #24]
 8003f88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f8c:	ed97 7a03 	vldr	s14, [r7, #12]
 8003f90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f94:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	return estRxPwr;
 8003f98:	68fb      	ldr	r3, [r7, #12]
}
 8003f9a:	ee07 3a90 	vmov	s15, r3
 8003f9e:	eeb0 0a67 	vmov.f32	s0, s15
 8003fa2:	3720      	adds	r7, #32
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bdb0      	pop	{r4, r5, r7, pc}
 8003fa8:	20000005 	.word	0x20000005
 8003fac:	42e38a3d 	.word	0x42e38a3d
 8003fb0:	4015566d 	.word	0x4015566d
 8003fb4:	42f37ae1 	.word	0x42f37ae1
 8003fb8:	3f95566d 	.word	0x3f95566d
 8003fbc:	40240000 	.word	0x40240000
 8003fc0:	c2b00000 	.word	0xc2b00000
 8003fc4:	42b00000 	.word	0x42b00000

08003fc8 <_ZN11DW1000Class6setBitEPhttb>:
	strncpy((char *)buf, src_buf, n);
	buf[n] = 0;
}

void DW1000Class::setBit(byte data[], uint16_t n, uint16_t bit, bool val)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b089      	sub	sp, #36	; 0x24
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	4608      	mov	r0, r1
 8003fd2:	4611      	mov	r1, r2
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	817b      	strh	r3, [r7, #10]
 8003fda:	460b      	mov	r3, r1
 8003fdc:	813b      	strh	r3, [r7, #8]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	71fb      	strb	r3, [r7, #7]
	uint16_t idx;
	uint8_t shift;

	idx = bit / 8;
 8003fe2:	893b      	ldrh	r3, [r7, #8]
 8003fe4:	08db      	lsrs	r3, r3, #3
 8003fe6:	83fb      	strh	r3, [r7, #30]
	if (idx >= n)
 8003fe8:	8bfa      	ldrh	r2, [r7, #30]
 8003fea:	897b      	ldrh	r3, [r7, #10]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d225      	bcs.n	800403c <_ZN11DW1000Class6setBitEPhttb+0x74>
	{
		return; // TODO proper error handling: out of bounds
	}
	byte *targetByte = &data[idx];
 8003ff0:	8bfb      	ldrh	r3, [r7, #30]
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	61bb      	str	r3, [r7, #24]
	shift = bit % 8;
 8003ff8:	893b      	ldrh	r3, [r7, #8]
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	f003 0307 	and.w	r3, r3, #7
 8004000:	75fb      	strb	r3, [r7, #23]
	if (val)
 8004002:	79fb      	ldrb	r3, [r7, #7]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00b      	beq.n	8004020 <_ZN11DW1000Class6setBitEPhttb+0x58>
	{	// set bit
		(*targetByte) |= (1UL << (shift));
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	781a      	ldrb	r2, [r3, #0]
 800400c:	7dfb      	ldrb	r3, [r7, #23]
 800400e:	2101      	movs	r1, #1
 8004010:	fa01 f303 	lsl.w	r3, r1, r3
 8004014:	b2db      	uxtb	r3, r3
 8004016:	4313      	orrs	r3, r2
 8004018:	b2da      	uxtb	r2, r3
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	701a      	strb	r2, [r3, #0]
 800401e:	e00e      	b.n	800403e <_ZN11DW1000Class6setBitEPhttb+0x76>
	}
	else
	{	// clear bit
		(*targetByte) &= ~(1UL << (shift));
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	781a      	ldrb	r2, [r3, #0]
 8004024:	7dfb      	ldrb	r3, [r7, #23]
 8004026:	2101      	movs	r1, #1
 8004028:	fa01 f303 	lsl.w	r3, r1, r3
 800402c:	b2db      	uxtb	r3, r3
 800402e:	43db      	mvns	r3, r3
 8004030:	b2db      	uxtb	r3, r3
 8004032:	4013      	ands	r3, r2
 8004034:	b2da      	uxtb	r2, r3
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	701a      	strb	r2, [r3, #0]
 800403a:	e000      	b.n	800403e <_ZN11DW1000Class6setBitEPhttb+0x76>
		return; // TODO proper error handling: out of bounds
 800403c:	bf00      	nop
	}
}
 800403e:	3724      	adds	r7, #36	; 0x24
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <_ZN11DW1000Class6getBitEPhtt>:

bool DW1000Class::getBit(byte data[], uint16_t n, uint16_t bit)
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	460b      	mov	r3, r1
 8004052:	807b      	strh	r3, [r7, #2]
 8004054:	4613      	mov	r3, r2
 8004056:	803b      	strh	r3, [r7, #0]
	uint16_t idx;
	uint8_t shift;

	idx = bit / 8;
 8004058:	883b      	ldrh	r3, [r7, #0]
 800405a:	08db      	lsrs	r3, r3, #3
 800405c:	81fb      	strh	r3, [r7, #14]
	if (idx >= n)
 800405e:	89fa      	ldrh	r2, [r7, #14]
 8004060:	887b      	ldrh	r3, [r7, #2]
 8004062:	429a      	cmp	r2, r3
 8004064:	d301      	bcc.n	800406a <_ZN11DW1000Class6getBitEPhtt+0x22>
	{
		return false; // TODO proper error handling: out of bounds
 8004066:	2300      	movs	r3, #0
 8004068:	e014      	b.n	8004094 <_ZN11DW1000Class6getBitEPhtt+0x4c>
	}
	byte targetByte = data[idx];
 800406a:	89fb      	ldrh	r3, [r7, #14]
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	4413      	add	r3, r2
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	737b      	strb	r3, [r7, #13]
	shift = bit % 8;
 8004074:	883b      	ldrh	r3, [r7, #0]
 8004076:	b2db      	uxtb	r3, r3
 8004078:	f003 0307 	and.w	r3, r3, #7
 800407c:	733b      	strb	r3, [r7, #12]

	return (((targetByte) >> (shift)) & 0x01); // TODO wrong type returned byte instead of boolean
 800407e:	7b7a      	ldrb	r2, [r7, #13]
 8004080:	7b3b      	ldrb	r3, [r7, #12]
 8004082:	fa42 f303 	asr.w	r3, r2, r3
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b00      	cmp	r3, #0
 800408c:	bf14      	ite	ne
 800408e:	2301      	movne	r3, #1
 8004090:	2300      	moveq	r3, #0
 8004092:	b2db      	uxtb	r3, r3
}
 8004094:	4618      	mov	r0, r3
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <_ZN11DW1000Class17writeValueToBytesEPhlt>:

void DW1000Class::writeValueToBytes(byte data[], int32_t val, uint16_t n)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b087      	sub	sp, #28
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	4613      	mov	r3, r2
 80040ac:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	for (i = 0; i < n; i++)
 80040ae:	2300      	movs	r3, #0
 80040b0:	82fb      	strh	r3, [r7, #22]
 80040b2:	8afa      	ldrh	r2, [r7, #22]
 80040b4:	88fb      	ldrh	r3, [r7, #6]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d20d      	bcs.n	80040d6 <_ZN11DW1000Class17writeValueToBytesEPhlt+0x36>
	{
		data[i] = ((val >> (i * 8)) & 0xFF); // TODO bad types - signed unsigned problem
 80040ba:	8afb      	ldrh	r3, [r7, #22]
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	fa42 f103 	asr.w	r1, r2, r3
 80040c4:	8afb      	ldrh	r3, [r7, #22]
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	4413      	add	r3, r2
 80040ca:	b2ca      	uxtb	r2, r1
 80040cc:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < n; i++)
 80040ce:	8afb      	ldrh	r3, [r7, #22]
 80040d0:	3301      	adds	r3, #1
 80040d2:	82fb      	strh	r3, [r7, #22]
 80040d4:	e7ed      	b.n	80040b2 <_ZN11DW1000Class17writeValueToBytesEPhlt+0x12>
	}
}
 80040d6:	bf00      	nop
 80040d8:	371c      	adds	r7, #28
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr

080040e2 <_ZN11DW1000Class9readBytesEhtPht>:

void DW1000Class::readBytes(byte cmd, uint16_t offset, byte data[], uint16_t n)
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b088      	sub	sp, #32
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	60ba      	str	r2, [r7, #8]
 80040ea:	461a      	mov	r2, r3
 80040ec:	4603      	mov	r3, r0
 80040ee:	73fb      	strb	r3, [r7, #15]
 80040f0:	460b      	mov	r3, r1
 80040f2:	81bb      	strh	r3, [r7, #12]
 80040f4:	4613      	mov	r3, r2
 80040f6:	80fb      	strh	r3, [r7, #6]
	uint8 *buffer = data;
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	61fb      	str	r3, [r7, #28]
	uint16 recNum = cmd;
 80040fc:	7bfb      	ldrb	r3, [r7, #15]
 80040fe:	837b      	strh	r3, [r7, #26]
	uint16 indx = offset;
 8004100:	89bb      	ldrh	r3, [r7, #12]
 8004102:	833b      	strh	r3, [r7, #24]
	uint32 length = n;
 8004104:	88fb      	ldrh	r3, [r7, #6]
 8004106:	617b      	str	r3, [r7, #20]
	dwt_readfromdevice(recNum, indx, length, buffer);
 8004108:	8b39      	ldrh	r1, [r7, #24]
 800410a:	8b78      	ldrh	r0, [r7, #26]
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	f7fd fbfd 	bl	800190e <dwt_readfromdevice>
}
 8004114:	bf00      	nop
 8004116:	3720      	adds	r7, #32
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <_ZN11DW1000Class12readBytesOTPEtPh>:

// always 4 bytes
// TODO why always 4 bytes? can be different, see p. 58 table 10 otp memory map
void DW1000Class::readBytesOTP(uint16_t address, byte data[])
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	4603      	mov	r3, r0
 8004124:	6039      	str	r1, [r7, #0]
 8004126:	80fb      	strh	r3, [r7, #6]
	byte addressBytes[LEN_OTP_ADDR];

	// p60 - 6.3.3 Reading a value from OTP memory
	// bytes of address
	addressBytes[0] = (address & 0xFF);
 8004128:	88fb      	ldrh	r3, [r7, #6]
 800412a:	b2db      	uxtb	r3, r3
 800412c:	733b      	strb	r3, [r7, #12]
	addressBytes[1] = ((address >> 8) & 0xFF);
 800412e:	88fb      	ldrh	r3, [r7, #6]
 8004130:	0a1b      	lsrs	r3, r3, #8
 8004132:	b29b      	uxth	r3, r3
 8004134:	b2db      	uxtb	r3, r3
 8004136:	737b      	strb	r3, [r7, #13]
	// set address
	writeBytes(OTP_IF, OTP_ADDR_SUB, addressBytes, LEN_OTP_ADDR);
 8004138:	f107 020c 	add.w	r2, r7, #12
 800413c:	2302      	movs	r3, #2
 800413e:	2104      	movs	r1, #4
 8004140:	202d      	movs	r0, #45	; 0x2d
 8004142:	f000 f82c 	bl	800419e <_ZN11DW1000Class10writeBytesEhtPht>
	// switch into read mode
	writeByte(OTP_IF, OTP_CTRL_SUB, 0x03); // OTPRDEN | OTPREAD
 8004146:	2203      	movs	r2, #3
 8004148:	2106      	movs	r1, #6
 800414a:	202d      	movs	r0, #45	; 0x2d
 800414c:	f000 f814 	bl	8004178 <_ZN11DW1000Class9writeByteEhth>
	writeByte(OTP_IF, OTP_CTRL_SUB, 0x01); // OTPRDEN
 8004150:	2201      	movs	r2, #1
 8004152:	2106      	movs	r1, #6
 8004154:	202d      	movs	r0, #45	; 0x2d
 8004156:	f000 f80f 	bl	8004178 <_ZN11DW1000Class9writeByteEhth>
	// read value/block - 4 bytes
	readBytes(OTP_IF, OTP_RDAT_SUB, data, LEN_OTP_RDAT);
 800415a:	2304      	movs	r3, #4
 800415c:	683a      	ldr	r2, [r7, #0]
 800415e:	210a      	movs	r1, #10
 8004160:	202d      	movs	r0, #45	; 0x2d
 8004162:	f7ff ffbe 	bl	80040e2 <_ZN11DW1000Class9readBytesEhtPht>
	// end read mode
	writeByte(OTP_IF, OTP_CTRL_SUB, 0x00);
 8004166:	2200      	movs	r2, #0
 8004168:	2106      	movs	r1, #6
 800416a:	202d      	movs	r0, #45	; 0x2d
 800416c:	f000 f804 	bl	8004178 <_ZN11DW1000Class9writeByteEhth>
}
 8004170:	bf00      	nop
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <_ZN11DW1000Class9writeByteEhth>:

// Helper to set a single register
void DW1000Class::writeByte(byte cmd, uint16_t offset, byte data)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	4603      	mov	r3, r0
 8004180:	71fb      	strb	r3, [r7, #7]
 8004182:	460b      	mov	r3, r1
 8004184:	80bb      	strh	r3, [r7, #4]
 8004186:	4613      	mov	r3, r2
 8004188:	71bb      	strb	r3, [r7, #6]
	writeBytes(cmd, offset, &data, 1);
 800418a:	1dba      	adds	r2, r7, #6
 800418c:	88b9      	ldrh	r1, [r7, #4]
 800418e:	79f8      	ldrb	r0, [r7, #7]
 8004190:	2301      	movs	r3, #1
 8004192:	f000 f804 	bl	800419e <_ZN11DW1000Class10writeBytesEhtPht>
}
 8004196:	bf00      	nop
 8004198:	3708      	adds	r7, #8
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <_ZN11DW1000Class10writeBytesEhtPht>:

void DW1000Class::writeBytes(byte cmd, uint16_t offset, byte *data, uint16_t data_size)
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b088      	sub	sp, #32
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	60ba      	str	r2, [r7, #8]
 80041a6:	461a      	mov	r2, r3
 80041a8:	4603      	mov	r3, r0
 80041aa:	73fb      	strb	r3, [r7, #15]
 80041ac:	460b      	mov	r3, r1
 80041ae:	81bb      	strh	r3, [r7, #12]
 80041b0:	4613      	mov	r3, r2
 80041b2:	80fb      	strh	r3, [r7, #6]
	uint8 *buffer = data;
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	61fb      	str	r3, [r7, #28]
	uint16 recNum = cmd;
 80041b8:	7bfb      	ldrb	r3, [r7, #15]
 80041ba:	837b      	strh	r3, [r7, #26]
	uint16 indx = offset;
 80041bc:	89bb      	ldrh	r3, [r7, #12]
 80041be:	833b      	strh	r3, [r7, #24]
	uint32 length = data_size;
 80041c0:	88fb      	ldrh	r3, [r7, #6]
 80041c2:	617b      	str	r3, [r7, #20]
	dwt_writetodevice(recNum, indx, length, buffer);
 80041c4:	8b39      	ldrh	r1, [r7, #24]
 80041c6:	8b78      	ldrh	r0, [r7, #26]
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	f7fd fb48 	bl	8001860 <dwt_writetodevice>
}
 80041d0:	bf00      	nop
 80041d2:	3720      	adds	r7, #32
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <_ZN11DW1000Class16large_power_initEv>:

// For large power moudle
void DW1000Class::large_power_init()
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
	byte reg[4];

	readBytes(GPIO_CTRL, 0, reg, 4);
 80041de:	1d3a      	adds	r2, r7, #4
 80041e0:	2304      	movs	r3, #4
 80041e2:	2100      	movs	r1, #0
 80041e4:	2026      	movs	r0, #38	; 0x26
 80041e6:	f7ff ff7c 	bl	80040e2 <_ZN11DW1000Class9readBytesEhtPht>

	reg[1] |= 0x40;
 80041ea:	797b      	ldrb	r3, [r7, #5]
 80041ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	717b      	strb	r3, [r7, #5]
	reg[2] |= 0x01;
 80041f4:	79bb      	ldrb	r3, [r7, #6]
 80041f6:	f043 0301 	orr.w	r3, r3, #1
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	71bb      	strb	r3, [r7, #6]
	reg[2] |= 0x05;
 80041fe:	79bb      	ldrb	r3, [r7, #6]
 8004200:	f043 0305 	orr.w	r3, r3, #5
 8004204:	b2db      	uxtb	r3, r3
 8004206:	71bb      	strb	r3, [r7, #6]

	writeBytes(GPIO_CTRL, 0, reg, 4);
 8004208:	1d3a      	adds	r2, r7, #4
 800420a:	2304      	movs	r3, #4
 800420c:	2100      	movs	r1, #0
 800420e:	2026      	movs	r0, #38	; 0x26
 8004210:	f7ff ffc5 	bl	800419e <_ZN11DW1000Class10writeBytesEhtPht>

	reg[0] = reg[1] = reg[2] = reg[3] = 0;
 8004214:	2300      	movs	r3, #0
 8004216:	71fb      	strb	r3, [r7, #7]
 8004218:	79fb      	ldrb	r3, [r7, #7]
 800421a:	71bb      	strb	r3, [r7, #6]
 800421c:	79bb      	ldrb	r3, [r7, #6]
 800421e:	717b      	strb	r3, [r7, #5]
 8004220:	797b      	ldrb	r3, [r7, #5]
 8004222:	713b      	strb	r3, [r7, #4]
	writeBytes(PMSC, 0x26, reg, 2);
 8004224:	1d3a      	adds	r2, r7, #4
 8004226:	2302      	movs	r3, #2
 8004228:	2126      	movs	r1, #38	; 0x26
 800422a:	2036      	movs	r0, #54	; 0x36
 800422c:	f7ff ffb7 	bl	800419e <_ZN11DW1000Class10writeBytesEhtPht>

	reg[0] = 0xC0;
 8004230:	23c0      	movs	r3, #192	; 0xc0
 8004232:	713b      	strb	r3, [r7, #4]
	reg[1] = 0;
 8004234:	2300      	movs	r3, #0
 8004236:	717b      	strb	r3, [r7, #5]
	reg[2] = 0;
 8004238:	2300      	movs	r3, #0
 800423a:	71bb      	strb	r3, [r7, #6]
	reg[3] = 0;
 800423c:	2300      	movs	r3, #0
 800423e:	71fb      	strb	r3, [r7, #7]
	writeBytes(TX_CAL, TC_PGDELAY_SUB, reg, 1);
 8004240:	1d3a      	adds	r2, r7, #4
 8004242:	2301      	movs	r3, #1
 8004244:	210b      	movs	r1, #11
 8004246:	202a      	movs	r0, #42	; 0x2a
 8004248:	f7ff ffa9 	bl	800419e <_ZN11DW1000Class10writeBytesEhtPht>

	reg[0] = 0x1f;
 800424c:	231f      	movs	r3, #31
 800424e:	713b      	strb	r3, [r7, #4]
	reg[1] = 0x1f;
 8004250:	231f      	movs	r3, #31
 8004252:	717b      	strb	r3, [r7, #5]
	reg[2] = 0x1f;
 8004254:	231f      	movs	r3, #31
 8004256:	71bb      	strb	r3, [r7, #6]
	reg[3] = 0x1f;
 8004258:	231f      	movs	r3, #31
 800425a:	71fb      	strb	r3, [r7, #7]
	writeBytes(TX_POWER, 0, reg, 4);
 800425c:	1d3a      	adds	r2, r7, #4
 800425e:	2304      	movs	r3, #4
 8004260:	2100      	movs	r1, #0
 8004262:	201e      	movs	r0, #30
 8004264:	f7ff ff9b 	bl	800419e <_ZN11DW1000Class10writeBytesEhtPht>
}
 8004268:	bf00      	nop
 800426a:	3708      	adds	r7, #8
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <_Z41__static_initialization_and_destruction_0ii>:
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d107      	bne.n	8004290 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004286:	4293      	cmp	r3, r2
 8004288:	d102      	bne.n	8004290 <_Z41__static_initialization_and_destruction_0ii+0x20>
DW1000Time DW1000Class::_antennaDelay;
 800428a:	4809      	ldr	r0, [pc, #36]	; (80042b0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800428c:	f002 f860 	bl	8006350 <_ZN10DW1000TimeC1Ev>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d107      	bne.n	80042a6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800429c:	4293      	cmp	r3, r2
 800429e:	d102      	bne.n	80042a6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80042a0:	4803      	ldr	r0, [pc, #12]	; (80042b0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80042a2:	f002 f89c 	bl	80063de <_ZN10DW1000TimeD1Ev>
}
 80042a6:	bf00      	nop
 80042a8:	3708      	adds	r7, #8
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	200002b0 	.word	0x200002b0

080042b4 <_GLOBAL__sub_I_DW1000>:
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80042bc:	2001      	movs	r0, #1
 80042be:	f7ff ffd7 	bl	8004270 <_Z41__static_initialization_and_destruction_0ii>
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <_GLOBAL__sub_D_DW1000>:
 80042c4:	b580      	push	{r7, lr}
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80042cc:	2000      	movs	r0, #0
 80042ce:	f7ff ffcf 	bl	8004270 <_Z41__static_initialization_and_destruction_0ii>
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	ed87 0a01 	vstr	s0, [r7, #4]
 80042de:	ed97 0a01 	vldr	s0, [r7, #4]
 80042e2:	f005 fdb9 	bl	8009e58 <roundf>
 80042e6:	eef0 7a40 	vmov.f32	s15, s0
 80042ea:	eeb0 0a67 	vmov.f32	s0, s15
 80042ee:	3708      	adds	r7, #8
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <_ZN12DW1000DeviceC1Ev>:
#include "DW1000.h"



//Constructor and destructor
DW1000Device::DW1000Device() {
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4618      	mov	r0, r3
 8004300:	f002 f826 	bl	8006350 <_ZN10DW1000TimeC1Ev>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	3308      	adds	r3, #8
 8004308:	4618      	mov	r0, r3
 800430a:	f002 f821 	bl	8006350 <_ZN10DW1000TimeC1Ev>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	3310      	adds	r3, #16
 8004312:	4618      	mov	r0, r3
 8004314:	f002 f81c 	bl	8006350 <_ZN10DW1000TimeC1Ev>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3318      	adds	r3, #24
 800431c:	4618      	mov	r0, r3
 800431e:	f002 f817 	bl	8006350 <_ZN10DW1000TimeC1Ev>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	3320      	adds	r3, #32
 8004326:	4618      	mov	r0, r3
 8004328:	f002 f812 	bl	8006350 <_ZN10DW1000TimeC1Ev>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	3328      	adds	r3, #40	; 0x28
 8004330:	4618      	mov	r0, r3
 8004332:	f002 f80d 	bl	8006350 <_ZN10DW1000TimeC1Ev>
	randomShortAddress();
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 f9cc 	bl	80046d4 <_ZN12DW1000Device18randomShortAddressEv>
}
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4618      	mov	r0, r3
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <_ZN12DW1000DeviceC1EPhb>:

DW1000Device::DW1000Device(byte deviceAddress[], bool shortOne) {
 8004346:	b580      	push	{r7, lr}
 8004348:	b084      	sub	sp, #16
 800434a:	af00      	add	r7, sp, #0
 800434c:	60f8      	str	r0, [r7, #12]
 800434e:	60b9      	str	r1, [r7, #8]
 8004350:	4613      	mov	r3, r2
 8004352:	71fb      	strb	r3, [r7, #7]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	4618      	mov	r0, r3
 8004358:	f001 fffa 	bl	8006350 <_ZN10DW1000TimeC1Ev>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	3308      	adds	r3, #8
 8004360:	4618      	mov	r0, r3
 8004362:	f001 fff5 	bl	8006350 <_ZN10DW1000TimeC1Ev>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	3310      	adds	r3, #16
 800436a:	4618      	mov	r0, r3
 800436c:	f001 fff0 	bl	8006350 <_ZN10DW1000TimeC1Ev>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	3318      	adds	r3, #24
 8004374:	4618      	mov	r0, r3
 8004376:	f001 ffeb 	bl	8006350 <_ZN10DW1000TimeC1Ev>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	3320      	adds	r3, #32
 800437e:	4618      	mov	r0, r3
 8004380:	f001 ffe6 	bl	8006350 <_ZN10DW1000TimeC1Ev>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	3328      	adds	r3, #40	; 0x28
 8004388:	4618      	mov	r0, r3
 800438a:	f001 ffe1 	bl	8006350 <_ZN10DW1000TimeC1Ev>
	if(!shortOne) {
 800438e:	79fb      	ldrb	r3, [r7, #7]
 8004390:	f083 0301 	eor.w	r3, r3, #1
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d007      	beq.n	80043aa <_ZN12DW1000DeviceC1EPhb+0x64>
		//we have a 8 bytes address
		setAddress(deviceAddress);
 800439a:	68b9      	ldr	r1, [r7, #8]
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f000 f873 	bl	8004488 <_ZN12DW1000Device10setAddressEPh>
		randomShortAddress();
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f000 f996 	bl	80046d4 <_ZN12DW1000Device18randomShortAddressEv>
 80043a8:	e003      	b.n	80043b2 <_ZN12DW1000DeviceC1EPhb+0x6c>
	}
	else {
		//we have a short address (2 bytes)
		setShortAddress(deviceAddress);
 80043aa:	68b9      	ldr	r1, [r7, #8]
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	f000 f87b 	bl	80044a8 <_ZN12DW1000Device15setShortAddressEPh>
	}
}
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	4618      	mov	r0, r3
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <_ZN12DW1000DeviceC1EPhS0_>:

DW1000Device::DW1000Device(byte deviceAddress[], byte shortAddress[]) {
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f001 ffc0 	bl	8006350 <_ZN10DW1000TimeC1Ev>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	3308      	adds	r3, #8
 80043d4:	4618      	mov	r0, r3
 80043d6:	f001 ffbb 	bl	8006350 <_ZN10DW1000TimeC1Ev>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	3310      	adds	r3, #16
 80043de:	4618      	mov	r0, r3
 80043e0:	f001 ffb6 	bl	8006350 <_ZN10DW1000TimeC1Ev>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	3318      	adds	r3, #24
 80043e8:	4618      	mov	r0, r3
 80043ea:	f001 ffb1 	bl	8006350 <_ZN10DW1000TimeC1Ev>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	3320      	adds	r3, #32
 80043f2:	4618      	mov	r0, r3
 80043f4:	f001 ffac 	bl	8006350 <_ZN10DW1000TimeC1Ev>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	3328      	adds	r3, #40	; 0x28
 80043fc:	4618      	mov	r0, r3
 80043fe:	f001 ffa7 	bl	8006350 <_ZN10DW1000TimeC1Ev>
	//we have a 8 bytes address
	setAddress(deviceAddress);
 8004402:	68b9      	ldr	r1, [r7, #8]
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f000 f83f 	bl	8004488 <_ZN12DW1000Device10setAddressEPh>
	//we set the 2 bytes address
	setShortAddress(shortAddress);
 800440a:	6879      	ldr	r1, [r7, #4]
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f000 f84b 	bl	80044a8 <_ZN12DW1000Device15setShortAddressEPh>
}
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	4618      	mov	r0, r3
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <_ZN12DW1000DeviceD1Ev>:

DW1000Device::~DW1000Device() {
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	3328      	adds	r3, #40	; 0x28
 8004428:	4618      	mov	r0, r3
 800442a:	f001 ffd8 	bl	80063de <_ZN10DW1000TimeD1Ev>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	3320      	adds	r3, #32
 8004432:	4618      	mov	r0, r3
 8004434:	f001 ffd3 	bl	80063de <_ZN10DW1000TimeD1Ev>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	3318      	adds	r3, #24
 800443c:	4618      	mov	r0, r3
 800443e:	f001 ffce 	bl	80063de <_ZN10DW1000TimeD1Ev>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	3310      	adds	r3, #16
 8004446:	4618      	mov	r0, r3
 8004448:	f001 ffc9 	bl	80063de <_ZN10DW1000TimeD1Ev>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	3308      	adds	r3, #8
 8004450:	4618      	mov	r0, r3
 8004452:	f001 ffc4 	bl	80063de <_ZN10DW1000TimeD1Ev>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4618      	mov	r0, r3
 800445a:	f001 ffc0 	bl	80063de <_ZN10DW1000TimeD1Ev>
}
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4618      	mov	r0, r3
 8004462:	3708      	adds	r7, #8
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <_ZN12DW1000Device12setReplyTimeEt>:

//setters:
void DW1000Device::setReplyTime(uint16_t replyDelayTimeUs) { _replyDelayTimeUS = replyDelayTimeUs; }
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	460b      	mov	r3, r1
 8004472:	807b      	strh	r3, [r7, #2]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	887a      	ldrh	r2, [r7, #2]
 8004478:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <_ZN12DW1000Device10setAddressEPh>:

void DW1000Device::setAddress(char deviceAddress[]) { DW1000.convertToByte(deviceAddress, _ownAddress); }

void DW1000Device::setAddress(byte* deviceAddress) {
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
	memcpy(_ownAddress, deviceAddress, 8);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	3330      	adds	r3, #48	; 0x30
 8004496:	2208      	movs	r2, #8
 8004498:	6839      	ldr	r1, [r7, #0]
 800449a:	4618      	mov	r0, r3
 800449c:	f005 febe 	bl	800a21c <memcpy>
}
 80044a0:	bf00      	nop
 80044a2:	3708      	adds	r7, #8
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <_ZN12DW1000Device15setShortAddressEPh>:

void DW1000Device::setShortAddress(byte deviceAddress[]) {
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
	memcpy(_shortAddress, deviceAddress, 2);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	3338      	adds	r3, #56	; 0x38
 80044b6:	683a      	ldr	r2, [r7, #0]
 80044b8:	8812      	ldrh	r2, [r2, #0]
 80044ba:	b292      	uxth	r2, r2
 80044bc:	801a      	strh	r2, [r3, #0]
}
 80044be:	bf00      	nop
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
	...

080044cc <_ZN12DW1000Device8setRangeEf>:


void DW1000Device::setRange(float range) { _range = round(range*100); }
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	ed87 0a00 	vstr	s0, [r7]
 80044d8:	edd7 7a00 	vldr	s15, [r7]
 80044dc:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8004508 <_ZN12DW1000Device8setRangeEf+0x3c>
 80044e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044e4:	eeb0 0a67 	vmov.f32	s0, s15
 80044e8:	f7ff fef4 	bl	80042d4 <_ZSt5roundf>
 80044ec:	eef0 7a40 	vmov.f32	s15, s0
 80044f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044f4:	ee17 3a90 	vmov	r3, s15
 80044f8:	b21a      	sxth	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8004500:	bf00      	nop
 8004502:	3708      	adds	r7, #8
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	42c80000 	.word	0x42c80000

0800450c <_ZN12DW1000Device10setRXPowerEf>:

void DW1000Device::setRXPower(float RXPower) { _RXPower = round(RXPower*100); }
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	ed87 0a00 	vstr	s0, [r7]
 8004518:	edd7 7a00 	vldr	s15, [r7]
 800451c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8004548 <_ZN12DW1000Device10setRXPowerEf+0x3c>
 8004520:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004524:	eeb0 0a67 	vmov.f32	s0, s15
 8004528:	f7ff fed4 	bl	80042d4 <_ZSt5roundf>
 800452c:	eef0 7a40 	vmov.f32	s15, s0
 8004530:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004534:	ee17 3a90 	vmov	r3, s15
 8004538:	b21a      	sxth	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004540:	bf00      	nop
 8004542:	3708      	adds	r7, #8
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	42c80000 	.word	0x42c80000

0800454c <_ZN12DW1000Device10setFPPowerEf>:

void DW1000Device::setFPPower(float FPPower) { _FPPower = round(FPPower*100); }
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	ed87 0a00 	vstr	s0, [r7]
 8004558:	edd7 7a00 	vldr	s15, [r7]
 800455c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8004588 <_ZN12DW1000Device10setFPPowerEf+0x3c>
 8004560:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004564:	eeb0 0a67 	vmov.f32	s0, s15
 8004568:	f7ff feb4 	bl	80042d4 <_ZSt5roundf>
 800456c:	eef0 7a40 	vmov.f32	s15, s0
 8004570:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004574:	ee17 3a90 	vmov	r3, s15
 8004578:	b21a      	sxth	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8004580:	bf00      	nop
 8004582:	3708      	adds	r7, #8
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	42c80000 	.word	0x42c80000

0800458c <_ZN12DW1000Device10setQualityEf>:

void DW1000Device::setQuality(float quality) { _quality = round(quality*100); }
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	ed87 0a00 	vstr	s0, [r7]
 8004598:	edd7 7a00 	vldr	s15, [r7]
 800459c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80045c8 <_ZN12DW1000Device10setQualityEf+0x3c>
 80045a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045a4:	eeb0 0a67 	vmov.f32	s0, s15
 80045a8:	f7ff fe94 	bl	80042d4 <_ZSt5roundf>
 80045ac:	eef0 7a40 	vmov.f32	s15, s0
 80045b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045b4:	ee17 3a90 	vmov	r3, s15
 80045b8:	b21a      	sxth	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 80045c0:	bf00      	nop
 80045c2:	3708      	adds	r7, #8
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	42c80000 	.word	0x42c80000

080045cc <_ZN12DW1000Device14getByteAddressEv>:


byte* DW1000Device::getByteAddress() {
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
	return _ownAddress;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	3330      	adds	r3, #48	; 0x30
}
 80045d8:	4618      	mov	r0, r3
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <_ZN12DW1000Device19getByteShortAddressEv>:
    sprintf(string, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X",
            _ownAddress[0], _ownAddress[1], _ownAddress[2], _ownAddress[3], _ownAddress[4], _ownAddress[5], _ownAddress[6], _ownAddress[7]);
    return String(string);
}*/

byte* DW1000Device::getByteShortAddress() {
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
	return _shortAddress;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	3338      	adds	r3, #56	; 0x38
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <_ZN12DW1000Device14isAddressEqualEPS_>:
uint16_t DW1000Device::getShortAddress() {
	return _shortAddress[1]*256+_shortAddress[0];
}


bool DW1000Device::isAddressEqual(DW1000Device* device) {
 80045fc:	b590      	push	{r4, r7, lr}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
	return memcmp(this->getByteAddress(), device->getByteAddress(), 8) == 0;
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7ff ffe0 	bl	80045cc <_ZN12DW1000Device14getByteAddressEv>
 800460c:	4604      	mov	r4, r0
 800460e:	6838      	ldr	r0, [r7, #0]
 8004610:	f7ff ffdc 	bl	80045cc <_ZN12DW1000Device14getByteAddressEv>
 8004614:	4603      	mov	r3, r0
 8004616:	2208      	movs	r2, #8
 8004618:	4619      	mov	r1, r3
 800461a:	4620      	mov	r0, r4
 800461c:	f005 fdee 	bl	800a1fc <memcmp>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	bf0c      	ite	eq
 8004626:	2301      	moveq	r3, #1
 8004628:	2300      	movne	r3, #0
 800462a:	b2db      	uxtb	r3, r3
}
 800462c:	4618      	mov	r0, r3
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	bd90      	pop	{r4, r7, pc}

08004634 <_ZN12DW1000Device19isShortAddressEqualEPS_>:

bool DW1000Device::isShortAddressEqual(DW1000Device* device) {
 8004634:	b590      	push	{r4, r7, lr}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
	return memcmp(this->getByteShortAddress(), device->getByteShortAddress(), 2) == 0;
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f7ff ffd0 	bl	80045e4 <_ZN12DW1000Device19getByteShortAddressEv>
 8004644:	4604      	mov	r4, r0
 8004646:	6838      	ldr	r0, [r7, #0]
 8004648:	f7ff ffcc 	bl	80045e4 <_ZN12DW1000Device19getByteShortAddressEv>
 800464c:	4603      	mov	r3, r0
 800464e:	2202      	movs	r2, #2
 8004650:	4619      	mov	r1, r3
 8004652:	4620      	mov	r0, r4
 8004654:	f005 fdd2 	bl	800a1fc <memcmp>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	bf0c      	ite	eq
 800465e:	2301      	moveq	r3, #1
 8004660:	2300      	movne	r3, #0
 8004662:	b2db      	uxtb	r3, r3
}
 8004664:	4618      	mov	r0, r3
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	bd90      	pop	{r4, r7, pc}

0800466c <_ZN12DW1000Device8getRangeEv>:


float DW1000Device::getRange() { return float(_range)/100.0f; }
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800467a:	ee07 3a90 	vmov	s15, r3
 800467e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004682:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800469c <_ZN12DW1000Device8getRangeEv+0x30>
 8004686:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800468a:	eef0 7a66 	vmov.f32	s15, s13
 800468e:	eeb0 0a67 	vmov.f32	s0, s15
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr
 800469c:	42c80000 	.word	0x42c80000

080046a0 <_ZN12DW1000Device10getRXPowerEv>:

float DW1000Device::getRXPower() { return float(_RXPower)/100.0f; }
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 80046ae:	ee07 3a90 	vmov	s15, r3
 80046b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046b6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80046d0 <_ZN12DW1000Device10getRXPowerEv+0x30>
 80046ba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80046be:	eef0 7a66 	vmov.f32	s15, s13
 80046c2:	eeb0 0a67 	vmov.f32	s0, s15
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr
 80046d0:	42c80000 	.word	0x42c80000

080046d4 <_ZN12DW1000Device18randomShortAddressEv>:
float DW1000Device::getFPPower() { return float(_FPPower)/100.0f; }

float DW1000Device::getQuality() { return float(_quality)/100.0f; }


void DW1000Device::randomShortAddress() {
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
	_shortAddress[0] = rand() % 256;
 80046dc:	f006 fafe 	bl	800acdc <rand>
 80046e0:	4603      	mov	r3, r0
 80046e2:	425a      	negs	r2, r3
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	b2d2      	uxtb	r2, r2
 80046e8:	bf58      	it	pl
 80046ea:	4253      	negpl	r3, r2
 80046ec:	b2da      	uxtb	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	_shortAddress[1] = rand() % 256;
 80046f4:	f006 faf2 	bl	800acdc <rand>
 80046f8:	4603      	mov	r3, r0
 80046fa:	425a      	negs	r2, r3
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	b2d2      	uxtb	r2, r2
 8004700:	bf58      	it	pl
 8004702:	4253      	negpl	r3, r2
 8004704:	b2da      	uxtb	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800470c:	bf00      	nop
 800470e:	3708      	adds	r7, #8
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <_ZN12DW1000Device12noteActivityEv>:

void DW1000Device::noteActivity() {
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
	_activity = HAL_GetTick();
 800471c:	f002 ffa8 	bl	8007670 <HAL_GetTick>
 8004720:	4603      	mov	r3, r0
 8004722:	461a      	mov	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004728:	bf00      	nop
 800472a:	3708      	adds	r7, #8
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <_ZN12DW1000Device10isInactiveEv>:


bool DW1000Device::isInactive() {
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
	//One second of inactivity
	if(HAL_GetTick()-_activity > INACTIVITY_TIME) {
 8004738:	f002 ff9a 	bl	8007670 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004748:	bf8c      	ite	hi
 800474a:	2301      	movhi	r3, #1
 800474c:	2300      	movls	r3, #0
 800474e:	b2db      	uxtb	r3, r3
 8004750:	2b00      	cmp	r3, #0
 8004752:	d007      	beq.n	8004764 <_ZN12DW1000Device10isInactiveEv+0x34>
		_activity = HAL_GetTick();
 8004754:	f002 ff8c 	bl	8007670 <HAL_GetTick>
 8004758:	4603      	mov	r3, r0
 800475a:	461a      	mov	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	63da      	str	r2, [r3, #60]	; 0x3c
		return true;
 8004760:	2301      	movs	r3, #1
 8004762:	e000      	b.n	8004766 <_ZN12DW1000Device10isInactiveEv+0x36>
	}
	return false;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3708      	adds	r7, #8
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}

0800476e <_ZN9DW1000MacC1Ev>:
#include "DW1000Mac.h" 
#include "DW1000Ranging.h"

//Constructor and destructor

DW1000Mac::DW1000Mac() {
 800476e:	b480      	push	{r7}
 8004770:	b083      	sub	sp, #12
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	701a      	strb	r2, [r3, #0]
	_seqNumber = 0;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	701a      	strb	r2, [r3, #0]
}
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4618      	mov	r0, r3
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <_ZN9DW1000MacD1Ev>:


DW1000Mac::~DW1000Mac() {
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
}
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4618      	mov	r0, r3
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr

080047a6 <_ZN9DW1000Mac18generateBlinkFrameEPhS0_S0_>:

//for poll message we use just 2 bytes address
//total=12 bytes
void DW1000Mac::generateBlinkFrame(byte frame[], byte sourceAddress[], byte sourceShortAddress[]) {
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b088      	sub	sp, #32
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	60f8      	str	r0, [r7, #12]
 80047ae:	60b9      	str	r1, [r7, #8]
 80047b0:	607a      	str	r2, [r7, #4]
 80047b2:	603b      	str	r3, [r7, #0]
	//Frame Control
	*frame     = FC_1_BLINK;
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	22c5      	movs	r2, #197	; 0xc5
 80047b8:	701a      	strb	r2, [r3, #0]
	//sequence number
	*(frame+1) = _seqNumber;
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	3301      	adds	r3, #1
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	7812      	ldrb	r2, [r2, #0]
 80047c2:	701a      	strb	r2, [r3, #0]
	//tag 64 bit ID (8 bytes address) -- reverse
	byte sourceAddressReverse[8];
	reverseArray(sourceAddressReverse, sourceAddress, 8);
 80047c4:	f107 0118 	add.w	r1, r7, #24
 80047c8:	2308      	movs	r3, #8
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f000 f8f7 	bl	80049c0 <_ZN9DW1000Mac12reverseArrayEPhS0_s>
	memcpy(frame+2, sourceAddressReverse, 8);
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	3302      	adds	r3, #2
 80047d6:	461a      	mov	r2, r3
 80047d8:	f107 0318 	add.w	r3, r7, #24
 80047dc:	cb03      	ldmia	r3!, {r0, r1}
 80047de:	6010      	str	r0, [r2, #0]
 80047e0:	6051      	str	r1, [r2, #4]
	
	//tag 2bytes address:
	byte sourceShortAddressReverse[2];
	reverseArray(sourceShortAddressReverse, sourceShortAddress, 2);
 80047e2:	f107 0114 	add.w	r1, r7, #20
 80047e6:	2302      	movs	r3, #2
 80047e8:	683a      	ldr	r2, [r7, #0]
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f000 f8e8 	bl	80049c0 <_ZN9DW1000Mac12reverseArrayEPhS0_s>
	memcpy(frame+10, sourceShortAddressReverse, 2);
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	330a      	adds	r3, #10
 80047f4:	8aba      	ldrh	r2, [r7, #20]
 80047f6:	801a      	strh	r2, [r3, #0]
	
	//we increment seqNumber
	incrementSeqNumber();
 80047f8:	68f8      	ldr	r0, [r7, #12]
 80047fa:	f000 f8c9 	bl	8004990 <_ZN9DW1000Mac18incrementSeqNumberEv>
}
 80047fe:	bf00      	nop
 8004800:	3720      	adds	r7, #32
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <_ZN9DW1000Mac21generateShortMACFrameEPhS0_S0_>:

//the short fram usually for Resp, Final, or Report
//2 bytes for Desination Address and 2 bytes for Source Address
//total=9 bytes
void DW1000Mac::generateShortMACFrame(byte frame[], byte sourceShortAddress[], byte destinationShortAddress[]) {
 8004806:	b580      	push	{r7, lr}
 8004808:	b086      	sub	sp, #24
 800480a:	af00      	add	r7, sp, #0
 800480c:	60f8      	str	r0, [r7, #12]
 800480e:	60b9      	str	r1, [r7, #8]
 8004810:	607a      	str	r2, [r7, #4]
 8004812:	603b      	str	r3, [r7, #0]
	//Frame controle
	*frame     = FC_1;
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	2241      	movs	r2, #65	; 0x41
 8004818:	701a      	strb	r2, [r3, #0]
	*(frame+1) = FC_2_SHORT;
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	3301      	adds	r3, #1
 800481e:	2288      	movs	r2, #136	; 0x88
 8004820:	701a      	strb	r2, [r3, #0]
	//sequence number (11.3) modulo 256
	*(frame+2) = _seqNumber;
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	3302      	adds	r3, #2
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	7812      	ldrb	r2, [r2, #0]
 800482a:	701a      	strb	r2, [r3, #0]
	//PAN ID
	*(frame+3) = 0xCA;
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	3303      	adds	r3, #3
 8004830:	22ca      	movs	r2, #202	; 0xca
 8004832:	701a      	strb	r2, [r3, #0]
	*(frame+4) = 0xDE;
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	3304      	adds	r3, #4
 8004838:	22de      	movs	r2, #222	; 0xde
 800483a:	701a      	strb	r2, [r3, #0]
	
	
	//destination address (2 bytes)
	byte destinationShortAddressReverse[2];
	reverseArray(destinationShortAddressReverse, destinationShortAddress, 2);
 800483c:	f107 0114 	add.w	r1, r7, #20
 8004840:	2302      	movs	r3, #2
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	68f8      	ldr	r0, [r7, #12]
 8004846:	f000 f8bb 	bl	80049c0 <_ZN9DW1000Mac12reverseArrayEPhS0_s>
	memcpy(frame+5, destinationShortAddressReverse, 2);
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	3305      	adds	r3, #5
 800484e:	8aba      	ldrh	r2, [r7, #20]
 8004850:	801a      	strh	r2, [r3, #0]
	
	//source address (2 bytes)
	byte sourceShortAddressReverse[2];
	reverseArray(sourceShortAddressReverse, sourceShortAddress, 2);
 8004852:	f107 0110 	add.w	r1, r7, #16
 8004856:	2302      	movs	r3, #2
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f000 f8b0 	bl	80049c0 <_ZN9DW1000Mac12reverseArrayEPhS0_s>
	memcpy(frame+7, sourceShortAddressReverse, 2);
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	3307      	adds	r3, #7
 8004864:	8a3a      	ldrh	r2, [r7, #16]
 8004866:	801a      	strh	r2, [r3, #0]
	
	
	//we increment seqNumber
	incrementSeqNumber();
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f000 f891 	bl	8004990 <_ZN9DW1000Mac18incrementSeqNumberEv>
}
 800486e:	bf00      	nop
 8004870:	3718      	adds	r7, #24
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <_ZN9DW1000Mac20generateLongMACFrameEPhS0_S0_>:

//the long frame for Ranging init
//8 bytes for Destination Address and 2 bytes for Source Address
//total=15
void DW1000Mac::generateLongMACFrame(byte frame[], byte sourceShortAddress[], byte destinationAddress[]) {
 8004876:	b580      	push	{r7, lr}
 8004878:	b088      	sub	sp, #32
 800487a:	af00      	add	r7, sp, #0
 800487c:	60f8      	str	r0, [r7, #12]
 800487e:	60b9      	str	r1, [r7, #8]
 8004880:	607a      	str	r2, [r7, #4]
 8004882:	603b      	str	r3, [r7, #0]
	//Frame controle
	*frame     = FC_1;
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	2241      	movs	r2, #65	; 0x41
 8004888:	701a      	strb	r2, [r3, #0]
	*(frame+1) = FC_2;
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	3301      	adds	r3, #1
 800488e:	228c      	movs	r2, #140	; 0x8c
 8004890:	701a      	strb	r2, [r3, #0]
	//sequence number
	*(frame+2) = _seqNumber;
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	3302      	adds	r3, #2
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	7812      	ldrb	r2, [r2, #0]
 800489a:	701a      	strb	r2, [r3, #0]
	//PAN ID (0xDECA)
	*(frame+3) = 0xCA;
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	3303      	adds	r3, #3
 80048a0:	22ca      	movs	r2, #202	; 0xca
 80048a2:	701a      	strb	r2, [r3, #0]
	*(frame+4) = 0xDE;
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	3304      	adds	r3, #4
 80048a8:	22de      	movs	r2, #222	; 0xde
 80048aa:	701a      	strb	r2, [r3, #0]
	
	//destination address (8 bytes) - we need to reverse the byte array
	byte destinationAddressReverse[8];
	reverseArray(destinationAddressReverse, destinationAddress, 8);
 80048ac:	f107 0118 	add.w	r1, r7, #24
 80048b0:	2308      	movs	r3, #8
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	f000 f883 	bl	80049c0 <_ZN9DW1000Mac12reverseArrayEPhS0_s>
	memcpy(frame+5, destinationAddressReverse, 8);
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	3305      	adds	r3, #5
 80048be:	461a      	mov	r2, r3
 80048c0:	f107 0318 	add.w	r3, r7, #24
 80048c4:	cb03      	ldmia	r3!, {r0, r1}
 80048c6:	6010      	str	r0, [r2, #0]
 80048c8:	6051      	str	r1, [r2, #4]
	
	//source address (2 bytes)
	byte sourceShortAddressReverse[2];
	reverseArray(sourceShortAddressReverse, sourceShortAddress, 2);
 80048ca:	f107 0114 	add.w	r1, r7, #20
 80048ce:	2302      	movs	r3, #2
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	68f8      	ldr	r0, [r7, #12]
 80048d4:	f000 f874 	bl	80049c0 <_ZN9DW1000Mac12reverseArrayEPhS0_s>
	memcpy(frame+13, sourceShortAddressReverse, 2);
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	330d      	adds	r3, #13
 80048dc:	8aba      	ldrh	r2, [r7, #20]
 80048de:	801a      	strh	r2, [r3, #0]
	
	//we increment seqNumber
	incrementSeqNumber();
 80048e0:	68f8      	ldr	r0, [r7, #12]
 80048e2:	f000 f855 	bl	8004990 <_ZN9DW1000Mac18incrementSeqNumberEv>
}
 80048e6:	bf00      	nop
 80048e8:	3720      	adds	r7, #32
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}

080048ee <_ZN9DW1000Mac16decodeBlinkFrameEPhS0_S0_>:


void DW1000Mac::decodeBlinkFrame(byte frame[], byte address[], byte shortAddress[]) {
 80048ee:	b580      	push	{r7, lr}
 80048f0:	b088      	sub	sp, #32
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	60f8      	str	r0, [r7, #12]
 80048f6:	60b9      	str	r1, [r7, #8]
 80048f8:	607a      	str	r2, [r7, #4]
 80048fa:	603b      	str	r3, [r7, #0]
	//we save the long address of the sender into the device. -- reverse direction
	byte reverseAddress[8];
	memcpy(reverseAddress, frame+2, 8);
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	1c9a      	adds	r2, r3, #2
 8004900:	f107 0318 	add.w	r3, r7, #24
 8004904:	6810      	ldr	r0, [r2, #0]
 8004906:	6851      	ldr	r1, [r2, #4]
 8004908:	c303      	stmia	r3!, {r0, r1}
	reverseArray(address, reverseAddress, 8);
 800490a:	f107 0218 	add.w	r2, r7, #24
 800490e:	2308      	movs	r3, #8
 8004910:	6879      	ldr	r1, [r7, #4]
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f000 f854 	bl	80049c0 <_ZN9DW1000Mac12reverseArrayEPhS0_s>
	
	byte reverseShortAddress[2];
	memcpy(reverseShortAddress, frame+10, 2);
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	330a      	adds	r3, #10
 800491c:	881b      	ldrh	r3, [r3, #0]
 800491e:	b29b      	uxth	r3, r3
 8004920:	82bb      	strh	r3, [r7, #20]
	reverseArray(shortAddress, reverseShortAddress, 2);
 8004922:	f107 0214 	add.w	r2, r7, #20
 8004926:	2302      	movs	r3, #2
 8004928:	6839      	ldr	r1, [r7, #0]
 800492a:	68f8      	ldr	r0, [r7, #12]
 800492c:	f000 f848 	bl	80049c0 <_ZN9DW1000Mac12reverseArrayEPhS0_s>
}
 8004930:	bf00      	nop
 8004932:	3720      	adds	r7, #32
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <_ZN9DW1000Mac19decodeShortMACFrameEPhS0_>:

void DW1000Mac::decodeShortMACFrame(byte frame[], byte address[]) {
 8004938:	b580      	push	{r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
	byte reverseAddress[2];
	memcpy(reverseAddress, frame+7, 2);
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	3307      	adds	r3, #7
 8004948:	881b      	ldrh	r3, [r3, #0]
 800494a:	b29b      	uxth	r3, r3
 800494c:	82bb      	strh	r3, [r7, #20]
	reverseArray(address, reverseAddress, 2);
 800494e:	f107 0214 	add.w	r2, r7, #20
 8004952:	2302      	movs	r3, #2
 8004954:	6879      	ldr	r1, [r7, #4]
 8004956:	68f8      	ldr	r0, [r7, #12]
 8004958:	f000 f832 	bl	80049c0 <_ZN9DW1000Mac12reverseArrayEPhS0_s>
	//we grab the destination address for the mac frame
	//byte destinationAddress[2];
	//memcpy(destinationAddress, frame+5, 2);
}
 800495c:	bf00      	nop
 800495e:	3718      	adds	r7, #24
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <_ZN9DW1000Mac18decodeLongMACFrameEPhS0_>:

void DW1000Mac::decodeLongMACFrame(byte frame[], byte address[]) {
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
	byte reverseAddress[2];
	memcpy(reverseAddress, frame+13, 2);
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	330d      	adds	r3, #13
 8004974:	881b      	ldrh	r3, [r3, #0]
 8004976:	b29b      	uxth	r3, r3
 8004978:	82bb      	strh	r3, [r7, #20]
	reverseArray(address, reverseAddress, 2);
 800497a:	f107 0214 	add.w	r2, r7, #20
 800497e:	2302      	movs	r3, #2
 8004980:	6879      	ldr	r1, [r7, #4]
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	f000 f81c 	bl	80049c0 <_ZN9DW1000Mac12reverseArrayEPhS0_s>
	//we grab the destination address for the mac frame
	//byte destinationAddress[8];
	//memcpy(destinationAddress, frame+5, 8);
}
 8004988:	bf00      	nop
 800498a:	3718      	adds	r7, #24
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <_ZN9DW1000Mac18incrementSeqNumberEv>:


void DW1000Mac::incrementSeqNumber() {
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
	// normally overflow of uint8 automatically resets to 0 if over 255
	// but if-clause seems safer way
	if(_seqNumber == 255)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	2bff      	cmp	r3, #255	; 0xff
 800499e:	d103      	bne.n	80049a8 <_ZN9DW1000Mac18incrementSeqNumberEv+0x18>
		_seqNumber = 0;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	701a      	strb	r2, [r3, #0]
	else
		_seqNumber++;
}
 80049a6:	e005      	b.n	80049b4 <_ZN9DW1000Mac18incrementSeqNumberEv+0x24>
		_seqNumber++;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	3301      	adds	r3, #1
 80049ae:	b2da      	uxtb	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	701a      	strb	r2, [r3, #0]
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <_ZN9DW1000Mac12reverseArrayEPhS0_s>:

void DW1000Mac::reverseArray(byte to[], byte from[], int16_t size) {
 80049c0:	b480      	push	{r7}
 80049c2:	b087      	sub	sp, #28
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
 80049cc:	807b      	strh	r3, [r7, #2]
	for(int16_t i = 0; i < size; i++) {
 80049ce:	2300      	movs	r3, #0
 80049d0:	82fb      	strh	r3, [r7, #22]
 80049d2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80049d6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80049da:	429a      	cmp	r2, r3
 80049dc:	da14      	bge.n	8004a08 <_ZN9DW1000Mac12reverseArrayEPhS0_s+0x48>
		*(to+i) = *(from+size-i-1);
 80049de:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80049e2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	3b01      	subs	r3, #1
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	441a      	add	r2, r3
 80049ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80049f2:	68b9      	ldr	r1, [r7, #8]
 80049f4:	440b      	add	r3, r1
 80049f6:	7812      	ldrb	r2, [r2, #0]
 80049f8:	701a      	strb	r2, [r3, #0]
	for(int16_t i = 0; i < size; i++) {
 80049fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	3301      	adds	r3, #1
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	82fb      	strh	r3, [r7, #22]
 8004a06:	e7e4      	b.n	80049d2 <_ZN9DW1000Mac12reverseArrayEPhS0_s+0x12>
	}
}
 8004a08:	bf00      	nop
 8004a0a:	371c      	adds	r7, #28
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <_ZN11DW1000Class17attachSentHandlerEPFvvE>:
	/* callback handler management. */
	static void attachErrorHandler(void (* handleError)(void)) {
		_handleError = handleError;
	}

	static void attachSentHandler(void (* handleSent)(void)) {
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
		_handleSent = handleSent;
 8004a1c:	4a04      	ldr	r2, [pc, #16]	; (8004a30 <_ZN11DW1000Class17attachSentHandlerEPFvvE+0x1c>)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6013      	str	r3, [r2, #0]
	}
 8004a22:	bf00      	nop
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	2000026c 	.word	0x2000026c

08004a34 <_ZN11DW1000Class21attachReceivedHandlerEPFvvE>:

	static void attachReceivedHandler(void (* handleReceived)(void)) {
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
		_handleReceived = handleReceived;
 8004a3c:	4a04      	ldr	r2, [pc, #16]	; (8004a50 <_ZN11DW1000Class21attachReceivedHandlerEPFvvE+0x1c>)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6013      	str	r3, [r2, #0]
	}
 8004a42:	bf00      	nop
 8004a44:	370c      	adds	r7, #12
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	20000274 	.word	0x20000274

08004a54 <_ZN12DW1000Device8setIndexEa>:
	void setFPPower(float power);
	void setQuality(float quality);
	
	void setReplyDelayTime(uint16_t time) { _replyDelayTimeUS = time; }
	
	void setIndex(int8_t index) { _index = index; }
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	70fb      	strb	r3, [r7, #3]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	78fa      	ldrb	r2, [r7, #3]
 8004a64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <_ZN12DW1000Device12getReplyTimeEv>:
	
	//getters
	uint16_t getReplyTime() { return _replyDelayTimeUS; }
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004a82:	4618      	mov	r0, r3
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <_ZN12DW1000Device8getIndexEv>:
	
	byte* getByteAddress();
	
	int8_t getIndex() { return _index; }
 8004a8e:	b480      	push	{r7}
 8004a90:	b083      	sub	sp, #12
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f993 3042 	ldrsb.w	r3, [r3, #66]	; 0x42
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <_ZN18DW1000RangingClass17initCommunicationEP20__UART_HandleTypeDefP12dwt_config_t>:

/* ###########################################################################
 * #### Init and end #######################################################
 * ######################################################################### */

void DW1000RangingClass::initCommunication(UART_HandleTypeDef *main_uart, dwt_config_t *cfg) {
 8004aa8:	b590      	push	{r4, r7, lr}
 8004aaa:	b08b      	sub	sp, #44	; 0x2c
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]

	uint8_t buffer_uart[] = "INIT BEGIN\r\n";  // начало строки, новая строка
 8004ab2:	4b22      	ldr	r3, [pc, #136]	; (8004b3c <_ZN18DW1000RangingClass17initCommunicationEP20__UART_HandleTypeDefP12dwt_config_t+0x94>)
 8004ab4:	f107 0418 	add.w	r4, r7, #24
 8004ab8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004aba:	c407      	stmia	r4!, {r0, r1, r2}
 8004abc:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(main_uart, buffer_uart, sizeof(buffer_uart), 100);
 8004abe:	f107 0118 	add.w	r1, r7, #24
 8004ac2:	2364      	movs	r3, #100	; 0x64
 8004ac4:	220d      	movs	r2, #13
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f004 fe51 	bl	800976e <HAL_UART_Transmit>

	_resetPeriod      = DEFAULT_RESET_PERIOD;
 8004acc:	4b1c      	ldr	r3, [pc, #112]	; (8004b40 <_ZN18DW1000RangingClass17initCommunicationEP20__UART_HandleTypeDefP12dwt_config_t+0x98>)
 8004ace:	22c8      	movs	r2, #200	; 0xc8
 8004ad0:	601a      	str	r2, [r3, #0]
	// reply times (same on both sides for symm. ranging)
	_replyDelayTimeUS = DEFAULT_REPLY_DELAY_TIME;
 8004ad2:	4b1c      	ldr	r3, [pc, #112]	; (8004b44 <_ZN18DW1000RangingClass17initCommunicationEP20__UART_HandleTypeDefP12dwt_config_t+0x9c>)
 8004ad4:	f641 3258 	movw	r2, #7000	; 0x1b58
 8004ad8:	801a      	strh	r2, [r3, #0]
	//we set our timer delay
	_timerDelay       = DEFAULT_TIMER_DELAY;
 8004ada:	4b1b      	ldr	r3, [pc, #108]	; (8004b48 <_ZN18DW1000RangingClass17initCommunicationEP20__UART_HandleTypeDefP12dwt_config_t+0xa0>)
 8004adc:	2250      	movs	r2, #80	; 0x50
 8004ade:	801a      	strh	r2, [r3, #0]

//    port_set_deca_isr(dwt_isr);



	port_set_deca_isr(DW1000.handleInterrupt);
 8004ae0:	481a      	ldr	r0, [pc, #104]	; (8004b4c <_ZN18DW1000RangingClass17initCommunicationEP20__UART_HandleTypeDefP12dwt_config_t+0xa4>)
 8004ae2:	f002 fd49 	bl	8007578 <port_set_deca_isr>
	reset_DW1000(); /* Target specific drive of RSTn line into DW1000 low for a period. */
 8004ae6:	f002 fc89 	bl	80073fc <reset_DW1000>
	port_set_dw1000_slowrate();
 8004aea:	f002 fce3 	bl	80074b4 <port_set_dw1000_slowrate>
	if (dwt_initialise(DWT_LOADUCODE) == DWT_ERROR) while (1) { };
 8004aee:	2001      	movs	r0, #1
 8004af0:	f7fc fbee 	bl	80012d0 <dwt_initialise>
 8004af4:	4603      	mov	r3, r0
 8004af6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004afa:	bf0c      	ite	eq
 8004afc:	2301      	moveq	r3, #1
 8004afe:	2300      	movne	r3, #0
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d000      	beq.n	8004b08 <_ZN18DW1000RangingClass17initCommunicationEP20__UART_HandleTypeDefP12dwt_config_t+0x60>
 8004b06:	e7fe      	b.n	8004b06 <_ZN18DW1000RangingClass17initCommunicationEP20__UART_HandleTypeDefP12dwt_config_t+0x5e>
	port_set_dw1000_fastrate();
 8004b08:	f002 fce0 	bl	80074cc <port_set_dw1000_fastrate>
	/* Configure DW1000. See NOTE 6 below. */
	dwt_configure(cfg);
 8004b0c:	6838      	ldr	r0, [r7, #0]
 8004b0e:	f7fc fd35 	bl	800157c <dwt_configure>

	uint8_t buffer_uart1[] = "INIT END\r\n";  // начало строки, новая строка
 8004b12:	4a0f      	ldr	r2, [pc, #60]	; (8004b50 <_ZN18DW1000RangingClass17initCommunicationEP20__UART_HandleTypeDefP12dwt_config_t+0xa8>)
 8004b14:	f107 030c 	add.w	r3, r7, #12
 8004b18:	ca07      	ldmia	r2, {r0, r1, r2}
 8004b1a:	c303      	stmia	r3!, {r0, r1}
 8004b1c:	801a      	strh	r2, [r3, #0]
 8004b1e:	3302      	adds	r3, #2
 8004b20:	0c12      	lsrs	r2, r2, #16
 8004b22:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(main_uart, buffer_uart1, sizeof(buffer_uart1), 100);
 8004b24:	f107 010c 	add.w	r1, r7, #12
 8004b28:	2364      	movs	r3, #100	; 0x64
 8004b2a:	220b      	movs	r2, #11
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f004 fe1e 	bl	800976e <HAL_UART_Transmit>
}
 8004b32:	bf00      	nop
 8004b34:	372c      	adds	r7, #44	; 0x2c
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd90      	pop	{r4, r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	0800d078 	.word	0x0800d078
 8004b40:	20000488 	.word	0x20000488
 8004b44:	2000048c 	.word	0x2000048c
 8004b48:	2000048e 	.word	0x2000048e
 8004b4c:	080029a9 	.word	0x080029a9
 8004b50:	0800d088 	.word	0x0800d088

08004b54 <_ZN18DW1000RangingClass16configureNetworkEttPKh>:


void DW1000RangingClass::configureNetwork(uint16_t deviceAddress, uint16_t networkId, const byte mode[]) {
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	603a      	str	r2, [r7, #0]
 8004b5e:	80fb      	strh	r3, [r7, #6]
 8004b60:	460b      	mov	r3, r1
 8004b62:	80bb      	strh	r3, [r7, #4]
	// general configuration
	DW1000.newConfiguration();
 8004b64:	f7fe fa4a 	bl	8002ffc <_ZN11DW1000Class16newConfigurationEv>
	DW1000.setDefaults();
 8004b68:	f7fe ff0e 	bl	8003988 <_ZN11DW1000Class11setDefaultsEv>
	DW1000.setDeviceAddress(deviceAddress);
 8004b6c:	88fb      	ldrh	r3, [r7, #6]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7fe f856 	bl	8002c20 <_ZN11DW1000Class16setDeviceAddressEt>
	DW1000.setNetworkId(networkId);
 8004b74:	88bb      	ldrh	r3, [r7, #4]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7fe f83a 	bl	8002bf0 <_ZN11DW1000Class12setNetworkIdEt>
	DW1000.enableMode(mode);
 8004b7c:	6838      	ldr	r0, [r7, #0]
 8004b7e:	f7fd f965 	bl	8001e4c <_ZN11DW1000Class10enableModeEPKh>
	DW1000.commitConfiguration();
 8004b82:	f7fe fa4b 	bl	800301c <_ZN11DW1000Class19commitConfigurationEv>
	
}
 8004b86:	bf00      	nop
 8004b88:	3708      	adds	r7, #8
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
	...

08004b90 <_ZN18DW1000RangingClass12generalStartEv>:

void DW1000RangingClass::generalStart() {
 8004b90:	b580      	push	{r7, lr}
 8004b92:	af00      	add	r7, sp, #0
	// attach callback for (successfully) sent and received messages
	DW1000.attachSentHandler(handleSent);
 8004b94:	4808      	ldr	r0, [pc, #32]	; (8004bb8 <_ZN18DW1000RangingClass12generalStartEv+0x28>)
 8004b96:	f7ff ff3d 	bl	8004a14 <_ZN11DW1000Class17attachSentHandlerEPFvvE>
	DW1000.attachReceivedHandler(handleReceived);
 8004b9a:	4808      	ldr	r0, [pc, #32]	; (8004bbc <_ZN18DW1000RangingClass12generalStartEv+0x2c>)
 8004b9c:	f7ff ff4a 	bl	8004a34 <_ZN11DW1000Class21attachReceivedHandlerEPFvvE>
//		Serial.print("Device mode: ");
//		Serial.println(msg);
//	}
	
	// Vincent changes
	DW1000.large_power_init();
 8004ba0:	f7ff fb1a 	bl	80041d8 <_ZN11DW1000Class16large_power_initEv>
	
	// anchor starts in receiving mode, awaiting a ranging poll message
	receiver();
 8004ba4:	f001 fa58 	bl	8006058 <_ZN18DW1000RangingClass8receiverEv>
	// for first time ranging frequency computation
	_rangingCountPeriod = HAL_GetTick();
 8004ba8:	f002 fd62 	bl	8007670 <HAL_GetTick>
 8004bac:	4603      	mov	r3, r0
 8004bae:	4a04      	ldr	r2, [pc, #16]	; (8004bc0 <_ZN18DW1000RangingClass12generalStartEv+0x30>)
 8004bb0:	6013      	str	r3, [r2, #0]
}
 8004bb2:	bf00      	nop
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	080058e5 	.word	0x080058e5
 8004bbc:	080058fd 	.word	0x080058fd
 8004bc0:	20000490 	.word	0x20000490

08004bc4 <_ZN18DW1000RangingClass13startAsAnchorEPcPKhb>:


void DW1000RangingClass::startAsAnchor(char address[], const byte mode[], const bool randomShortAddress) {
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	4613      	mov	r3, r2
 8004bd0:	71fb      	strb	r3, [r7, #7]
	//save the address
	DW1000.convertToByte(address, _currentAddress);
 8004bd2:	4921      	ldr	r1, [pc, #132]	; (8004c58 <_ZN18DW1000RangingClass13startAsAnchorEPcPKhb+0x94>)
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	f7fe f865 	bl	8002ca4 <_ZN11DW1000Class13convertToByteEPcPh>
	//write the address on the DW1000 chip
	DW1000.setEUI(address);
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	f7fe f89d 	bl	8002d1a <_ZN11DW1000Class6setEUIEPc>
//	Serial.print("device address: ");
//	Serial.println(address);
	if (randomShortAddress) {
 8004be0:	79fb      	ldrb	r3, [r7, #7]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d016      	beq.n	8004c14 <_ZN18DW1000RangingClass13startAsAnchorEPcPKhb+0x50>
		//we need to define a random short address:
		_currentShortAddress[0] = rand() % 256;
 8004be6:	f006 f879 	bl	800acdc <rand>
 8004bea:	4603      	mov	r3, r0
 8004bec:	425a      	negs	r2, r3
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	b2d2      	uxtb	r2, r2
 8004bf2:	bf58      	it	pl
 8004bf4:	4253      	negpl	r3, r2
 8004bf6:	b2da      	uxtb	r2, r3
 8004bf8:	4b18      	ldr	r3, [pc, #96]	; (8004c5c <_ZN18DW1000RangingClass13startAsAnchorEPcPKhb+0x98>)
 8004bfa:	701a      	strb	r2, [r3, #0]
		_currentShortAddress[1] = rand() % 256;
 8004bfc:	f006 f86e 	bl	800acdc <rand>
 8004c00:	4603      	mov	r3, r0
 8004c02:	425a      	negs	r2, r3
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	b2d2      	uxtb	r2, r2
 8004c08:	bf58      	it	pl
 8004c0a:	4253      	negpl	r3, r2
 8004c0c:	b2da      	uxtb	r2, r3
 8004c0e:	4b13      	ldr	r3, [pc, #76]	; (8004c5c <_ZN18DW1000RangingClass13startAsAnchorEPcPKhb+0x98>)
 8004c10:	705a      	strb	r2, [r3, #1]
 8004c12:	e007      	b.n	8004c24 <_ZN18DW1000RangingClass13startAsAnchorEPcPKhb+0x60>
	}
	else {
		// we use first two bytes in address for short address
		_currentShortAddress[0] = _currentAddress[0];
 8004c14:	4b10      	ldr	r3, [pc, #64]	; (8004c58 <_ZN18DW1000RangingClass13startAsAnchorEPcPKhb+0x94>)
 8004c16:	781a      	ldrb	r2, [r3, #0]
 8004c18:	4b10      	ldr	r3, [pc, #64]	; (8004c5c <_ZN18DW1000RangingClass13startAsAnchorEPcPKhb+0x98>)
 8004c1a:	701a      	strb	r2, [r3, #0]
		_currentShortAddress[1] = _currentAddress[1];
 8004c1c:	4b0e      	ldr	r3, [pc, #56]	; (8004c58 <_ZN18DW1000RangingClass13startAsAnchorEPcPKhb+0x94>)
 8004c1e:	785a      	ldrb	r2, [r3, #1]
 8004c20:	4b0e      	ldr	r3, [pc, #56]	; (8004c5c <_ZN18DW1000RangingClass13startAsAnchorEPcPKhb+0x98>)
 8004c22:	705a      	strb	r2, [r3, #1]
	}
	
	//we configure the network for mac filtering
	//(device Address, network ID, frequency)
	DW1000Ranging.configureNetwork(_currentShortAddress[0]*256+_currentShortAddress[1], 0xDECA, mode);
 8004c24:	4b0d      	ldr	r3, [pc, #52]	; (8004c5c <_ZN18DW1000RangingClass13startAsAnchorEPcPKhb+0x98>)
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	021b      	lsls	r3, r3, #8
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	4b0b      	ldr	r3, [pc, #44]	; (8004c5c <_ZN18DW1000RangingClass13startAsAnchorEPcPKhb+0x98>)
 8004c30:	785b      	ldrb	r3, [r3, #1]
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	4413      	add	r3, r2
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	68ba      	ldr	r2, [r7, #8]
 8004c3a:	f64d 61ca 	movw	r1, #57034	; 0xdeca
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7ff ff88 	bl	8004b54 <_ZN18DW1000RangingClass16configureNetworkEttPKh>
	
	//general start:
	generalStart();
 8004c44:	f7ff ffa4 	bl	8004b90 <_ZN18DW1000RangingClass12generalStartEv>
	
	//defined type as anchor
	_type = ANCHOR;
 8004c48:	4b05      	ldr	r3, [pc, #20]	; (8004c60 <_ZN18DW1000RangingClass13startAsAnchorEPcPKhb+0x9c>)
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	801a      	strh	r2, [r3, #0]
	
//	Serial.println("### ANCHOR ###");
	
}
 8004c4e:	bf00      	nop
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	20000400 	.word	0x20000400
 8004c5c:	20000408 	.word	0x20000408
 8004c60:	20000416 	.word	0x20000416

08004c64 <_ZN18DW1000RangingClass17addNetworkDevicesEP12DW1000Deviceb>:
	_type = TAG;
	
//	Serial.println("### TAG ###");
}

bool DW1000RangingClass::addNetworkDevices(DW1000Device* device, bool shortAddress) {
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	70fb      	strb	r3, [r7, #3]
	bool   addDevice = true;
 8004c70:	2301      	movs	r3, #1
 8004c72:	73bb      	strb	r3, [r7, #14]
	//we test our network devices array to check
	//we don't already have it
	for(uint8_t i = 0; i < _networkDevicesNumber; i++) {
 8004c74:	2300      	movs	r3, #0
 8004c76:	73fb      	strb	r3, [r7, #15]
 8004c78:	4b3e      	ldr	r3, [pc, #248]	; (8004d74 <_ZN18DW1000RangingClass17addNetworkDevicesEP12DW1000Deviceb+0x110>)
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	7bfa      	ldrb	r2, [r7, #15]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	bf34      	ite	cc
 8004c84:	2301      	movcc	r3, #1
 8004c86:	2300      	movcs	r3, #0
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d03a      	beq.n	8004d04 <_ZN18DW1000RangingClass17addNetworkDevicesEP12DW1000Deviceb+0xa0>
		if(_networkDevices[i].isAddressEqual(device) && !shortAddress) {
 8004c8e:	7bfa      	ldrb	r2, [r7, #15]
 8004c90:	4613      	mov	r3, r2
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	4413      	add	r3, r2
 8004c96:	011b      	lsls	r3, r3, #4
 8004c98:	4a37      	ldr	r2, [pc, #220]	; (8004d78 <_ZN18DW1000RangingClass17addNetworkDevicesEP12DW1000Deviceb+0x114>)
 8004c9a:	4413      	add	r3, r2
 8004c9c:	6879      	ldr	r1, [r7, #4]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7ff fcac 	bl	80045fc <_ZN12DW1000Device14isAddressEqualEPS_>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d007      	beq.n	8004cba <_ZN18DW1000RangingClass17addNetworkDevicesEP12DW1000Deviceb+0x56>
 8004caa:	78fb      	ldrb	r3, [r7, #3]
 8004cac:	f083 0301 	eor.w	r3, r3, #1
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <_ZN18DW1000RangingClass17addNetworkDevicesEP12DW1000Deviceb+0x56>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e000      	b.n	8004cbc <_ZN18DW1000RangingClass17addNetworkDevicesEP12DW1000Deviceb+0x58>
 8004cba:	2300      	movs	r3, #0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d003      	beq.n	8004cc8 <_ZN18DW1000RangingClass17addNetworkDevicesEP12DW1000Deviceb+0x64>
			//the device already exists
			addDevice = false;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	73bb      	strb	r3, [r7, #14]
			return false;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	e050      	b.n	8004d6a <_ZN18DW1000RangingClass17addNetworkDevicesEP12DW1000Deviceb+0x106>
		}
		else if(_networkDevices[i].isShortAddressEqual(device) && shortAddress) {
 8004cc8:	7bfa      	ldrb	r2, [r7, #15]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	4413      	add	r3, r2
 8004cd0:	011b      	lsls	r3, r3, #4
 8004cd2:	4a29      	ldr	r2, [pc, #164]	; (8004d78 <_ZN18DW1000RangingClass17addNetworkDevicesEP12DW1000Deviceb+0x114>)
 8004cd4:	4413      	add	r3, r2
 8004cd6:	6879      	ldr	r1, [r7, #4]
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f7ff fcab 	bl	8004634 <_ZN12DW1000Device19isShortAddressEqualEPS_>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d004      	beq.n	8004cee <_ZN18DW1000RangingClass17addNetworkDevicesEP12DW1000Deviceb+0x8a>
 8004ce4:	78fb      	ldrb	r3, [r7, #3]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d001      	beq.n	8004cee <_ZN18DW1000RangingClass17addNetworkDevicesEP12DW1000Deviceb+0x8a>
 8004cea:	2301      	movs	r3, #1
 8004cec:	e000      	b.n	8004cf0 <_ZN18DW1000RangingClass17addNetworkDevicesEP12DW1000Deviceb+0x8c>
 8004cee:	2300      	movs	r3, #0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d003      	beq.n	8004cfc <_ZN18DW1000RangingClass17addNetworkDevicesEP12DW1000Deviceb+0x98>
			//the device already exists
			addDevice = false;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	73bb      	strb	r3, [r7, #14]
			return false;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	e036      	b.n	8004d6a <_ZN18DW1000RangingClass17addNetworkDevicesEP12DW1000Deviceb+0x106>
	for(uint8_t i = 0; i < _networkDevicesNumber; i++) {
 8004cfc:	7bfb      	ldrb	r3, [r7, #15]
 8004cfe:	3301      	adds	r3, #1
 8004d00:	73fb      	strb	r3, [r7, #15]
 8004d02:	e7b9      	b.n	8004c78 <_ZN18DW1000RangingClass17addNetworkDevicesEP12DW1000Deviceb+0x14>
		}
		
	}
	
	if(addDevice) {
 8004d04:	7bbb      	ldrb	r3, [r7, #14]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d02e      	beq.n	8004d68 <_ZN18DW1000RangingClass17addNetworkDevicesEP12DW1000Deviceb+0x104>
		device->setRange(0);
 8004d0a:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8004d7c <_ZN18DW1000RangingClass17addNetworkDevicesEP12DW1000Deviceb+0x118>
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f7ff fbdc 	bl	80044cc <_ZN12DW1000Device8setRangeEf>
		memcpy(&_networkDevices[_networkDevicesNumber], device, sizeof(DW1000Device));
 8004d14:	4b17      	ldr	r3, [pc, #92]	; (8004d74 <_ZN18DW1000RangingClass17addNetworkDevicesEP12DW1000Deviceb+0x110>)
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	4413      	add	r3, r2
 8004d22:	011b      	lsls	r3, r3, #4
 8004d24:	4a14      	ldr	r2, [pc, #80]	; (8004d78 <_ZN18DW1000RangingClass17addNetworkDevicesEP12DW1000Deviceb+0x114>)
 8004d26:	4413      	add	r3, r2
 8004d28:	2250      	movs	r2, #80	; 0x50
 8004d2a:	6879      	ldr	r1, [r7, #4]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f005 fa75 	bl	800a21c <memcpy>
		_networkDevices[_networkDevicesNumber].setIndex(_networkDevicesNumber);
 8004d32:	4b10      	ldr	r3, [pc, #64]	; (8004d74 <_ZN18DW1000RangingClass17addNetworkDevicesEP12DW1000Deviceb+0x110>)
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	461a      	mov	r2, r3
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	4413      	add	r3, r2
 8004d40:	011b      	lsls	r3, r3, #4
 8004d42:	4a0d      	ldr	r2, [pc, #52]	; (8004d78 <_ZN18DW1000RangingClass17addNetworkDevicesEP12DW1000Deviceb+0x114>)
 8004d44:	4413      	add	r3, r2
 8004d46:	4a0b      	ldr	r2, [pc, #44]	; (8004d74 <_ZN18DW1000RangingClass17addNetworkDevicesEP12DW1000Deviceb+0x110>)
 8004d48:	7812      	ldrb	r2, [r2, #0]
 8004d4a:	b2d2      	uxtb	r2, r2
 8004d4c:	b252      	sxtb	r2, r2
 8004d4e:	4611      	mov	r1, r2
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7ff fe7f 	bl	8004a54 <_ZN12DW1000Device8setIndexEa>
		_networkDevicesNumber++;
 8004d56:	4b07      	ldr	r3, [pc, #28]	; (8004d74 <_ZN18DW1000RangingClass17addNetworkDevicesEP12DW1000Deviceb+0x110>)
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	b2da      	uxtb	r2, r3
 8004d60:	4b04      	ldr	r3, [pc, #16]	; (8004d74 <_ZN18DW1000RangingClass17addNetworkDevicesEP12DW1000Deviceb+0x110>)
 8004d62:	701a      	strb	r2, [r3, #0]
		return true;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e000      	b.n	8004d6a <_ZN18DW1000RangingClass17addNetworkDevicesEP12DW1000Deviceb+0x106>
	}
	
	return false;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3710      	adds	r7, #16
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	2000040e 	.word	0x2000040e
 8004d78:	200002c0 	.word	0x200002c0
 8004d7c:	00000000 	.word	0x00000000

08004d80 <_ZN18DW1000RangingClass17addNetworkDevicesEP12DW1000Device>:

bool DW1000RangingClass::addNetworkDevices(DW1000Device* device) {
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
	bool addDevice = true;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	73bb      	strb	r3, [r7, #14]
	//we test our network devices array to check
	//we don't already have it
	for(uint8_t i = 0; i < _networkDevicesNumber; i++) {
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	73fb      	strb	r3, [r7, #15]
 8004d90:	4b36      	ldr	r3, [pc, #216]	; (8004e6c <_ZN18DW1000RangingClass17addNetworkDevicesEP12DW1000Device+0xec>)
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	7bfa      	ldrb	r2, [r7, #15]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	bf34      	ite	cc
 8004d9c:	2301      	movcc	r3, #1
 8004d9e:	2300      	movcs	r3, #0
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d028      	beq.n	8004df8 <_ZN18DW1000RangingClass17addNetworkDevicesEP12DW1000Device+0x78>
		if(_networkDevices[i].isAddressEqual(device) && _networkDevices[i].isShortAddressEqual(device)) {
 8004da6:	7bfa      	ldrb	r2, [r7, #15]
 8004da8:	4613      	mov	r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	4413      	add	r3, r2
 8004dae:	011b      	lsls	r3, r3, #4
 8004db0:	4a2f      	ldr	r2, [pc, #188]	; (8004e70 <_ZN18DW1000RangingClass17addNetworkDevicesEP12DW1000Device+0xf0>)
 8004db2:	4413      	add	r3, r2
 8004db4:	6879      	ldr	r1, [r7, #4]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7ff fc20 	bl	80045fc <_ZN12DW1000Device14isAddressEqualEPS_>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00f      	beq.n	8004de2 <_ZN18DW1000RangingClass17addNetworkDevicesEP12DW1000Device+0x62>
 8004dc2:	7bfa      	ldrb	r2, [r7, #15]
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	4413      	add	r3, r2
 8004dca:	011b      	lsls	r3, r3, #4
 8004dcc:	4a28      	ldr	r2, [pc, #160]	; (8004e70 <_ZN18DW1000RangingClass17addNetworkDevicesEP12DW1000Device+0xf0>)
 8004dce:	4413      	add	r3, r2
 8004dd0:	6879      	ldr	r1, [r7, #4]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7ff fc2e 	bl	8004634 <_ZN12DW1000Device19isShortAddressEqualEPS_>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d001      	beq.n	8004de2 <_ZN18DW1000RangingClass17addNetworkDevicesEP12DW1000Device+0x62>
 8004dde:	2301      	movs	r3, #1
 8004de0:	e000      	b.n	8004de4 <_ZN18DW1000RangingClass17addNetworkDevicesEP12DW1000Device+0x64>
 8004de2:	2300      	movs	r3, #0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d003      	beq.n	8004df0 <_ZN18DW1000RangingClass17addNetworkDevicesEP12DW1000Device+0x70>
			//the device already exists
			addDevice = false;
 8004de8:	2300      	movs	r3, #0
 8004dea:	73bb      	strb	r3, [r7, #14]
			return false;
 8004dec:	2300      	movs	r3, #0
 8004dee:	e039      	b.n	8004e64 <_ZN18DW1000RangingClass17addNetworkDevicesEP12DW1000Device+0xe4>
	for(uint8_t i = 0; i < _networkDevicesNumber; i++) {
 8004df0:	7bfb      	ldrb	r3, [r7, #15]
 8004df2:	3301      	adds	r3, #1
 8004df4:	73fb      	strb	r3, [r7, #15]
 8004df6:	e7cb      	b.n	8004d90 <_ZN18DW1000RangingClass17addNetworkDevicesEP12DW1000Device+0x10>
		}
		
	}
	
	if(addDevice) {
 8004df8:	7bbb      	ldrb	r3, [r7, #14]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d031      	beq.n	8004e62 <_ZN18DW1000RangingClass17addNetworkDevicesEP12DW1000Device+0xe2>
		if(_type == ANCHOR) //for now let's start with 1 TAG
 8004dfe:	4b1d      	ldr	r3, [pc, #116]	; (8004e74 <_ZN18DW1000RangingClass17addNetworkDevicesEP12DW1000Device+0xf4>)
 8004e00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d102      	bne.n	8004e0e <_ZN18DW1000RangingClass17addNetworkDevicesEP12DW1000Device+0x8e>
		{
			_networkDevicesNumber = 0;
 8004e08:	4b18      	ldr	r3, [pc, #96]	; (8004e6c <_ZN18DW1000RangingClass17addNetworkDevicesEP12DW1000Device+0xec>)
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	701a      	strb	r2, [r3, #0]
		}
		memcpy(&_networkDevices[_networkDevicesNumber], device, sizeof(DW1000Device));
 8004e0e:	4b17      	ldr	r3, [pc, #92]	; (8004e6c <_ZN18DW1000RangingClass17addNetworkDevicesEP12DW1000Device+0xec>)
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	461a      	mov	r2, r3
 8004e16:	4613      	mov	r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	4413      	add	r3, r2
 8004e1c:	011b      	lsls	r3, r3, #4
 8004e1e:	4a14      	ldr	r2, [pc, #80]	; (8004e70 <_ZN18DW1000RangingClass17addNetworkDevicesEP12DW1000Device+0xf0>)
 8004e20:	4413      	add	r3, r2
 8004e22:	2250      	movs	r2, #80	; 0x50
 8004e24:	6879      	ldr	r1, [r7, #4]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f005 f9f8 	bl	800a21c <memcpy>
		_networkDevices[_networkDevicesNumber].setIndex(_networkDevicesNumber);
 8004e2c:	4b0f      	ldr	r3, [pc, #60]	; (8004e6c <_ZN18DW1000RangingClass17addNetworkDevicesEP12DW1000Device+0xec>)
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	461a      	mov	r2, r3
 8004e34:	4613      	mov	r3, r2
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	4413      	add	r3, r2
 8004e3a:	011b      	lsls	r3, r3, #4
 8004e3c:	4a0c      	ldr	r2, [pc, #48]	; (8004e70 <_ZN18DW1000RangingClass17addNetworkDevicesEP12DW1000Device+0xf0>)
 8004e3e:	4413      	add	r3, r2
 8004e40:	4a0a      	ldr	r2, [pc, #40]	; (8004e6c <_ZN18DW1000RangingClass17addNetworkDevicesEP12DW1000Device+0xec>)
 8004e42:	7812      	ldrb	r2, [r2, #0]
 8004e44:	b2d2      	uxtb	r2, r2
 8004e46:	b252      	sxtb	r2, r2
 8004e48:	4611      	mov	r1, r2
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7ff fe02 	bl	8004a54 <_ZN12DW1000Device8setIndexEa>
		_networkDevicesNumber++;
 8004e50:	4b06      	ldr	r3, [pc, #24]	; (8004e6c <_ZN18DW1000RangingClass17addNetworkDevicesEP12DW1000Device+0xec>)
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	3301      	adds	r3, #1
 8004e58:	b2da      	uxtb	r2, r3
 8004e5a:	4b04      	ldr	r3, [pc, #16]	; (8004e6c <_ZN18DW1000RangingClass17addNetworkDevicesEP12DW1000Device+0xec>)
 8004e5c:	701a      	strb	r2, [r3, #0]
		return true;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e000      	b.n	8004e64 <_ZN18DW1000RangingClass17addNetworkDevicesEP12DW1000Device+0xe4>
	}
	
	return false;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	2000040e 	.word	0x2000040e
 8004e70:	200002c0 	.word	0x200002c0
 8004e74:	20000416 	.word	0x20000416

08004e78 <_ZN18DW1000RangingClass20removeNetworkDevicesEs>:

void DW1000RangingClass::removeNetworkDevices(int16_t index) {
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	4603      	mov	r3, r0
 8004e80:	80fb      	strh	r3, [r7, #6]
	//if we have just 1 element
	if(_networkDevicesNumber == 1) {
 8004e82:	4b33      	ldr	r3, [pc, #204]	; (8004f50 <_ZN18DW1000RangingClass20removeNetworkDevicesEs+0xd8>)
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	bf0c      	ite	eq
 8004e8c:	2301      	moveq	r3, #1
 8004e8e:	2300      	movne	r3, #0
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d003      	beq.n	8004e9e <_ZN18DW1000RangingClass20removeNetworkDevicesEs+0x26>
		_networkDevicesNumber = 0;
 8004e96:	4b2e      	ldr	r3, [pc, #184]	; (8004f50 <_ZN18DW1000RangingClass20removeNetworkDevicesEs+0xd8>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	701a      	strb	r2, [r3, #0]
			memcpy(&_networkDevices[i], &_networkDevices[i+1], sizeof(DW1000Device));
			_networkDevices[i].setIndex(i);
		}
		_networkDevicesNumber--;
	}
}
 8004e9c:	e054      	b.n	8004f48 <_ZN18DW1000RangingClass20removeNetworkDevicesEs+0xd0>
	else if(index == _networkDevicesNumber-1) //if we delete the last element
 8004e9e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004ea2:	4b2b      	ldr	r3, [pc, #172]	; (8004f50 <_ZN18DW1000RangingClass20removeNetworkDevicesEs+0xd8>)
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	bf0c      	ite	eq
 8004eae:	2301      	moveq	r3, #1
 8004eb0:	2300      	movne	r3, #0
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d007      	beq.n	8004ec8 <_ZN18DW1000RangingClass20removeNetworkDevicesEs+0x50>
		_networkDevicesNumber--;
 8004eb8:	4b25      	ldr	r3, [pc, #148]	; (8004f50 <_ZN18DW1000RangingClass20removeNetworkDevicesEs+0xd8>)
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	b2da      	uxtb	r2, r3
 8004ec2:	4b23      	ldr	r3, [pc, #140]	; (8004f50 <_ZN18DW1000RangingClass20removeNetworkDevicesEs+0xd8>)
 8004ec4:	701a      	strb	r2, [r3, #0]
}
 8004ec6:	e03f      	b.n	8004f48 <_ZN18DW1000RangingClass20removeNetworkDevicesEs+0xd0>
		for(int16_t i = index; i < _networkDevicesNumber-1; i++) { // TODO 8bit?
 8004ec8:	88fb      	ldrh	r3, [r7, #6]
 8004eca:	81fb      	strh	r3, [r7, #14]
 8004ecc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004ed0:	4b1f      	ldr	r3, [pc, #124]	; (8004f50 <_ZN18DW1000RangingClass20removeNetworkDevicesEs+0xd8>)
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	bfb4      	ite	lt
 8004edc:	2301      	movlt	r3, #1
 8004ede:	2300      	movge	r3, #0
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d029      	beq.n	8004f3a <_ZN18DW1000RangingClass20removeNetworkDevicesEs+0xc2>
			memcpy(&_networkDevices[i], &_networkDevices[i+1], sizeof(DW1000Device));
 8004ee6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004eea:	4613      	mov	r3, r2
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	4413      	add	r3, r2
 8004ef0:	011b      	lsls	r3, r3, #4
 8004ef2:	4a18      	ldr	r2, [pc, #96]	; (8004f54 <_ZN18DW1000RangingClass20removeNetworkDevicesEs+0xdc>)
 8004ef4:	1898      	adds	r0, r3, r2
 8004ef6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004efa:	1c5a      	adds	r2, r3, #1
 8004efc:	4613      	mov	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	4413      	add	r3, r2
 8004f02:	011b      	lsls	r3, r3, #4
 8004f04:	4a13      	ldr	r2, [pc, #76]	; (8004f54 <_ZN18DW1000RangingClass20removeNetworkDevicesEs+0xdc>)
 8004f06:	4413      	add	r3, r2
 8004f08:	2250      	movs	r2, #80	; 0x50
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	f005 f986 	bl	800a21c <memcpy>
			_networkDevices[i].setIndex(i);
 8004f10:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004f14:	4613      	mov	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4413      	add	r3, r2
 8004f1a:	011b      	lsls	r3, r3, #4
 8004f1c:	4a0d      	ldr	r2, [pc, #52]	; (8004f54 <_ZN18DW1000RangingClass20removeNetworkDevicesEs+0xdc>)
 8004f1e:	4413      	add	r3, r2
 8004f20:	89fa      	ldrh	r2, [r7, #14]
 8004f22:	b252      	sxtb	r2, r2
 8004f24:	4611      	mov	r1, r2
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7ff fd94 	bl	8004a54 <_ZN12DW1000Device8setIndexEa>
		for(int16_t i = index; i < _networkDevicesNumber-1; i++) { // TODO 8bit?
 8004f2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	3301      	adds	r3, #1
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	81fb      	strh	r3, [r7, #14]
 8004f38:	e7c8      	b.n	8004ecc <_ZN18DW1000RangingClass20removeNetworkDevicesEs+0x54>
		_networkDevicesNumber--;
 8004f3a:	4b05      	ldr	r3, [pc, #20]	; (8004f50 <_ZN18DW1000RangingClass20removeNetworkDevicesEs+0xd8>)
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	3b01      	subs	r3, #1
 8004f42:	b2da      	uxtb	r2, r3
 8004f44:	4b02      	ldr	r3, [pc, #8]	; (8004f50 <_ZN18DW1000RangingClass20removeNetworkDevicesEs+0xd8>)
 8004f46:	701a      	strb	r2, [r3, #0]
}
 8004f48:	bf00      	nop
 8004f4a:	3710      	adds	r7, #16
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	2000040e 	.word	0x2000040e
 8004f54:	200002c0 	.word	0x200002c0

08004f58 <_ZN18DW1000RangingClass19searchDistantDeviceEPh>:
void DW1000RangingClass::setReplyTime(uint16_t replyDelayTimeUs) { _replyDelayTimeUS = replyDelayTimeUs; }

void DW1000RangingClass::setResetPeriod(uint32_t resetPeriod) { _resetPeriod = resetPeriod; }


DW1000Device* DW1000RangingClass::searchDistantDevice(byte shortAddress[]) {
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
	//we compare the 2 bytes address with the others
	for(uint16_t i = 0; i < _networkDevicesNumber; i++) { // TODO 8bit?
 8004f60:	2300      	movs	r3, #0
 8004f62:	81fb      	strh	r3, [r7, #14]
 8004f64:	4b1a      	ldr	r3, [pc, #104]	; (8004fd0 <_ZN18DW1000RangingClass19searchDistantDeviceEPh+0x78>)
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	89fa      	ldrh	r2, [r7, #14]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	bf34      	ite	cc
 8004f72:	2301      	movcc	r3, #1
 8004f74:	2300      	movcs	r3, #0
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d023      	beq.n	8004fc4 <_ZN18DW1000RangingClass19searchDistantDeviceEPh+0x6c>
		if(memcmp(shortAddress, _networkDevices[i].getByteShortAddress(), 2) == 0) {
 8004f7c:	89fa      	ldrh	r2, [r7, #14]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4413      	add	r3, r2
 8004f84:	011b      	lsls	r3, r3, #4
 8004f86:	4a13      	ldr	r2, [pc, #76]	; (8004fd4 <_ZN18DW1000RangingClass19searchDistantDeviceEPh+0x7c>)
 8004f88:	4413      	add	r3, r2
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7ff fb2a 	bl	80045e4 <_ZN12DW1000Device19getByteShortAddressEv>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2202      	movs	r2, #2
 8004f94:	4619      	mov	r1, r3
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f005 f930 	bl	800a1fc <memcmp>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	bf0c      	ite	eq
 8004fa2:	2301      	moveq	r3, #1
 8004fa4:	2300      	movne	r3, #0
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d007      	beq.n	8004fbc <_ZN18DW1000RangingClass19searchDistantDeviceEPh+0x64>
			//we have found our device !
			return &_networkDevices[i];
 8004fac:	89fa      	ldrh	r2, [r7, #14]
 8004fae:	4613      	mov	r3, r2
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	4413      	add	r3, r2
 8004fb4:	011b      	lsls	r3, r3, #4
 8004fb6:	4a07      	ldr	r2, [pc, #28]	; (8004fd4 <_ZN18DW1000RangingClass19searchDistantDeviceEPh+0x7c>)
 8004fb8:	4413      	add	r3, r2
 8004fba:	e004      	b.n	8004fc6 <_ZN18DW1000RangingClass19searchDistantDeviceEPh+0x6e>
	for(uint16_t i = 0; i < _networkDevicesNumber; i++) { // TODO 8bit?
 8004fbc:	89fb      	ldrh	r3, [r7, #14]
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	81fb      	strh	r3, [r7, #14]
 8004fc2:	e7cf      	b.n	8004f64 <_ZN18DW1000RangingClass19searchDistantDeviceEPh+0xc>
		}
	}
	
	return nullptr;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	2000040e 	.word	0x2000040e
 8004fd4:	200002c0 	.word	0x200002c0

08004fd8 <_ZN18DW1000RangingClass16getDistantDeviceEv>:

DW1000Device* DW1000RangingClass::getDistantDevice() {
 8004fd8:	b480      	push	{r7}
 8004fda:	af00      	add	r7, sp, #0
	//we get the device which correspond to the message which was sent (need to be filtered by MAC address)
	
	return &_networkDevices[_lastDistantDevice];
 8004fdc:	4b07      	ldr	r3, [pc, #28]	; (8004ffc <_ZN18DW1000RangingClass16getDistantDeviceEv+0x24>)
 8004fde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	4413      	add	r3, r2
 8004fea:	011b      	lsls	r3, r3, #4
 8004fec:	4a04      	ldr	r2, [pc, #16]	; (8005000 <_ZN18DW1000RangingClass16getDistantDeviceEv+0x28>)
 8004fee:	4413      	add	r3, r2
	
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	20000410 	.word	0x20000410
 8005000:	200002c0 	.word	0x200002c0

08005004 <_ZN18DW1000RangingClass13checkForResetEv>:

/* ###########################################################################
 * #### Public methods #######################################################
 * ######################################################################### */

void DW1000RangingClass::checkForReset() {
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
	uint32_t curMillis = HAL_GetTick();
 800500a:	f002 fb31 	bl	8007670 <HAL_GetTick>
 800500e:	6078      	str	r0, [r7, #4]
	if(!_sentAck && !_receivedAck) {
 8005010:	4b11      	ldr	r3, [pc, #68]	; (8005058 <_ZN18DW1000RangingClass13checkForResetEv+0x54>)
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	b2db      	uxtb	r3, r3
 8005016:	f083 0301 	eor.w	r3, r3, #1
 800501a:	b2db      	uxtb	r3, r3
 800501c:	2b00      	cmp	r3, #0
 800501e:	d009      	beq.n	8005034 <_ZN18DW1000RangingClass13checkForResetEv+0x30>
 8005020:	4b0e      	ldr	r3, [pc, #56]	; (800505c <_ZN18DW1000RangingClass13checkForResetEv+0x58>)
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	b2db      	uxtb	r3, r3
 8005026:	f083 0301 	eor.w	r3, r3, #1
 800502a:	b2db      	uxtb	r3, r3
 800502c:	2b00      	cmp	r3, #0
 800502e:	d001      	beq.n	8005034 <_ZN18DW1000RangingClass13checkForResetEv+0x30>
 8005030:	2301      	movs	r3, #1
 8005032:	e000      	b.n	8005036 <_ZN18DW1000RangingClass13checkForResetEv+0x32>
 8005034:	2300      	movs	r3, #0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00a      	beq.n	8005050 <_ZN18DW1000RangingClass13checkForResetEv+0x4c>
		// check if inactive
		if(curMillis-_lastActivity > _resetPeriod) {
 800503a:	4b09      	ldr	r3, [pc, #36]	; (8005060 <_ZN18DW1000RangingClass13checkForResetEv+0x5c>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	1ad2      	subs	r2, r2, r3
 8005042:	4b08      	ldr	r3, [pc, #32]	; (8005064 <_ZN18DW1000RangingClass13checkForResetEv+0x60>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	429a      	cmp	r2, r3
 8005048:	d901      	bls.n	800504e <_ZN18DW1000RangingClass13checkForResetEv+0x4a>
			resetInactive();
 800504a:	f000 fc6f 	bl	800592c <_ZN18DW1000RangingClass13resetInactiveEv>
		}
		return; // TODO cc
 800504e:	bf00      	nop
	}
}
 8005050:	3708      	adds	r7, #8
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	2000041a 	.word	0x2000041a
 800505c:	2000041b 	.word	0x2000041b
 8005060:	20000484 	.word	0x20000484
 8005064:	20000488 	.word	0x20000488

08005068 <_ZN18DW1000RangingClass23checkForInactiveDevicesEv>:

void DW1000RangingClass::checkForInactiveDevices() {
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < _networkDevicesNumber; i++) {
 800506e:	2300      	movs	r3, #0
 8005070:	71fb      	strb	r3, [r7, #7]
 8005072:	4b1a      	ldr	r3, [pc, #104]	; (80050dc <_ZN18DW1000RangingClass23checkForInactiveDevicesEv+0x74>)
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	b2db      	uxtb	r3, r3
 8005078:	79fa      	ldrb	r2, [r7, #7]
 800507a:	429a      	cmp	r2, r3
 800507c:	bf34      	ite	cc
 800507e:	2301      	movcc	r3, #1
 8005080:	2300      	movcs	r3, #0
 8005082:	b2db      	uxtb	r3, r3
 8005084:	2b00      	cmp	r3, #0
 8005086:	d024      	beq.n	80050d2 <_ZN18DW1000RangingClass23checkForInactiveDevicesEv+0x6a>
		if(_networkDevices[i].isInactive()) {
 8005088:	79fa      	ldrb	r2, [r7, #7]
 800508a:	4613      	mov	r3, r2
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	4413      	add	r3, r2
 8005090:	011b      	lsls	r3, r3, #4
 8005092:	4a13      	ldr	r2, [pc, #76]	; (80050e0 <_ZN18DW1000RangingClass23checkForInactiveDevicesEv+0x78>)
 8005094:	4413      	add	r3, r2
 8005096:	4618      	mov	r0, r3
 8005098:	f7ff fb4a 	bl	8004730 <_ZN12DW1000Device10isInactiveEv>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d013      	beq.n	80050ca <_ZN18DW1000RangingClass23checkForInactiveDevicesEv+0x62>
			if(_handleInactiveDevice != 0) {
 80050a2:	4b10      	ldr	r3, [pc, #64]	; (80050e4 <_ZN18DW1000RangingClass23checkForInactiveDevicesEv+0x7c>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00a      	beq.n	80050c0 <_ZN18DW1000RangingClass23checkForInactiveDevicesEv+0x58>
				(*_handleInactiveDevice)(&_networkDevices[i]);
 80050aa:	4b0e      	ldr	r3, [pc, #56]	; (80050e4 <_ZN18DW1000RangingClass23checkForInactiveDevicesEv+0x7c>)
 80050ac:	6819      	ldr	r1, [r3, #0]
 80050ae:	79fa      	ldrb	r2, [r7, #7]
 80050b0:	4613      	mov	r3, r2
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	4413      	add	r3, r2
 80050b6:	011b      	lsls	r3, r3, #4
 80050b8:	4a09      	ldr	r2, [pc, #36]	; (80050e0 <_ZN18DW1000RangingClass23checkForInactiveDevicesEv+0x78>)
 80050ba:	4413      	add	r3, r2
 80050bc:	4618      	mov	r0, r3
 80050be:	4788      	blx	r1
			}
			//we need to delete the device from the array:
			removeNetworkDevices(i);
 80050c0:	79fb      	ldrb	r3, [r7, #7]
 80050c2:	b21b      	sxth	r3, r3
 80050c4:	4618      	mov	r0, r3
 80050c6:	f7ff fed7 	bl	8004e78 <_ZN18DW1000RangingClass20removeNetworkDevicesEs>
	for(uint8_t i = 0; i < _networkDevicesNumber; i++) {
 80050ca:	79fb      	ldrb	r3, [r7, #7]
 80050cc:	3301      	adds	r3, #1
 80050ce:	71fb      	strb	r3, [r7, #7]
 80050d0:	e7cf      	b.n	8005072 <_ZN18DW1000RangingClass23checkForInactiveDevicesEv+0xa>
			
		}
	}
}
 80050d2:	bf00      	nop
 80050d4:	3708      	adds	r7, #8
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	2000040e 	.word	0x2000040e
 80050e0:	200002c0 	.word	0x200002c0
 80050e4:	200004a0 	.word	0x200004a0

080050e8 <_ZN18DW1000RangingClass17detectMessageTypeEPh>:

// TODO check return type
int16_t DW1000RangingClass::detectMessageType(byte datas[]) {
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
	if(datas[0] == FC_1_BLINK) {
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	2bc5      	cmp	r3, #197	; 0xc5
 80050f6:	d101      	bne.n	80050fc <_ZN18DW1000RangingClass17detectMessageTypeEPh+0x14>
		return BLINK;
 80050f8:	2304      	movs	r3, #4
 80050fa:	e01b      	b.n	8005134 <_ZN18DW1000RangingClass17detectMessageTypeEPh+0x4c>
	}
	else if(datas[0] == FC_1 && datas[1] == FC_2) {
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	2b41      	cmp	r3, #65	; 0x41
 8005102:	d109      	bne.n	8005118 <_ZN18DW1000RangingClass17detectMessageTypeEPh+0x30>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	3301      	adds	r3, #1
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	2b8c      	cmp	r3, #140	; 0x8c
 800510c:	d104      	bne.n	8005118 <_ZN18DW1000RangingClass17detectMessageTypeEPh+0x30>
		//we have a long MAC frame message (ranging init)
		return datas[LONG_MAC_LEN];
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	330f      	adds	r3, #15
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	b21b      	sxth	r3, r3
 8005116:	e00d      	b.n	8005134 <_ZN18DW1000RangingClass17detectMessageTypeEPh+0x4c>
	}
	else if(datas[0] == FC_1 && datas[1] == FC_2_SHORT) {
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	2b41      	cmp	r3, #65	; 0x41
 800511e:	d109      	bne.n	8005134 <_ZN18DW1000RangingClass17detectMessageTypeEPh+0x4c>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	3301      	adds	r3, #1
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	2b88      	cmp	r3, #136	; 0x88
 8005128:	d104      	bne.n	8005134 <_ZN18DW1000RangingClass17detectMessageTypeEPh+0x4c>
		//we have a short mac frame message (poll, range, range report, etc..)
		return datas[SHORT_MAC_LEN];
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	3309      	adds	r3, #9
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	b21b      	sxth	r3, r3
 8005132:	e7ff      	b.n	8005134 <_ZN18DW1000RangingClass17detectMessageTypeEPh+0x4c>
	}
}
 8005134:	4618      	mov	r0, r3
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <_ZN18DW1000RangingClass4loopEv>:

void DW1000RangingClass::loop() {
 8005140:	b580      	push	{r7, lr}
 8005142:	ed2d 8b02 	vpush	{d8}
 8005146:	b0ae      	sub	sp, #184	; 0xb8
 8005148:	af00      	add	r7, sp, #0
	//we check if needed to reset !
	checkForReset();
 800514a:	f7ff ff5b 	bl	8005004 <_ZN18DW1000RangingClass13checkForResetEv>
	uint32_t time = HAL_GetTick(); // TODO other name - too close to "timer"
 800514e:	f002 fa8f 	bl	8007670 <HAL_GetTick>
 8005152:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
	if(time-timer > _timerDelay) {
 8005156:	4bb6      	ldr	r3, [pc, #728]	; (8005430 <_ZN18DW1000RangingClass4loopEv+0x2f0>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	461a      	mov	r2, r3
 800515c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005160:	1a9b      	subs	r3, r3, r2
 8005162:	4ab4      	ldr	r2, [pc, #720]	; (8005434 <_ZN18DW1000RangingClass4loopEv+0x2f4>)
 8005164:	8812      	ldrh	r2, [r2, #0]
 8005166:	4293      	cmp	r3, r2
 8005168:	d905      	bls.n	8005176 <_ZN18DW1000RangingClass4loopEv+0x36>
		timer = time;
 800516a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800516e:	4ab0      	ldr	r2, [pc, #704]	; (8005430 <_ZN18DW1000RangingClass4loopEv+0x2f0>)
 8005170:	6013      	str	r3, [r2, #0]
		timerTick();
 8005172:	f000 fbef 	bl	8005954 <_ZN18DW1000RangingClass9timerTickEv>
	}
	
	if(_sentAck) {
 8005176:	4bb0      	ldr	r3, [pc, #704]	; (8005438 <_ZN18DW1000RangingClass4loopEv+0x2f8>)
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	b2db      	uxtb	r3, r3
 800517c:	2b00      	cmp	r3, #0
 800517e:	f000 80de 	beq.w	800533e <_ZN18DW1000RangingClass4loopEv+0x1fe>
		_sentAck = false;
 8005182:	4bad      	ldr	r3, [pc, #692]	; (8005438 <_ZN18DW1000RangingClass4loopEv+0x2f8>)
 8005184:	2200      	movs	r2, #0
 8005186:	701a      	strb	r2, [r3, #0]
		
		// TODO cc
		int messageType = detectMessageType(data);
 8005188:	48ac      	ldr	r0, [pc, #688]	; (800543c <_ZN18DW1000RangingClass4loopEv+0x2fc>)
 800518a:	f7ff ffad 	bl	80050e8 <_ZN18DW1000RangingClass17detectMessageTypeEPh>
 800518e:	4603      	mov	r3, r0
 8005190:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		
		if(messageType != POLL_ACK && messageType != POLL && messageType != RANGE)
 8005194:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005198:	2b01      	cmp	r3, #1
 800519a:	d008      	beq.n	80051ae <_ZN18DW1000RangingClass4loopEv+0x6e>
 800519c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d004      	beq.n	80051ae <_ZN18DW1000RangingClass4loopEv+0x6e>
 80051a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	f040 837f 	bne.w	80058ac <_ZN18DW1000RangingClass4loopEv+0x76c>
			return;
		
		//A msg was sent. We launch the ranging protocole when a message was sent
		if(_type == ANCHOR) {
 80051ae:	4ba4      	ldr	r3, [pc, #656]	; (8005440 <_ZN18DW1000RangingClass4loopEv+0x300>)
 80051b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d115      	bne.n	80051e4 <_ZN18DW1000RangingClass4loopEv+0xa4>
			if(messageType == POLL_ACK) {
 80051b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80051bc:	2b01      	cmp	r3, #1
 80051be:	f040 80be 	bne.w	800533e <_ZN18DW1000RangingClass4loopEv+0x1fe>
				DW1000Device* myDistantDevice = searchDistantDevice(_lastSentToShortAddress);
 80051c2:	48a0      	ldr	r0, [pc, #640]	; (8005444 <_ZN18DW1000RangingClass4loopEv+0x304>)
 80051c4:	f7ff fec8 	bl	8004f58 <_ZN18DW1000RangingClass19searchDistantDeviceEPh>
 80051c8:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
				
				if (myDistantDevice) {
 80051cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	f000 80b4 	beq.w	800533e <_ZN18DW1000RangingClass4loopEv+0x1fe>
					DW1000.getTransmitTimestamp(myDistantDevice->timePollAckSent);
 80051d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80051da:	3310      	adds	r3, #16
 80051dc:	4618      	mov	r0, r3
 80051de:	f7fe f865 	bl	80032ac <_ZN11DW1000Class20getTransmitTimestampER10DW1000Time>
 80051e2:	e0ac      	b.n	800533e <_ZN18DW1000RangingClass4loopEv+0x1fe>
				}
			}
		}
		else if(_type == TAG) {
 80051e4:	4b96      	ldr	r3, [pc, #600]	; (8005440 <_ZN18DW1000RangingClass4loopEv+0x300>)
 80051e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	f040 80a7 	bne.w	800533e <_ZN18DW1000RangingClass4loopEv+0x1fe>
			if(messageType == POLL) {
 80051f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d14e      	bne.n	8005296 <_ZN18DW1000RangingClass4loopEv+0x156>
				DW1000Time timePollSent;
 80051f8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80051fc:	4618      	mov	r0, r3
 80051fe:	f001 f8a7 	bl	8006350 <_ZN10DW1000TimeC1Ev>
				DW1000.getTransmitTimestamp(timePollSent);
 8005202:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005206:	4618      	mov	r0, r3
 8005208:	f7fe f850 	bl	80032ac <_ZN11DW1000Class20getTransmitTimestampER10DW1000Time>
				//if the last device we send the POLL is broadcast:
				if(_lastSentToShortAddress[0] == 0xFF && _lastSentToShortAddress[1] == 0xFF) {
 800520c:	4b8d      	ldr	r3, [pc, #564]	; (8005444 <_ZN18DW1000RangingClass4loopEv+0x304>)
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	2bff      	cmp	r3, #255	; 0xff
 8005212:	d127      	bne.n	8005264 <_ZN18DW1000RangingClass4loopEv+0x124>
 8005214:	4b8b      	ldr	r3, [pc, #556]	; (8005444 <_ZN18DW1000RangingClass4loopEv+0x304>)
 8005216:	785b      	ldrb	r3, [r3, #1]
 8005218:	2bff      	cmp	r3, #255	; 0xff
 800521a:	d123      	bne.n	8005264 <_ZN18DW1000RangingClass4loopEv+0x124>
					//we save the value for all the devices !
					for(uint16_t i = 0; i < _networkDevicesNumber; i++) {
 800521c:	2300      	movs	r3, #0
 800521e:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
 8005222:	4b89      	ldr	r3, [pc, #548]	; (8005448 <_ZN18DW1000RangingClass4loopEv+0x308>)
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	b2db      	uxtb	r3, r3
 8005228:	b29b      	uxth	r3, r3
 800522a:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	; 0xb6
 800522e:	429a      	cmp	r2, r3
 8005230:	bf34      	ite	cc
 8005232:	2301      	movcc	r3, #1
 8005234:	2300      	movcs	r3, #0
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2b00      	cmp	r3, #0
 800523a:	d025      	beq.n	8005288 <_ZN18DW1000RangingClass4loopEv+0x148>
						_networkDevices[i].timePollSent = timePollSent;
 800523c:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	; 0xb6
 8005240:	4613      	mov	r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	4413      	add	r3, r2
 8005246:	011b      	lsls	r3, r3, #4
 8005248:	4a80      	ldr	r2, [pc, #512]	; (800544c <_ZN18DW1000RangingClass4loopEv+0x30c>)
 800524a:	4413      	add	r3, r2
 800524c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005250:	4611      	mov	r1, r2
 8005252:	4618      	mov	r0, r3
 8005254:	f001 f9eb 	bl	800662e <_ZN10DW1000TimeaSERKS_>
					for(uint16_t i = 0; i < _networkDevicesNumber; i++) {
 8005258:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800525c:	3301      	adds	r3, #1
 800525e:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
 8005262:	e7de      	b.n	8005222 <_ZN18DW1000RangingClass4loopEv+0xe2>
					}
				}
				else {
					//we search the device associated with the last send address
					DW1000Device* myDistantDevice = searchDistantDevice(_lastSentToShortAddress);
 8005264:	4877      	ldr	r0, [pc, #476]	; (8005444 <_ZN18DW1000RangingClass4loopEv+0x304>)
 8005266:	f7ff fe77 	bl	8004f58 <_ZN18DW1000RangingClass19searchDistantDeviceEPh>
 800526a:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
					//we save the value just for one device
					if (myDistantDevice) {
 800526e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005272:	2b00      	cmp	r3, #0
 8005274:	d009      	beq.n	800528a <_ZN18DW1000RangingClass4loopEv+0x14a>
						myDistantDevice->timePollSent = timePollSent;
 8005276:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800527a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800527e:	4611      	mov	r1, r2
 8005280:	4618      	mov	r0, r3
 8005282:	f001 f9d4 	bl	800662e <_ZN10DW1000TimeaSERKS_>
 8005286:	e000      	b.n	800528a <_ZN18DW1000RangingClass4loopEv+0x14a>
					}
 8005288:	bf00      	nop
				DW1000Time timePollSent;
 800528a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800528e:	4618      	mov	r0, r3
 8005290:	f001 f8a5 	bl	80063de <_ZN10DW1000TimeD1Ev>
 8005294:	e053      	b.n	800533e <_ZN18DW1000RangingClass4loopEv+0x1fe>
					}
				}
			}
			else if(messageType == RANGE) {
 8005296:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800529a:	2b02      	cmp	r3, #2
 800529c:	d14f      	bne.n	800533e <_ZN18DW1000RangingClass4loopEv+0x1fe>
				DW1000Time timeRangeSent;
 800529e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80052a2:	4618      	mov	r0, r3
 80052a4:	f001 f854 	bl	8006350 <_ZN10DW1000TimeC1Ev>
				DW1000.getTransmitTimestamp(timeRangeSent);
 80052a8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80052ac:	4618      	mov	r0, r3
 80052ae:	f7fd fffd 	bl	80032ac <_ZN11DW1000Class20getTransmitTimestampER10DW1000Time>
				//if the last device we send the POLL is broadcast:
				if(_lastSentToShortAddress[0] == 0xFF && _lastSentToShortAddress[1] == 0xFF) {
 80052b2:	4b64      	ldr	r3, [pc, #400]	; (8005444 <_ZN18DW1000RangingClass4loopEv+0x304>)
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	2bff      	cmp	r3, #255	; 0xff
 80052b8:	d128      	bne.n	800530c <_ZN18DW1000RangingClass4loopEv+0x1cc>
 80052ba:	4b62      	ldr	r3, [pc, #392]	; (8005444 <_ZN18DW1000RangingClass4loopEv+0x304>)
 80052bc:	785b      	ldrb	r3, [r3, #1]
 80052be:	2bff      	cmp	r3, #255	; 0xff
 80052c0:	d124      	bne.n	800530c <_ZN18DW1000RangingClass4loopEv+0x1cc>
					//we save the value for all the devices !
					for(uint16_t i = 0; i < _networkDevicesNumber; i++) {
 80052c2:	2300      	movs	r3, #0
 80052c4:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80052c8:	4b5f      	ldr	r3, [pc, #380]	; (8005448 <_ZN18DW1000RangingClass4loopEv+0x308>)
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 80052d4:	429a      	cmp	r2, r3
 80052d6:	bf34      	ite	cc
 80052d8:	2301      	movcc	r3, #1
 80052da:	2300      	movcs	r3, #0
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d027      	beq.n	8005332 <_ZN18DW1000RangingClass4loopEv+0x1f2>
						_networkDevices[i].timeRangeSent = timeRangeSent;
 80052e2:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 80052e6:	4613      	mov	r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	4413      	add	r3, r2
 80052ec:	011b      	lsls	r3, r3, #4
 80052ee:	3320      	adds	r3, #32
 80052f0:	4a56      	ldr	r2, [pc, #344]	; (800544c <_ZN18DW1000RangingClass4loopEv+0x30c>)
 80052f2:	4413      	add	r3, r2
 80052f4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80052f8:	4611      	mov	r1, r2
 80052fa:	4618      	mov	r0, r3
 80052fc:	f001 f997 	bl	800662e <_ZN10DW1000TimeaSERKS_>
					for(uint16_t i = 0; i < _networkDevicesNumber; i++) {
 8005300:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8005304:	3301      	adds	r3, #1
 8005306:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800530a:	e7dd      	b.n	80052c8 <_ZN18DW1000RangingClass4loopEv+0x188>
					}
				}
				else {
					//we search the device associated with the last send address
					DW1000Device* myDistantDevice = searchDistantDevice(_lastSentToShortAddress);
 800530c:	484d      	ldr	r0, [pc, #308]	; (8005444 <_ZN18DW1000RangingClass4loopEv+0x304>)
 800530e:	f7ff fe23 	bl	8004f58 <_ZN18DW1000RangingClass19searchDistantDeviceEPh>
 8005312:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
					//we save the value just for one device
					if (myDistantDevice) {
 8005316:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00a      	beq.n	8005334 <_ZN18DW1000RangingClass4loopEv+0x1f4>
						myDistantDevice->timeRangeSent = timeRangeSent;
 800531e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005322:	3320      	adds	r3, #32
 8005324:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8005328:	4611      	mov	r1, r2
 800532a:	4618      	mov	r0, r3
 800532c:	f001 f97f 	bl	800662e <_ZN10DW1000TimeaSERKS_>
 8005330:	e000      	b.n	8005334 <_ZN18DW1000RangingClass4loopEv+0x1f4>
					}
 8005332:	bf00      	nop
				DW1000Time timeRangeSent;
 8005334:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005338:	4618      	mov	r0, r3
 800533a:	f001 f850 	bl	80063de <_ZN10DW1000TimeD1Ev>
		}
		
	}
	
	//check for new received message
	if(_receivedAck) {
 800533e:	4b44      	ldr	r3, [pc, #272]	; (8005450 <_ZN18DW1000RangingClass4loopEv+0x310>)
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	b2db      	uxtb	r3, r3
 8005344:	2b00      	cmp	r3, #0
 8005346:	f000 82b6 	beq.w	80058b6 <_ZN18DW1000RangingClass4loopEv+0x776>
		_receivedAck = false;
 800534a:	4b41      	ldr	r3, [pc, #260]	; (8005450 <_ZN18DW1000RangingClass4loopEv+0x310>)
 800534c:	2200      	movs	r2, #0
 800534e:	701a      	strb	r2, [r3, #0]
		
		//we read the datas from the modules:
		// get message and parse
		DW1000.getData(data, LEN_DATA);
 8005350:	215a      	movs	r1, #90	; 0x5a
 8005352:	483a      	ldr	r0, [pc, #232]	; (800543c <_ZN18DW1000RangingClass4loopEv+0x2fc>)
 8005354:	f7fd ff96 	bl	8003284 <_ZN11DW1000Class7getDataEPht>
		
		int messageType = detectMessageType(data);
 8005358:	4838      	ldr	r0, [pc, #224]	; (800543c <_ZN18DW1000RangingClass4loopEv+0x2fc>)
 800535a:	f7ff fec5 	bl	80050e8 <_ZN18DW1000RangingClass17detectMessageTypeEPh>
 800535e:	4603      	mov	r3, r0
 8005360:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		
		//we have just received a BLINK message from tag
		if(messageType == BLINK && _type == ANCHOR) {
 8005364:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005368:	2b04      	cmp	r3, #4
 800536a:	d132      	bne.n	80053d2 <_ZN18DW1000RangingClass4loopEv+0x292>
 800536c:	4b34      	ldr	r3, [pc, #208]	; (8005440 <_ZN18DW1000RangingClass4loopEv+0x300>)
 800536e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d12d      	bne.n	80053d2 <_ZN18DW1000RangingClass4loopEv+0x292>
			byte address[8];
			byte shortAddress[2];
			_globalMac.decodeBlinkFrame(data, address, shortAddress);
 8005376:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800537a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800537e:	492f      	ldr	r1, [pc, #188]	; (800543c <_ZN18DW1000RangingClass4loopEv+0x2fc>)
 8005380:	4834      	ldr	r0, [pc, #208]	; (8005454 <_ZN18DW1000RangingClass4loopEv+0x314>)
 8005382:	f7ff fab4 	bl	80048ee <_ZN9DW1000Mac16decodeBlinkFrameEPhS0_S0_>
			//we crate a new device with th tag
			DW1000Device myTag(address, shortAddress);
 8005386:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800538a:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800538e:	463b      	mov	r3, r7
 8005390:	4618      	mov	r0, r3
 8005392:	f7ff f813 	bl	80043bc <_ZN12DW1000DeviceC1EPhS0_>
			
			if(addNetworkDevices(&myTag)) {
 8005396:	463b      	mov	r3, r7
 8005398:	4618      	mov	r0, r3
 800539a:	f7ff fcf1 	bl	8004d80 <_ZN18DW1000RangingClass17addNetworkDevicesEP12DW1000Device>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00e      	beq.n	80053c2 <_ZN18DW1000RangingClass4loopEv+0x282>
				if(_handleBlinkDevice != 0) {
 80053a4:	4b2c      	ldr	r3, [pc, #176]	; (8005458 <_ZN18DW1000RangingClass4loopEv+0x318>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d004      	beq.n	80053b6 <_ZN18DW1000RangingClass4loopEv+0x276>
					(*_handleBlinkDevice)(&myTag);
 80053ac:	4b2a      	ldr	r3, [pc, #168]	; (8005458 <_ZN18DW1000RangingClass4loopEv+0x318>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	463a      	mov	r2, r7
 80053b2:	4610      	mov	r0, r2
 80053b4:	4798      	blx	r3
				}
				//we reply by the transmit ranging init message
				transmitRangingInit(&myTag);
 80053b6:	463b      	mov	r3, r7
 80053b8:	4618      	mov	r0, r3
 80053ba:	f000 fb6f 	bl	8005a9c <_ZN18DW1000RangingClass19transmitRangingInitEP12DW1000Device>
				noteActivity();
 80053be:	f000 faa9 	bl	8005914 <_ZN18DW1000RangingClass12noteActivityEv>
			}
			_expectedMsgId = POLL;
 80053c2:	4b26      	ldr	r3, [pc, #152]	; (800545c <_ZN18DW1000RangingClass4loopEv+0x31c>)
 80053c4:	2200      	movs	r2, #0
 80053c6:	701a      	strb	r2, [r3, #0]
			DW1000Device myTag(address, shortAddress);
 80053c8:	463b      	mov	r3, r7
 80053ca:	4618      	mov	r0, r3
 80053cc:	f7ff f826 	bl	800441c <_ZN12DW1000DeviceD1Ev>
			_expectedMsgId = POLL;
 80053d0:	e271      	b.n	80058b6 <_ZN18DW1000RangingClass4loopEv+0x776>
		}
		else if(messageType == RANGING_INIT && _type == TAG) {
 80053d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80053d6:	2b05      	cmp	r3, #5
 80053d8:	d144      	bne.n	8005464 <_ZN18DW1000RangingClass4loopEv+0x324>
 80053da:	4b19      	ldr	r3, [pc, #100]	; (8005440 <_ZN18DW1000RangingClass4loopEv+0x300>)
 80053dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d13f      	bne.n	8005464 <_ZN18DW1000RangingClass4loopEv+0x324>
			
			byte address[2];
			_globalMac.decodeLongMACFrame(data, address);
 80053e4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80053e8:	461a      	mov	r2, r3
 80053ea:	4914      	ldr	r1, [pc, #80]	; (800543c <_ZN18DW1000RangingClass4loopEv+0x2fc>)
 80053ec:	4819      	ldr	r0, [pc, #100]	; (8005454 <_ZN18DW1000RangingClass4loopEv+0x314>)
 80053ee:	f7ff fab9 	bl	8004964 <_ZN9DW1000Mac18decodeLongMACFrameEPhS0_>
			//we crate a new device with the anchor
			DW1000Device myAnchor(address, true);
 80053f2:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80053f6:	463b      	mov	r3, r7
 80053f8:	2201      	movs	r2, #1
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7fe ffa3 	bl	8004346 <_ZN12DW1000DeviceC1EPhb>
			
			if(addNetworkDevices(&myAnchor, true)) {
 8005400:	463b      	mov	r3, r7
 8005402:	2101      	movs	r1, #1
 8005404:	4618      	mov	r0, r3
 8005406:	f7ff fc2d 	bl	8004c64 <_ZN18DW1000RangingClass17addNetworkDevicesEP12DW1000Deviceb>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d008      	beq.n	8005422 <_ZN18DW1000RangingClass4loopEv+0x2e2>
				if(_handleNewDevice != 0) {
 8005410:	4b13      	ldr	r3, [pc, #76]	; (8005460 <_ZN18DW1000RangingClass4loopEv+0x320>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d004      	beq.n	8005422 <_ZN18DW1000RangingClass4loopEv+0x2e2>
					(*_handleNewDevice)(&myAnchor);
 8005418:	4b11      	ldr	r3, [pc, #68]	; (8005460 <_ZN18DW1000RangingClass4loopEv+0x320>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	463a      	mov	r2, r7
 800541e:	4610      	mov	r0, r2
 8005420:	4798      	blx	r3
				}
			}
			
			noteActivity();
 8005422:	f000 fa77 	bl	8005914 <_ZN18DW1000RangingClass12noteActivityEv>
			DW1000Device myAnchor(address, true);
 8005426:	463b      	mov	r3, r7
 8005428:	4618      	mov	r0, r3
 800542a:	f7fe fff7 	bl	800441c <_ZN12DW1000DeviceD1Ev>
			noteActivity();
 800542e:	e242      	b.n	80058b6 <_ZN18DW1000RangingClass4loopEv+0x776>
 8005430:	20000420 	.word	0x20000420
 8005434:	2000048e 	.word	0x2000048e
 8005438:	2000041a 	.word	0x2000041a
 800543c:	20000428 	.word	0x20000428
 8005440:	20000416 	.word	0x20000416
 8005444:	2000040c 	.word	0x2000040c
 8005448:	2000040e 	.word	0x2000040e
 800544c:	200002c0 	.word	0x200002c0
 8005450:	2000041b 	.word	0x2000041b
 8005454:	20000414 	.word	0x20000414
 8005458:	20000498 	.word	0x20000498
 800545c:	20000418 	.word	0x20000418
 8005460:	2000049c 	.word	0x2000049c
		}
		else {
			//we have a short mac layer frame !
			byte address[2];
			_globalMac.decodeShortMACFrame(data, address);
 8005464:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005468:	461a      	mov	r2, r3
 800546a:	49ba      	ldr	r1, [pc, #744]	; (8005754 <_ZN18DW1000RangingClass4loopEv+0x614>)
 800546c:	48ba      	ldr	r0, [pc, #744]	; (8005758 <_ZN18DW1000RangingClass4loopEv+0x618>)
 800546e:	f7ff fa63 	bl	8004938 <_ZN9DW1000Mac19decodeShortMACFrameEPhS0_>
			
			
			
			//we get the device which correspond to the message which was sent (need to be filtered by MAC address)
			DW1000Device* myDistantDevice = searchDistantDevice(address);
 8005472:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005476:	4618      	mov	r0, r3
 8005478:	f7ff fd6e 	bl	8004f58 <_ZN18DW1000RangingClass19searchDistantDeviceEPh>
 800547c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
			
			
			if((_networkDevicesNumber == 0) || (myDistantDevice == nullptr)) {
 8005480:	4bb6      	ldr	r3, [pc, #728]	; (800575c <_ZN18DW1000RangingClass4loopEv+0x61c>)
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	b2db      	uxtb	r3, r3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d003      	beq.n	8005492 <_ZN18DW1000RangingClass4loopEv+0x352>
 800548a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <_ZN18DW1000RangingClass4loopEv+0x356>
 8005492:	2301      	movs	r3, #1
 8005494:	e000      	b.n	8005498 <_ZN18DW1000RangingClass4loopEv+0x358>
 8005496:	2300      	movs	r3, #0
 8005498:	2b00      	cmp	r3, #0
 800549a:	f040 8209 	bne.w	80058b0 <_ZN18DW1000RangingClass4loopEv+0x770>
				return;
			}
			
			
			//then we proceed to range protocole
			if(_type == ANCHOR) {
 800549e:	4bb0      	ldr	r3, [pc, #704]	; (8005760 <_ZN18DW1000RangingClass4loopEv+0x620>)
 80054a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	f040 816f 	bne.w	8005788 <_ZN18DW1000RangingClass4loopEv+0x648>
				if(messageType != _expectedMsgId) {
 80054aa:	4bae      	ldr	r3, [pc, #696]	; (8005764 <_ZN18DW1000RangingClass4loopEv+0x624>)
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	461a      	mov	r2, r3
 80054b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80054b6:	4293      	cmp	r3, r2
 80054b8:	bf14      	ite	ne
 80054ba:	2301      	movne	r3, #1
 80054bc:	2300      	moveq	r3, #0
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d002      	beq.n	80054ca <_ZN18DW1000RangingClass4loopEv+0x38a>
					// unexpected message, start over again (except if already POLL)
					_protocolFailed = true;
 80054c4:	4ba8      	ldr	r3, [pc, #672]	; (8005768 <_ZN18DW1000RangingClass4loopEv+0x628>)
 80054c6:	2201      	movs	r2, #1
 80054c8:	701a      	strb	r2, [r3, #0]
				}
				if(messageType == POLL) {
 80054ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d151      	bne.n	8005576 <_ZN18DW1000RangingClass4loopEv+0x436>
					//we receive a POLL which is a broacast message
					//we need to grab info about it
					int16_t numberDevices = 0;
 80054d2:	2300      	movs	r3, #0
 80054d4:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
					memcpy(&numberDevices, data+SHORT_MAC_LEN+1, 1);
 80054d8:	4ba4      	ldr	r3, [pc, #656]	; (800576c <_ZN18DW1000RangingClass4loopEv+0x62c>)
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
					
					for(uint16_t i = 0; i < numberDevices; i++) {
 80054e0:	2300      	movs	r3, #0
 80054e2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 80054e6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80054ea:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	; 0x6a
 80054ee:	4293      	cmp	r3, r2
 80054f0:	f280 81e1 	bge.w	80058b6 <_ZN18DW1000RangingClass4loopEv+0x776>
						//we need to test if this value is for us:
						//we grab the mac address of each devices:
						byte shortAddress[2];
						memcpy(shortAddress, data+SHORT_MAC_LEN+2+i*4, 2);
 80054f4:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	330b      	adds	r3, #11
 80054fc:	4a95      	ldr	r2, [pc, #596]	; (8005754 <_ZN18DW1000RangingClass4loopEv+0x614>)
 80054fe:	4413      	add	r3, r2
 8005500:	881b      	ldrh	r3, [r3, #0]
 8005502:	b29b      	uxth	r3, r3
 8005504:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
						
						//we test if the short address is our address
						if(shortAddress[0] == _currentShortAddress[0] && shortAddress[1] == _currentShortAddress[1]) {
 8005508:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 800550c:	4b98      	ldr	r3, [pc, #608]	; (8005770 <_ZN18DW1000RangingClass4loopEv+0x630>)
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	429a      	cmp	r2, r3
 8005512:	d12a      	bne.n	800556a <_ZN18DW1000RangingClass4loopEv+0x42a>
 8005514:	f897 2069 	ldrb.w	r2, [r7, #105]	; 0x69
 8005518:	4b95      	ldr	r3, [pc, #596]	; (8005770 <_ZN18DW1000RangingClass4loopEv+0x630>)
 800551a:	785b      	ldrb	r3, [r3, #1]
 800551c:	429a      	cmp	r2, r3
 800551e:	d124      	bne.n	800556a <_ZN18DW1000RangingClass4loopEv+0x42a>
							//we grab the replytime wich is for us
							uint16_t replyTime;
							memcpy(&replyTime, data+SHORT_MAC_LEN+2+i*4+2, 2);
 8005520:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	330d      	adds	r3, #13
 8005528:	4a8a      	ldr	r2, [pc, #552]	; (8005754 <_ZN18DW1000RangingClass4loopEv+0x614>)
 800552a:	4413      	add	r3, r2
 800552c:	881b      	ldrh	r3, [r3, #0]
 800552e:	b29b      	uxth	r3, r3
 8005530:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
							//we configure our replyTime;
							_replyDelayTimeUS = replyTime;
 8005534:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8005538:	4b8e      	ldr	r3, [pc, #568]	; (8005774 <_ZN18DW1000RangingClass4loopEv+0x634>)
 800553a:	801a      	strh	r2, [r3, #0]
							
							// on POLL we (re-)start, so no protocol failure
							_protocolFailed = false;
 800553c:	4b8a      	ldr	r3, [pc, #552]	; (8005768 <_ZN18DW1000RangingClass4loopEv+0x628>)
 800553e:	2200      	movs	r2, #0
 8005540:	701a      	strb	r2, [r3, #0]
							
							DW1000.getReceiveTimestamp(myDistantDevice->timePollReceived);
 8005542:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005546:	3308      	adds	r3, #8
 8005548:	4618      	mov	r0, r3
 800554a:	f7fd fec4 	bl	80032d6 <_ZN11DW1000Class19getReceiveTimestampER10DW1000Time>
							//we note activity for our device:
							myDistantDevice->noteActivity();
 800554e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8005552:	f7ff f8df 	bl	8004714 <_ZN12DW1000Device12noteActivityEv>
							//we indicate our next receive message for our ranging protocole
							_expectedMsgId = RANGE;
 8005556:	4b83      	ldr	r3, [pc, #524]	; (8005764 <_ZN18DW1000RangingClass4loopEv+0x624>)
 8005558:	2202      	movs	r2, #2
 800555a:	701a      	strb	r2, [r3, #0]
//							Serial.print("New expected msg: ");
//							Serial.println(_expectedMsgId);
							transmitPollAck(myDistantDevice);
 800555c:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8005560:	f000 fb80 	bl	8005c64 <_ZN18DW1000RangingClass15transmitPollAckEP12DW1000Device>
							noteActivity();
 8005564:	f000 f9d6 	bl	8005914 <_ZN18DW1000RangingClass12noteActivityEv>
				return;
 8005568:	e1a2      	b.n	80058b0 <_ZN18DW1000RangingClass4loopEv+0x770>
					for(uint16_t i = 0; i < numberDevices; i++) {
 800556a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800556e:	3301      	adds	r3, #1
 8005570:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8005574:	e7b7      	b.n	80054e6 <_ZN18DW1000RangingClass4loopEv+0x3a6>
						
					}
					
					
				}
				else if(messageType == RANGE) {
 8005576:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800557a:	2b02      	cmp	r3, #2
 800557c:	f040 819b 	bne.w	80058b6 <_ZN18DW1000RangingClass4loopEv+0x776>
					//we receive a RANGE which is a broacast message
					//we need to grab info about it
					uint8_t numberDevices = 0;
 8005580:	2300      	movs	r3, #0
 8005582:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
					memcpy(&numberDevices, data+SHORT_MAC_LEN+1, 1);
 8005586:	4b79      	ldr	r3, [pc, #484]	; (800576c <_ZN18DW1000RangingClass4loopEv+0x62c>)
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
					
					
					for(uint8_t i = 0; i < numberDevices; i++) {
 800558e:	2300      	movs	r3, #0
 8005590:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 8005594:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8005598:	f897 20b1 	ldrb.w	r2, [r7, #177]	; 0xb1
 800559c:	429a      	cmp	r2, r3
 800559e:	f080 818a 	bcs.w	80058b6 <_ZN18DW1000RangingClass4loopEv+0x776>
						//we need to test if this value is for us:
						//we grab the mac address of each devices:
						byte shortAddress[2];
						memcpy(shortAddress, data+SHORT_MAC_LEN+2+i*17, 2);
 80055a2:	f897 20b1 	ldrb.w	r2, [r7, #177]	; 0xb1
 80055a6:	4613      	mov	r3, r2
 80055a8:	011b      	lsls	r3, r3, #4
 80055aa:	4413      	add	r3, r2
 80055ac:	330b      	adds	r3, #11
 80055ae:	4a69      	ldr	r2, [pc, #420]	; (8005754 <_ZN18DW1000RangingClass4loopEv+0x614>)
 80055b0:	4413      	add	r3, r2
 80055b2:	881b      	ldrh	r3, [r3, #0]
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
						
						//we test if the short address is our address
						if(shortAddress[0] == _currentShortAddress[0] && shortAddress[1] == _currentShortAddress[1]) {
 80055ba:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80055be:	4b6c      	ldr	r3, [pc, #432]	; (8005770 <_ZN18DW1000RangingClass4loopEv+0x630>)
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	f040 80c0 	bne.w	8005748 <_ZN18DW1000RangingClass4loopEv+0x608>
 80055c8:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 80055cc:	4b68      	ldr	r3, [pc, #416]	; (8005770 <_ZN18DW1000RangingClass4loopEv+0x630>)
 80055ce:	785b      	ldrb	r3, [r3, #1]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	f040 80b9 	bne.w	8005748 <_ZN18DW1000RangingClass4loopEv+0x608>
							//we grab the replytime wich is for us
							DW1000.getReceiveTimestamp(myDistantDevice->timeRangeReceived);
 80055d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80055da:	3328      	adds	r3, #40	; 0x28
 80055dc:	4618      	mov	r0, r3
 80055de:	f7fd fe7a 	bl	80032d6 <_ZN11DW1000Class19getReceiveTimestampER10DW1000Time>
							noteActivity();
 80055e2:	f000 f997 	bl	8005914 <_ZN18DW1000RangingClass12noteActivityEv>
							_expectedMsgId = POLL;
 80055e6:	4b5f      	ldr	r3, [pc, #380]	; (8005764 <_ZN18DW1000RangingClass4loopEv+0x624>)
 80055e8:	2200      	movs	r2, #0
 80055ea:	701a      	strb	r2, [r3, #0]
							
							if(!_protocolFailed) {
 80055ec:	4b5e      	ldr	r3, [pc, #376]	; (8005768 <_ZN18DW1000RangingClass4loopEv+0x628>)
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	f083 0301 	eor.w	r3, r3, #1
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	f000 80a1 	beq.w	800573e <_ZN18DW1000RangingClass4loopEv+0x5fe>
								
								myDistantDevice->timePollSent.setTimestamp(data+SHORT_MAC_LEN+4+17*i);
 80055fc:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8005600:	f897 20b1 	ldrb.w	r2, [r7, #177]	; 0xb1
 8005604:	4613      	mov	r3, r2
 8005606:	011b      	lsls	r3, r3, #4
 8005608:	4413      	add	r3, r2
 800560a:	330d      	adds	r3, #13
 800560c:	4a51      	ldr	r2, [pc, #324]	; (8005754 <_ZN18DW1000RangingClass4loopEv+0x614>)
 800560e:	4413      	add	r3, r2
 8005610:	4619      	mov	r1, r3
 8005612:	f000 ff00 	bl	8006416 <_ZN10DW1000Time12setTimestampEPh>
								myDistantDevice->timePollAckReceived.setTimestamp(data+SHORT_MAC_LEN+9+17*i);
 8005616:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800561a:	f103 0018 	add.w	r0, r3, #24
 800561e:	f897 20b1 	ldrb.w	r2, [r7, #177]	; 0xb1
 8005622:	4613      	mov	r3, r2
 8005624:	011b      	lsls	r3, r3, #4
 8005626:	4413      	add	r3, r2
 8005628:	3312      	adds	r3, #18
 800562a:	4a4a      	ldr	r2, [pc, #296]	; (8005754 <_ZN18DW1000RangingClass4loopEv+0x614>)
 800562c:	4413      	add	r3, r2
 800562e:	4619      	mov	r1, r3
 8005630:	f000 fef1 	bl	8006416 <_ZN10DW1000Time12setTimestampEPh>
								myDistantDevice->timeRangeSent.setTimestamp(data+SHORT_MAC_LEN+14+17*i);
 8005634:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005638:	f103 0020 	add.w	r0, r3, #32
 800563c:	f897 20b1 	ldrb.w	r2, [r7, #177]	; 0xb1
 8005640:	4613      	mov	r3, r2
 8005642:	011b      	lsls	r3, r3, #4
 8005644:	4413      	add	r3, r2
 8005646:	3317      	adds	r3, #23
 8005648:	4a42      	ldr	r2, [pc, #264]	; (8005754 <_ZN18DW1000RangingClass4loopEv+0x614>)
 800564a:	4413      	add	r3, r2
 800564c:	4619      	mov	r1, r3
 800564e:	f000 fee2 	bl	8006416 <_ZN10DW1000Time12setTimestampEPh>
								
								// (re-)compute range as two-way ranging is done
								DW1000Time myTOF;
 8005652:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005656:	4618      	mov	r0, r3
 8005658:	f000 fe7a 	bl	8006350 <_ZN10DW1000TimeC1Ev>
								computeRangeAsymmetric(myDistantDevice, &myTOF); // CHOSEN RANGING ALGORITHM
 800565c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005660:	4619      	mov	r1, r3
 8005662:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8005666:	f000 fd04 	bl	8006072 <_ZN18DW1000RangingClass22computeRangeAsymmetricEP12DW1000DeviceP10DW1000Time>
								
								float distance = myTOF.getAsMeters();
 800566a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800566e:	4618      	mov	r0, r3
 8005670:	f000 ff94 	bl	800659c <_ZNK10DW1000Time11getAsMetersEv>
 8005674:	ed87 0a2b 	vstr	s0, [r7, #172]	; 0xac
								
								if (_useRangeFilter) {
 8005678:	4b3f      	ldr	r3, [pc, #252]	; (8005778 <_ZN18DW1000RangingClass4loopEv+0x638>)
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	b2db      	uxtb	r3, r3
 800567e:	2b00      	cmp	r3, #0
 8005680:	d020      	beq.n	80056c4 <_ZN18DW1000RangingClass4loopEv+0x584>
									//Skip first range
									if (myDistantDevice->getRange() != 0.0f) {
 8005682:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8005686:	f7fe fff1 	bl	800466c <_ZN12DW1000Device8getRangeEv>
 800568a:	eef0 7a40 	vmov.f32	s15, s0
 800568e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005696:	bf14      	ite	ne
 8005698:	2301      	movne	r3, #1
 800569a:	2300      	moveq	r3, #0
 800569c:	b2db      	uxtb	r3, r3
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d010      	beq.n	80056c4 <_ZN18DW1000RangingClass4loopEv+0x584>
										distance = filterValue(distance, myDistantDevice->getRange(), _rangeFilterValue);
 80056a2:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80056a6:	f7fe ffe1 	bl	800466c <_ZN12DW1000Device8getRangeEv>
 80056aa:	eef0 7a40 	vmov.f32	s15, s0
 80056ae:	4b33      	ldr	r3, [pc, #204]	; (800577c <_ZN18DW1000RangingClass4loopEv+0x63c>)
 80056b0:	881b      	ldrh	r3, [r3, #0]
 80056b2:	4618      	mov	r0, r3
 80056b4:	eef0 0a67 	vmov.f32	s1, s15
 80056b8:	ed97 0a2b 	vldr	s0, [r7, #172]	; 0xac
 80056bc:	f000 fdcc 	bl	8006258 <_ZN18DW1000RangingClass11filterValueEfft>
 80056c0:	ed87 0a2b 	vstr	s0, [r7, #172]	; 0xac
									}
								}
								
								myDistantDevice->setRXPower(DW1000.getReceivePower());
 80056c4:	f7fe fbde 	bl	8003e84 <_ZN11DW1000Class15getReceivePowerEv>
 80056c8:	eef0 7a40 	vmov.f32	s15, s0
 80056cc:	eeb0 0a67 	vmov.f32	s0, s15
 80056d0:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80056d4:	f7fe ff1a 	bl	800450c <_ZN12DW1000Device10setRXPowerEf>
								myDistantDevice->setRange(distance);
 80056d8:	ed97 0a2b 	vldr	s0, [r7, #172]	; 0xac
 80056dc:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80056e0:	f7fe fef4 	bl	80044cc <_ZN12DW1000Device8setRangeEf>
								
								myDistantDevice->setFPPower(DW1000.getFirstPathPower());
 80056e4:	f7fe faf4 	bl	8003cd0 <_ZN11DW1000Class17getFirstPathPowerEv>
 80056e8:	eef0 7a40 	vmov.f32	s15, s0
 80056ec:	eeb0 0a67 	vmov.f32	s0, s15
 80056f0:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80056f4:	f7fe ff2a 	bl	800454c <_ZN12DW1000Device10setFPPowerEf>
								myDistantDevice->setQuality(DW1000.getReceiveQuality());
 80056f8:	f7fe fab6 	bl	8003c68 <_ZN11DW1000Class17getReceiveQualityEv>
 80056fc:	eef0 7a40 	vmov.f32	s15, s0
 8005700:	eeb0 0a67 	vmov.f32	s0, s15
 8005704:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8005708:	f7fe ff40 	bl	800458c <_ZN12DW1000Device10setQualityEf>
								
//								Serial.println("Sending range to tag");
								//we send the range to TAG
								transmitRangeReport(myDistantDevice);
 800570c:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8005710:	f000 fc22 	bl	8005f58 <_ZN18DW1000RangingClass19transmitRangeReportEP12DW1000Device>
								
								//we have finished our range computation. We send the corresponding handler
								_lastDistantDevice = myDistantDevice->getIndex();
 8005714:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8005718:	f7ff f9b9 	bl	8004a8e <_ZN12DW1000Device8getIndexEv>
 800571c:	4603      	mov	r3, r0
 800571e:	b21a      	sxth	r2, r3
 8005720:	4b17      	ldr	r3, [pc, #92]	; (8005780 <_ZN18DW1000RangingClass4loopEv+0x640>)
 8005722:	801a      	strh	r2, [r3, #0]
								if(_handleNewRange != 0) {
 8005724:	4b17      	ldr	r3, [pc, #92]	; (8005784 <_ZN18DW1000RangingClass4loopEv+0x644>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d002      	beq.n	8005732 <_ZN18DW1000RangingClass4loopEv+0x5f2>
									(*_handleNewRange)();
 800572c:	4b15      	ldr	r3, [pc, #84]	; (8005784 <_ZN18DW1000RangingClass4loopEv+0x644>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4798      	blx	r3
								DW1000Time myTOF;
 8005732:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005736:	4618      	mov	r0, r3
 8005738:	f000 fe51 	bl	80063de <_ZN10DW1000TimeD1Ev>
				return;
 800573c:	e0b8      	b.n	80058b0 <_ZN18DW1000RangingClass4loopEv+0x770>
								}
								
							}
							else {
//								Serial.println("Sending range FAIL to tag");
								transmitRangeFailed(myDistantDevice);
 800573e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8005742:	f000 fc5f 	bl	8006004 <_ZN18DW1000RangingClass19transmitRangeFailedEP12DW1000Device>
				return;
 8005746:	e0b3      	b.n	80058b0 <_ZN18DW1000RangingClass4loopEv+0x770>
					for(uint8_t i = 0; i < numberDevices; i++) {
 8005748:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 800574c:	3301      	adds	r3, #1
 800574e:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 8005752:	e71f      	b.n	8005594 <_ZN18DW1000RangingClass4loopEv+0x454>
 8005754:	20000428 	.word	0x20000428
 8005758:	20000414 	.word	0x20000414
 800575c:	2000040e 	.word	0x2000040e
 8005760:	20000416 	.word	0x20000416
 8005764:	20000418 	.word	0x20000418
 8005768:	2000041c 	.word	0x2000041c
 800576c:	20000432 	.word	0x20000432
 8005770:	20000408 	.word	0x20000408
 8005774:	2000048c 	.word	0x2000048c
 8005778:	20000419 	.word	0x20000419
 800577c:	2000000c 	.word	0x2000000c
 8005780:	20000410 	.word	0x20000410
 8005784:	20000494 	.word	0x20000494
					}
					
					
				}
			}
			else if(_type == TAG) {
 8005788:	4b4d      	ldr	r3, [pc, #308]	; (80058c0 <_ZN18DW1000RangingClass4loopEv+0x780>)
 800578a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800578e:	2b00      	cmp	r3, #0
 8005790:	f040 8091 	bne.w	80058b6 <_ZN18DW1000RangingClass4loopEv+0x776>
				// get message and parse
				if(messageType != _expectedMsgId) {
 8005794:	4b4b      	ldr	r3, [pc, #300]	; (80058c4 <_ZN18DW1000RangingClass4loopEv+0x784>)
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	b2db      	uxtb	r3, r3
 800579a:	461a      	mov	r2, r3
 800579c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80057a0:	4293      	cmp	r3, r2
 80057a2:	bf14      	ite	ne
 80057a4:	2301      	movne	r3, #1
 80057a6:	2300      	moveq	r3, #0
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	f040 8082 	bne.w	80058b4 <_ZN18DW1000RangingClass4loopEv+0x774>
					//not needed ?
					return;
					_expectedMsgId = POLL_ACK;
					return;
				}
				if(messageType == POLL_ACK) {
 80057b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d121      	bne.n	80057fc <_ZN18DW1000RangingClass4loopEv+0x6bc>
					DW1000.getReceiveTimestamp(myDistantDevice->timePollAckReceived);
 80057b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80057bc:	3318      	adds	r3, #24
 80057be:	4618      	mov	r0, r3
 80057c0:	f7fd fd89 	bl	80032d6 <_ZN11DW1000Class19getReceiveTimestampER10DW1000Time>
					//we note activity for our device:
					myDistantDevice->noteActivity();
 80057c4:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80057c8:	f7fe ffa4 	bl	8004714 <_ZN12DW1000Device12noteActivityEv>
					
					//in the case the message come from our last device:
					if(myDistantDevice->getIndex() == _networkDevicesNumber-1) {
 80057cc:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80057d0:	f7ff f95d 	bl	8004a8e <_ZN12DW1000Device8getIndexEv>
 80057d4:	4603      	mov	r3, r0
 80057d6:	461a      	mov	r2, r3
 80057d8:	4b3b      	ldr	r3, [pc, #236]	; (80058c8 <_ZN18DW1000RangingClass4loopEv+0x788>)
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	3b01      	subs	r3, #1
 80057e0:	429a      	cmp	r2, r3
 80057e2:	bf0c      	ite	eq
 80057e4:	2301      	moveq	r3, #1
 80057e6:	2300      	movne	r3, #0
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d063      	beq.n	80058b6 <_ZN18DW1000RangingClass4loopEv+0x776>
						_expectedMsgId = RANGE_REPORT;
 80057ee:	4b35      	ldr	r3, [pc, #212]	; (80058c4 <_ZN18DW1000RangingClass4loopEv+0x784>)
 80057f0:	2203      	movs	r2, #3
 80057f2:	701a      	strb	r2, [r3, #0]
						//and transmit the next message (range) of the ranging protocole (in broadcast)
						transmitRange(nullptr);
 80057f4:	2000      	movs	r0, #0
 80057f6:	f000 fa81 	bl	8005cfc <_ZN18DW1000RangingClass13transmitRangeEP12DW1000Device>
 80057fa:	e05c      	b.n	80058b6 <_ZN18DW1000RangingClass4loopEv+0x776>
					}
				}
				else if(messageType == RANGE_REPORT) {
 80057fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005800:	2b03      	cmp	r3, #3
 8005802:	d14f      	bne.n	80058a4 <_ZN18DW1000RangingClass4loopEv+0x764>
					
					float curRange;
					memcpy(&curRange, data+1+SHORT_MAC_LEN, 4);
 8005804:	4b31      	ldr	r3, [pc, #196]	; (80058cc <_ZN18DW1000RangingClass4loopEv+0x78c>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	657b      	str	r3, [r7, #84]	; 0x54
					float curRXPower;
					memcpy(&curRXPower, data+5+SHORT_MAC_LEN, 4);
 800580a:	4b31      	ldr	r3, [pc, #196]	; (80058d0 <_ZN18DW1000RangingClass4loopEv+0x790>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	653b      	str	r3, [r7, #80]	; 0x50
					
					if (_useRangeFilter) {
 8005810:	4b30      	ldr	r3, [pc, #192]	; (80058d4 <_ZN18DW1000RangingClass4loopEv+0x794>)
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b00      	cmp	r3, #0
 8005818:	d024      	beq.n	8005864 <_ZN18DW1000RangingClass4loopEv+0x724>
						//Skip first range
						if (myDistantDevice->getRange() != 0.0f) {
 800581a:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800581e:	f7fe ff25 	bl	800466c <_ZN12DW1000Device8getRangeEv>
 8005822:	eef0 7a40 	vmov.f32	s15, s0
 8005826:	eef5 7a40 	vcmp.f32	s15, #0.0
 800582a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800582e:	bf14      	ite	ne
 8005830:	2301      	movne	r3, #1
 8005832:	2300      	moveq	r3, #0
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b00      	cmp	r3, #0
 8005838:	d014      	beq.n	8005864 <_ZN18DW1000RangingClass4loopEv+0x724>
							curRange = filterValue(curRange, myDistantDevice->getRange(), _rangeFilterValue);
 800583a:	ed97 8a15 	vldr	s16, [r7, #84]	; 0x54
 800583e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8005842:	f7fe ff13 	bl	800466c <_ZN12DW1000Device8getRangeEv>
 8005846:	eef0 7a40 	vmov.f32	s15, s0
 800584a:	4b23      	ldr	r3, [pc, #140]	; (80058d8 <_ZN18DW1000RangingClass4loopEv+0x798>)
 800584c:	881b      	ldrh	r3, [r3, #0]
 800584e:	4618      	mov	r0, r3
 8005850:	eef0 0a67 	vmov.f32	s1, s15
 8005854:	eeb0 0a48 	vmov.f32	s0, s16
 8005858:	f000 fcfe 	bl	8006258 <_ZN18DW1000RangingClass11filterValueEfft>
 800585c:	eef0 7a40 	vmov.f32	s15, s0
 8005860:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
						}
					}

					//we have a new range to save !
					myDistantDevice->setRange(curRange);
 8005864:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005868:	eeb0 0a67 	vmov.f32	s0, s15
 800586c:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8005870:	f7fe fe2c 	bl	80044cc <_ZN12DW1000Device8setRangeEf>
					myDistantDevice->setRXPower(curRXPower);
 8005874:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8005878:	eeb0 0a67 	vmov.f32	s0, s15
 800587c:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8005880:	f7fe fe44 	bl	800450c <_ZN12DW1000Device10setRXPowerEf>
					
					
					//We can call our handler !
					//we have finished our range computation. We send the corresponding handler
					_lastDistantDevice = myDistantDevice->getIndex();
 8005884:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8005888:	f7ff f901 	bl	8004a8e <_ZN12DW1000Device8getIndexEv>
 800588c:	4603      	mov	r3, r0
 800588e:	b21a      	sxth	r2, r3
 8005890:	4b12      	ldr	r3, [pc, #72]	; (80058dc <_ZN18DW1000RangingClass4loopEv+0x79c>)
 8005892:	801a      	strh	r2, [r3, #0]
					if(_handleNewRange != 0) {
 8005894:	4b12      	ldr	r3, [pc, #72]	; (80058e0 <_ZN18DW1000RangingClass4loopEv+0x7a0>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d00c      	beq.n	80058b6 <_ZN18DW1000RangingClass4loopEv+0x776>
						(*_handleNewRange)();
 800589c:	4b10      	ldr	r3, [pc, #64]	; (80058e0 <_ZN18DW1000RangingClass4loopEv+0x7a0>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4798      	blx	r3
 80058a2:	e008      	b.n	80058b6 <_ZN18DW1000RangingClass4loopEv+0x776>
					}
				}
				else if(messageType == RANGE_FAILED) {
 80058a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80058a8:	2bff      	cmp	r3, #255	; 0xff
 80058aa:	e004      	b.n	80058b6 <_ZN18DW1000RangingClass4loopEv+0x776>
			return;
 80058ac:	bf00      	nop
 80058ae:	e002      	b.n	80058b6 <_ZN18DW1000RangingClass4loopEv+0x776>
				return;
 80058b0:	bf00      	nop
 80058b2:	e000      	b.n	80058b6 <_ZN18DW1000RangingClass4loopEv+0x776>
					return;
 80058b4:	bf00      	nop
				}
			}
		}
		
	}
}
 80058b6:	37b8      	adds	r7, #184	; 0xb8
 80058b8:	46bd      	mov	sp, r7
 80058ba:	ecbd 8b02 	vpop	{d8}
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	20000416 	.word	0x20000416
 80058c4:	20000418 	.word	0x20000418
 80058c8:	2000040e 	.word	0x2000040e
 80058cc:	20000432 	.word	0x20000432
 80058d0:	20000436 	.word	0x20000436
 80058d4:	20000419 	.word	0x20000419
 80058d8:	2000000c 	.word	0x2000000c
 80058dc:	20000410 	.word	0x20000410
 80058e0:	20000494 	.word	0x20000494

080058e4 <_ZN18DW1000RangingClass10handleSentEv>:
/* ###########################################################################
 * #### Private methods and Handlers for transmit & Receive reply ############
 * ######################################################################### */


void DW1000RangingClass::handleSent() {
 80058e4:	b480      	push	{r7}
 80058e6:	af00      	add	r7, sp, #0
	// status change on sent success
	_sentAck = true;
 80058e8:	4b03      	ldr	r3, [pc, #12]	; (80058f8 <_ZN18DW1000RangingClass10handleSentEv+0x14>)
 80058ea:	2201      	movs	r2, #1
 80058ec:	701a      	strb	r2, [r3, #0]
}
 80058ee:	bf00      	nop
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr
 80058f8:	2000041a 	.word	0x2000041a

080058fc <_ZN18DW1000RangingClass14handleReceivedEv>:

void DW1000RangingClass::handleReceived() {
 80058fc:	b480      	push	{r7}
 80058fe:	af00      	add	r7, sp, #0
	// status change on received success
	_receivedAck = true;
 8005900:	4b03      	ldr	r3, [pc, #12]	; (8005910 <_ZN18DW1000RangingClass14handleReceivedEv+0x14>)
 8005902:	2201      	movs	r2, #1
 8005904:	701a      	strb	r2, [r3, #0]
}
 8005906:	bf00      	nop
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr
 8005910:	2000041b 	.word	0x2000041b

08005914 <_ZN18DW1000RangingClass12noteActivityEv>:


void DW1000RangingClass::noteActivity() {
 8005914:	b580      	push	{r7, lr}
 8005916:	af00      	add	r7, sp, #0
	// update activity timestamp, so that we do not reach "resetPeriod"
	_lastActivity = HAL_GetTick();
 8005918:	f001 feaa 	bl	8007670 <HAL_GetTick>
 800591c:	4603      	mov	r3, r0
 800591e:	4a02      	ldr	r2, [pc, #8]	; (8005928 <_ZN18DW1000RangingClass12noteActivityEv+0x14>)
 8005920:	6013      	str	r3, [r2, #0]
}
 8005922:	bf00      	nop
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	20000484 	.word	0x20000484

0800592c <_ZN18DW1000RangingClass13resetInactiveEv>:

void DW1000RangingClass::resetInactive() {
 800592c:	b580      	push	{r7, lr}
 800592e:	af00      	add	r7, sp, #0
	//if inactive
	if(_type == ANCHOR) {
 8005930:	4b06      	ldr	r3, [pc, #24]	; (800594c <_ZN18DW1000RangingClass13resetInactiveEv+0x20>)
 8005932:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005936:	2b01      	cmp	r3, #1
 8005938:	d104      	bne.n	8005944 <_ZN18DW1000RangingClass13resetInactiveEv+0x18>
		_expectedMsgId = POLL;
 800593a:	4b05      	ldr	r3, [pc, #20]	; (8005950 <_ZN18DW1000RangingClass13resetInactiveEv+0x24>)
 800593c:	2200      	movs	r2, #0
 800593e:	701a      	strb	r2, [r3, #0]
		receiver();
 8005940:	f000 fb8a 	bl	8006058 <_ZN18DW1000RangingClass8receiverEv>
	}
	noteActivity();
 8005944:	f7ff ffe6 	bl	8005914 <_ZN18DW1000RangingClass12noteActivityEv>
}
 8005948:	bf00      	nop
 800594a:	bd80      	pop	{r7, pc}
 800594c:	20000416 	.word	0x20000416
 8005950:	20000418 	.word	0x20000418

08005954 <_ZN18DW1000RangingClass9timerTickEv>:

void DW1000RangingClass::timerTick() {
 8005954:	b580      	push	{r7, lr}
 8005956:	af00      	add	r7, sp, #0
	if(_networkDevicesNumber > 0 && counterForBlink != 0) {
 8005958:	4b1d      	ldr	r3, [pc, #116]	; (80059d0 <_ZN18DW1000RangingClass9timerTickEv+0x7c>)
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	b2db      	uxtb	r3, r3
 800595e:	2b00      	cmp	r3, #0
 8005960:	d006      	beq.n	8005970 <_ZN18DW1000RangingClass9timerTickEv+0x1c>
 8005962:	4b1c      	ldr	r3, [pc, #112]	; (80059d4 <_ZN18DW1000RangingClass9timerTickEv+0x80>)
 8005964:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d001      	beq.n	8005970 <_ZN18DW1000RangingClass9timerTickEv+0x1c>
 800596c:	2301      	movs	r3, #1
 800596e:	e000      	b.n	8005972 <_ZN18DW1000RangingClass9timerTickEv+0x1e>
 8005970:	2300      	movs	r3, #0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00b      	beq.n	800598e <_ZN18DW1000RangingClass9timerTickEv+0x3a>
		if(_type == TAG) {
 8005976:	4b18      	ldr	r3, [pc, #96]	; (80059d8 <_ZN18DW1000RangingClass9timerTickEv+0x84>)
 8005978:	f9b3 3000 	ldrsh.w	r3, [r3]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d114      	bne.n	80059aa <_ZN18DW1000RangingClass9timerTickEv+0x56>
			_expectedMsgId = POLL_ACK;
 8005980:	4b16      	ldr	r3, [pc, #88]	; (80059dc <_ZN18DW1000RangingClass9timerTickEv+0x88>)
 8005982:	2201      	movs	r2, #1
 8005984:	701a      	strb	r2, [r3, #0]
			//send a prodcast poll
			transmitPoll(nullptr);
 8005986:	2000      	movs	r0, #0
 8005988:	f000 f8b2 	bl	8005af0 <_ZN18DW1000RangingClass12transmitPollEP12DW1000Device>
 800598c:	e00d      	b.n	80059aa <_ZN18DW1000RangingClass9timerTickEv+0x56>
		}
	}
	else if(counterForBlink == 0) {
 800598e:	4b11      	ldr	r3, [pc, #68]	; (80059d4 <_ZN18DW1000RangingClass9timerTickEv+0x80>)
 8005990:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d108      	bne.n	80059aa <_ZN18DW1000RangingClass9timerTickEv+0x56>
		if(_type == TAG) {
 8005998:	4b0f      	ldr	r3, [pc, #60]	; (80059d8 <_ZN18DW1000RangingClass9timerTickEv+0x84>)
 800599a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d101      	bne.n	80059a6 <_ZN18DW1000RangingClass9timerTickEv+0x52>
			transmitBlink();
 80059a2:	f000 f863 	bl	8005a6c <_ZN18DW1000RangingClass13transmitBlinkEv>
		}
		//check for inactive devices if we are a TAG or ANCHOR
		checkForInactiveDevices();
 80059a6:	f7ff fb5f 	bl	8005068 <_ZN18DW1000RangingClass23checkForInactiveDevicesEv>
	}
	counterForBlink++;
 80059aa:	4b0a      	ldr	r3, [pc, #40]	; (80059d4 <_ZN18DW1000RangingClass9timerTickEv+0x80>)
 80059ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	3301      	adds	r3, #1
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	b21a      	sxth	r2, r3
 80059b8:	4b06      	ldr	r3, [pc, #24]	; (80059d4 <_ZN18DW1000RangingClass9timerTickEv+0x80>)
 80059ba:	801a      	strh	r2, [r3, #0]
	if(counterForBlink > 20) {
 80059bc:	4b05      	ldr	r3, [pc, #20]	; (80059d4 <_ZN18DW1000RangingClass9timerTickEv+0x80>)
 80059be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80059c2:	2b14      	cmp	r3, #20
 80059c4:	dd02      	ble.n	80059cc <_ZN18DW1000RangingClass9timerTickEv+0x78>
		counterForBlink = 0;
 80059c6:	4b03      	ldr	r3, [pc, #12]	; (80059d4 <_ZN18DW1000RangingClass9timerTickEv+0x80>)
 80059c8:	2200      	movs	r2, #0
 80059ca:	801a      	strh	r2, [r3, #0]
	}
}
 80059cc:	bf00      	nop
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	2000040e 	.word	0x2000040e
 80059d4:	20000424 	.word	0x20000424
 80059d8:	20000416 	.word	0x20000416
 80059dc:	20000418 	.word	0x20000418

080059e0 <_ZN18DW1000RangingClass16copyShortAddressEPhS0_>:


void DW1000RangingClass::copyShortAddress(byte address1[], byte address2[]) {
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
	*address1     = *address2;
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	781a      	ldrb	r2, [r3, #0]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	701a      	strb	r2, [r3, #0]
	*(address1+1) = *(address2+1);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	3301      	adds	r3, #1
 80059f6:	683a      	ldr	r2, [r7, #0]
 80059f8:	7852      	ldrb	r2, [r2, #1]
 80059fa:	701a      	strb	r2, [r3, #0]
}
 80059fc:	bf00      	nop
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <_ZN18DW1000RangingClass12transmitInitEv>:

/* ###########################################################################
 * #### Methods for ranging protocole   ######################################
 * ######################################################################### */

void DW1000RangingClass::transmitInit() {
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	af00      	add	r7, sp, #0
	DW1000.newTransmit();
 8005a0c:	f7fd faac 	bl	8002f68 <_ZN11DW1000Class11newTransmitEv>
	DW1000.setDefaults();
 8005a10:	f7fd ffba 	bl	8003988 <_ZN11DW1000Class11setDefaultsEv>
}
 8005a14:	bf00      	nop
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <_ZN18DW1000RangingClass8transmitEPh>:


void DW1000RangingClass::transmit(byte datas[]) {
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
	DW1000.setData(datas, LEN_DATA);
 8005a20:	215a      	movs	r1, #90	; 0x5a
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f7fd fbea 	bl	80031fc <_ZN11DW1000Class7setDataEPht>
	DW1000.startTransmit();
 8005a28:	f7fd fab2 	bl	8002f90 <_ZN11DW1000Class13startTransmitEv>
}
 8005a2c:	bf00      	nop
 8005a2e:	3708      	adds	r7, #8
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <_ZN18DW1000RangingClass8transmitEPh10DW1000Time>:


void DW1000RangingClass::transmit(byte datas[], DW1000Time time) {
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
	DW1000.setDelay(time);
 8005a3e:	f107 0308 	add.w	r3, r7, #8
 8005a42:	6839      	ldr	r1, [r7, #0]
 8005a44:	4618      	mov	r0, r3
 8005a46:	f7fd fb5b 	bl	8003100 <_ZN11DW1000Class8setDelayERK10DW1000Time>
 8005a4a:	f107 0308 	add.w	r3, r7, #8
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f000 fcc5 	bl	80063de <_ZN10DW1000TimeD1Ev>
	DW1000.setData(data, LEN_DATA);
 8005a54:	215a      	movs	r1, #90	; 0x5a
 8005a56:	4804      	ldr	r0, [pc, #16]	; (8005a68 <_ZN18DW1000RangingClass8transmitEPh10DW1000Time+0x34>)
 8005a58:	f7fd fbd0 	bl	80031fc <_ZN11DW1000Class7setDataEPht>
	DW1000.startTransmit();
 8005a5c:	f7fd fa98 	bl	8002f90 <_ZN11DW1000Class13startTransmitEv>
}
 8005a60:	bf00      	nop
 8005a62:	3710      	adds	r7, #16
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	20000428 	.word	0x20000428

08005a6c <_ZN18DW1000RangingClass13transmitBlinkEv>:

void DW1000RangingClass::transmitBlink() {
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	af00      	add	r7, sp, #0
	transmitInit();
 8005a70:	f7ff ffca 	bl	8005a08 <_ZN18DW1000RangingClass12transmitInitEv>
	_globalMac.generateBlinkFrame(data, _currentAddress, _currentShortAddress);
 8005a74:	4b05      	ldr	r3, [pc, #20]	; (8005a8c <_ZN18DW1000RangingClass13transmitBlinkEv+0x20>)
 8005a76:	4a06      	ldr	r2, [pc, #24]	; (8005a90 <_ZN18DW1000RangingClass13transmitBlinkEv+0x24>)
 8005a78:	4906      	ldr	r1, [pc, #24]	; (8005a94 <_ZN18DW1000RangingClass13transmitBlinkEv+0x28>)
 8005a7a:	4807      	ldr	r0, [pc, #28]	; (8005a98 <_ZN18DW1000RangingClass13transmitBlinkEv+0x2c>)
 8005a7c:	f7fe fe93 	bl	80047a6 <_ZN9DW1000Mac18generateBlinkFrameEPhS0_S0_>
	transmit(data);
 8005a80:	4804      	ldr	r0, [pc, #16]	; (8005a94 <_ZN18DW1000RangingClass13transmitBlinkEv+0x28>)
 8005a82:	f7ff ffc9 	bl	8005a18 <_ZN18DW1000RangingClass8transmitEPh>
}
 8005a86:	bf00      	nop
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	20000408 	.word	0x20000408
 8005a90:	20000400 	.word	0x20000400
 8005a94:	20000428 	.word	0x20000428
 8005a98:	20000414 	.word	0x20000414

08005a9c <_ZN18DW1000RangingClass19transmitRangingInitEP12DW1000Device>:

void DW1000RangingClass::transmitRangingInit(DW1000Device* myDistantDevice) {
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
	transmitInit();
 8005aa4:	f7ff ffb0 	bl	8005a08 <_ZN18DW1000RangingClass12transmitInitEv>
	//we generate the mac frame for a ranging init message
	_globalMac.generateLongMACFrame(data, _currentShortAddress, myDistantDevice->getByteAddress());
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f7fe fd8f 	bl	80045cc <_ZN12DW1000Device14getByteAddressEv>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	4a0b      	ldr	r2, [pc, #44]	; (8005ae0 <_ZN18DW1000RangingClass19transmitRangingInitEP12DW1000Device+0x44>)
 8005ab2:	490c      	ldr	r1, [pc, #48]	; (8005ae4 <_ZN18DW1000RangingClass19transmitRangingInitEP12DW1000Device+0x48>)
 8005ab4:	480c      	ldr	r0, [pc, #48]	; (8005ae8 <_ZN18DW1000RangingClass19transmitRangingInitEP12DW1000Device+0x4c>)
 8005ab6:	f7fe fede 	bl	8004876 <_ZN9DW1000Mac20generateLongMACFrameEPhS0_S0_>
	//we define the function code
	data[LONG_MAC_LEN] = RANGING_INIT;
 8005aba:	4b0a      	ldr	r3, [pc, #40]	; (8005ae4 <_ZN18DW1000RangingClass19transmitRangingInitEP12DW1000Device+0x48>)
 8005abc:	2205      	movs	r2, #5
 8005abe:	73da      	strb	r2, [r3, #15]
	
	copyShortAddress(_lastSentToShortAddress, myDistantDevice->getByteShortAddress());
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f7fe fd8f 	bl	80045e4 <_ZN12DW1000Device19getByteShortAddressEv>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	4619      	mov	r1, r3
 8005aca:	4808      	ldr	r0, [pc, #32]	; (8005aec <_ZN18DW1000RangingClass19transmitRangingInitEP12DW1000Device+0x50>)
 8005acc:	f7ff ff88 	bl	80059e0 <_ZN18DW1000RangingClass16copyShortAddressEPhS0_>
	transmit(data);
 8005ad0:	4804      	ldr	r0, [pc, #16]	; (8005ae4 <_ZN18DW1000RangingClass19transmitRangingInitEP12DW1000Device+0x48>)
 8005ad2:	f7ff ffa1 	bl	8005a18 <_ZN18DW1000RangingClass8transmitEPh>
}
 8005ad6:	bf00      	nop
 8005ad8:	3708      	adds	r7, #8
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	20000408 	.word	0x20000408
 8005ae4:	20000428 	.word	0x20000428
 8005ae8:	20000414 	.word	0x20000414
 8005aec:	2000040c 	.word	0x2000040c

08005af0 <_ZN18DW1000RangingClass12transmitPollEP12DW1000Device>:

void DW1000RangingClass::transmitPoll(DW1000Device* myDistantDevice) {
 8005af0:	b590      	push	{r4, r7, lr}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
	
	transmitInit();
 8005af8:	f7ff ff86 	bl	8005a08 <_ZN18DW1000RangingClass12transmitInitEv>
	
	if(myDistantDevice == nullptr) {
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d177      	bne.n	8005bf2 <_ZN18DW1000RangingClass12transmitPollEP12DW1000Device+0x102>
		//we need to set our timerDelay:
		_timerDelay = DEFAULT_TIMER_DELAY+(uint16_t)(_networkDevicesNumber*3*DEFAULT_REPLY_DELAY_TIME/1000);
 8005b02:	4b50      	ldr	r3, [pc, #320]	; (8005c44 <_ZN18DW1000RangingClass12transmitPollEP12DW1000Device+0x154>)
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	0052      	lsls	r2, r2, #1
 8005b0e:	4413      	add	r3, r2
 8005b10:	461a      	mov	r2, r3
 8005b12:	00d2      	lsls	r2, r2, #3
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	3350      	adds	r3, #80	; 0x50
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	4b4a      	ldr	r3, [pc, #296]	; (8005c48 <_ZN18DW1000RangingClass12transmitPollEP12DW1000Device+0x158>)
 8005b1e:	801a      	strh	r2, [r3, #0]
		
		byte shortBroadcast[2] = {0xFF, 0xFF};
 8005b20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b24:	81bb      	strh	r3, [r7, #12]
		_globalMac.generateShortMACFrame(data, _currentShortAddress, shortBroadcast);
 8005b26:	f107 030c 	add.w	r3, r7, #12
 8005b2a:	4a48      	ldr	r2, [pc, #288]	; (8005c4c <_ZN18DW1000RangingClass12transmitPollEP12DW1000Device+0x15c>)
 8005b2c:	4948      	ldr	r1, [pc, #288]	; (8005c50 <_ZN18DW1000RangingClass12transmitPollEP12DW1000Device+0x160>)
 8005b2e:	4849      	ldr	r0, [pc, #292]	; (8005c54 <_ZN18DW1000RangingClass12transmitPollEP12DW1000Device+0x164>)
 8005b30:	f7fe fe69 	bl	8004806 <_ZN9DW1000Mac21generateShortMACFrameEPhS0_S0_>
		data[SHORT_MAC_LEN]   = POLL;
 8005b34:	4b46      	ldr	r3, [pc, #280]	; (8005c50 <_ZN18DW1000RangingClass12transmitPollEP12DW1000Device+0x160>)
 8005b36:	2200      	movs	r2, #0
 8005b38:	725a      	strb	r2, [r3, #9]
		//we enter the number of devices
		data[SHORT_MAC_LEN+1] = _networkDevicesNumber;
 8005b3a:	4b42      	ldr	r3, [pc, #264]	; (8005c44 <_ZN18DW1000RangingClass12transmitPollEP12DW1000Device+0x154>)
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	b2da      	uxtb	r2, r3
 8005b40:	4b43      	ldr	r3, [pc, #268]	; (8005c50 <_ZN18DW1000RangingClass12transmitPollEP12DW1000Device+0x160>)
 8005b42:	729a      	strb	r2, [r3, #10]
		
		for(uint8_t i = 0; i < _networkDevicesNumber; i++) {
 8005b44:	2300      	movs	r3, #0
 8005b46:	73fb      	strb	r3, [r7, #15]
 8005b48:	4b3e      	ldr	r3, [pc, #248]	; (8005c44 <_ZN18DW1000RangingClass12transmitPollEP12DW1000Device+0x154>)
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	7bfa      	ldrb	r2, [r7, #15]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	bf34      	ite	cc
 8005b54:	2301      	movcc	r3, #1
 8005b56:	2300      	movcs	r3, #0
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d042      	beq.n	8005be4 <_ZN18DW1000RangingClass12transmitPollEP12DW1000Device+0xf4>
			//each devices have a different reply delay time.
			_networkDevices[i].setReplyTime((2*i+1)*DEFAULT_REPLY_DELAY_TIME);
 8005b5e:	7bfa      	ldrb	r2, [r7, #15]
 8005b60:	4613      	mov	r3, r2
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	4413      	add	r3, r2
 8005b66:	011b      	lsls	r3, r3, #4
 8005b68:	4a3b      	ldr	r2, [pc, #236]	; (8005c58 <_ZN18DW1000RangingClass12transmitPollEP12DW1000Device+0x168>)
 8005b6a:	441a      	add	r2, r3
 8005b6c:	7bfb      	ldrb	r3, [r7, #15]
 8005b6e:	005b      	lsls	r3, r3, #1
 8005b70:	3301      	adds	r3, #1
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	4619      	mov	r1, r3
 8005b76:	0149      	lsls	r1, r1, #5
 8005b78:	1ac9      	subs	r1, r1, r3
 8005b7a:	0089      	lsls	r1, r1, #2
 8005b7c:	440b      	add	r3, r1
 8005b7e:	4619      	mov	r1, r3
 8005b80:	00c9      	lsls	r1, r1, #3
 8005b82:	1acb      	subs	r3, r1, r3
 8005b84:	00db      	lsls	r3, r3, #3
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	4619      	mov	r1, r3
 8005b8a:	4610      	mov	r0, r2
 8005b8c:	f7fe fc6c 	bl	8004468 <_ZN12DW1000Device12setReplyTimeEt>
			//we write the short address of our device:
			memcpy(data+SHORT_MAC_LEN+2+4*i, _networkDevices[i].getByteShortAddress(), 2);
 8005b90:	7bfb      	ldrb	r3, [r7, #15]
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	330b      	adds	r3, #11
 8005b96:	4a2e      	ldr	r2, [pc, #184]	; (8005c50 <_ZN18DW1000RangingClass12transmitPollEP12DW1000Device+0x160>)
 8005b98:	189c      	adds	r4, r3, r2
 8005b9a:	7bfa      	ldrb	r2, [r7, #15]
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	4413      	add	r3, r2
 8005ba2:	011b      	lsls	r3, r3, #4
 8005ba4:	4a2c      	ldr	r2, [pc, #176]	; (8005c58 <_ZN18DW1000RangingClass12transmitPollEP12DW1000Device+0x168>)
 8005ba6:	4413      	add	r3, r2
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7fe fd1b 	bl	80045e4 <_ZN12DW1000Device19getByteShortAddressEv>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	881b      	ldrh	r3, [r3, #0]
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	8023      	strh	r3, [r4, #0]
			
			//we add the replyTime
			uint16_t replyTime = _networkDevices[i].getReplyTime();
 8005bb6:	7bfa      	ldrb	r2, [r7, #15]
 8005bb8:	4613      	mov	r3, r2
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	4413      	add	r3, r2
 8005bbe:	011b      	lsls	r3, r3, #4
 8005bc0:	4a25      	ldr	r2, [pc, #148]	; (8005c58 <_ZN18DW1000RangingClass12transmitPollEP12DW1000Device+0x168>)
 8005bc2:	4413      	add	r3, r2
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f7fe ff55 	bl	8004a74 <_ZN12DW1000Device12getReplyTimeEv>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	817b      	strh	r3, [r7, #10]
			memcpy(data+SHORT_MAC_LEN+2+2+4*i, &replyTime, 2);
 8005bce:	7bfb      	ldrb	r3, [r7, #15]
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	330d      	adds	r3, #13
 8005bd4:	4a1e      	ldr	r2, [pc, #120]	; (8005c50 <_ZN18DW1000RangingClass12transmitPollEP12DW1000Device+0x160>)
 8005bd6:	4413      	add	r3, r2
 8005bd8:	897a      	ldrh	r2, [r7, #10]
 8005bda:	801a      	strh	r2, [r3, #0]
		for(uint8_t i = 0; i < _networkDevicesNumber; i++) {
 8005bdc:	7bfb      	ldrb	r3, [r7, #15]
 8005bde:	3301      	adds	r3, #1
 8005be0:	73fb      	strb	r3, [r7, #15]
 8005be2:	e7b1      	b.n	8005b48 <_ZN18DW1000RangingClass12transmitPollEP12DW1000Device+0x58>
			
		}
		
		copyShortAddress(_lastSentToShortAddress, shortBroadcast);
 8005be4:	f107 030c 	add.w	r3, r7, #12
 8005be8:	4619      	mov	r1, r3
 8005bea:	481c      	ldr	r0, [pc, #112]	; (8005c5c <_ZN18DW1000RangingClass12transmitPollEP12DW1000Device+0x16c>)
 8005bec:	f7ff fef8 	bl	80059e0 <_ZN18DW1000RangingClass16copyShortAddressEPhS0_>
 8005bf0:	e021      	b.n	8005c36 <_ZN18DW1000RangingClass12transmitPollEP12DW1000Device+0x146>
	}
	else {
		//we redefine our default_timer_delay for just 1 device;
		_timerDelay = DEFAULT_TIMER_DELAY;
 8005bf2:	4b15      	ldr	r3, [pc, #84]	; (8005c48 <_ZN18DW1000RangingClass12transmitPollEP12DW1000Device+0x158>)
 8005bf4:	2250      	movs	r2, #80	; 0x50
 8005bf6:	801a      	strh	r2, [r3, #0]
		
		_globalMac.generateShortMACFrame(data, _currentShortAddress, myDistantDevice->getByteShortAddress());
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f7fe fcf3 	bl	80045e4 <_ZN12DW1000Device19getByteShortAddressEv>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	4a12      	ldr	r2, [pc, #72]	; (8005c4c <_ZN18DW1000RangingClass12transmitPollEP12DW1000Device+0x15c>)
 8005c02:	4913      	ldr	r1, [pc, #76]	; (8005c50 <_ZN18DW1000RangingClass12transmitPollEP12DW1000Device+0x160>)
 8005c04:	4813      	ldr	r0, [pc, #76]	; (8005c54 <_ZN18DW1000RangingClass12transmitPollEP12DW1000Device+0x164>)
 8005c06:	f7fe fdfe 	bl	8004806 <_ZN9DW1000Mac21generateShortMACFrameEPhS0_S0_>
		
		data[SHORT_MAC_LEN]   = POLL;
 8005c0a:	4b11      	ldr	r3, [pc, #68]	; (8005c50 <_ZN18DW1000RangingClass12transmitPollEP12DW1000Device+0x160>)
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	725a      	strb	r2, [r3, #9]
		data[SHORT_MAC_LEN+1] = 1;
 8005c10:	4b0f      	ldr	r3, [pc, #60]	; (8005c50 <_ZN18DW1000RangingClass12transmitPollEP12DW1000Device+0x160>)
 8005c12:	2201      	movs	r2, #1
 8005c14:	729a      	strb	r2, [r3, #10]
		uint16_t replyTime = myDistantDevice->getReplyTime();
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f7fe ff2c 	bl	8004a74 <_ZN12DW1000Device12getReplyTimeEv>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	813b      	strh	r3, [r7, #8]
		memcpy(data+SHORT_MAC_LEN+2, &replyTime, sizeof(uint16_t)); // todo is code correct?
 8005c20:	4a0f      	ldr	r2, [pc, #60]	; (8005c60 <_ZN18DW1000RangingClass12transmitPollEP12DW1000Device+0x170>)
 8005c22:	893b      	ldrh	r3, [r7, #8]
 8005c24:	8013      	strh	r3, [r2, #0]
		
		copyShortAddress(_lastSentToShortAddress, myDistantDevice->getByteShortAddress());
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f7fe fcdc 	bl	80045e4 <_ZN12DW1000Device19getByteShortAddressEv>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	4619      	mov	r1, r3
 8005c30:	480a      	ldr	r0, [pc, #40]	; (8005c5c <_ZN18DW1000RangingClass12transmitPollEP12DW1000Device+0x16c>)
 8005c32:	f7ff fed5 	bl	80059e0 <_ZN18DW1000RangingClass16copyShortAddressEPhS0_>
	}
	
	transmit(data);
 8005c36:	4806      	ldr	r0, [pc, #24]	; (8005c50 <_ZN18DW1000RangingClass12transmitPollEP12DW1000Device+0x160>)
 8005c38:	f7ff feee 	bl	8005a18 <_ZN18DW1000RangingClass8transmitEPh>
}
 8005c3c:	bf00      	nop
 8005c3e:	3714      	adds	r7, #20
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd90      	pop	{r4, r7, pc}
 8005c44:	2000040e 	.word	0x2000040e
 8005c48:	2000048e 	.word	0x2000048e
 8005c4c:	20000408 	.word	0x20000408
 8005c50:	20000428 	.word	0x20000428
 8005c54:	20000414 	.word	0x20000414
 8005c58:	200002c0 	.word	0x200002c0
 8005c5c:	2000040c 	.word	0x2000040c
 8005c60:	20000433 	.word	0x20000433

08005c64 <_ZN18DW1000RangingClass15transmitPollAckEP12DW1000Device>:


void DW1000RangingClass::transmitPollAck(DW1000Device* myDistantDevice) {
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b086      	sub	sp, #24
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
	transmitInit();
 8005c6c:	f7ff fecc 	bl	8005a08 <_ZN18DW1000RangingClass12transmitInitEv>
	_globalMac.generateShortMACFrame(data, _currentShortAddress, myDistantDevice->getByteShortAddress());
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f7fe fcb7 	bl	80045e4 <_ZN12DW1000Device19getByteShortAddressEv>
 8005c76:	4603      	mov	r3, r0
 8005c78:	4a1b      	ldr	r2, [pc, #108]	; (8005ce8 <_ZN18DW1000RangingClass15transmitPollAckEP12DW1000Device+0x84>)
 8005c7a:	491c      	ldr	r1, [pc, #112]	; (8005cec <_ZN18DW1000RangingClass15transmitPollAckEP12DW1000Device+0x88>)
 8005c7c:	481c      	ldr	r0, [pc, #112]	; (8005cf0 <_ZN18DW1000RangingClass15transmitPollAckEP12DW1000Device+0x8c>)
 8005c7e:	f7fe fdc2 	bl	8004806 <_ZN9DW1000Mac21generateShortMACFrameEPhS0_S0_>
	data[SHORT_MAC_LEN] = POLL_ACK;
 8005c82:	4b1a      	ldr	r3, [pc, #104]	; (8005cec <_ZN18DW1000RangingClass15transmitPollAckEP12DW1000Device+0x88>)
 8005c84:	2201      	movs	r2, #1
 8005c86:	725a      	strb	r2, [r3, #9]
	// delay the same amount as ranging tag
	DW1000Time deltaTime = DW1000Time(_replyDelayTimeUS, DW1000Time::MICROSECONDS);
 8005c88:	4b1a      	ldr	r3, [pc, #104]	; (8005cf4 <_ZN18DW1000RangingClass15transmitPollAckEP12DW1000Device+0x90>)
 8005c8a:	881b      	ldrh	r3, [r3, #0]
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	f107 0308 	add.w	r3, r7, #8
 8005c92:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005c96:	4611      	mov	r1, r2
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f000 fb87 	bl	80063ac <_ZN10DW1000TimeC1Elf>
	copyShortAddress(_lastSentToShortAddress, myDistantDevice->getByteShortAddress());
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f7fe fca0 	bl	80045e4 <_ZN12DW1000Device19getByteShortAddressEv>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	4813      	ldr	r0, [pc, #76]	; (8005cf8 <_ZN18DW1000RangingClass15transmitPollAckEP12DW1000Device+0x94>)
 8005caa:	f7ff fe99 	bl	80059e0 <_ZN18DW1000RangingClass16copyShortAddressEPhS0_>
	transmit(data, deltaTime);
 8005cae:	f107 0208 	add.w	r2, r7, #8
 8005cb2:	f107 0310 	add.w	r3, r7, #16
 8005cb6:	4611      	mov	r1, r2
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f000 fb62 	bl	8006382 <_ZN10DW1000TimeC1ERKS_>
 8005cbe:	f107 0310 	add.w	r3, r7, #16
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	4809      	ldr	r0, [pc, #36]	; (8005cec <_ZN18DW1000RangingClass15transmitPollAckEP12DW1000Device+0x88>)
 8005cc6:	f7ff feb5 	bl	8005a34 <_ZN18DW1000RangingClass8transmitEPh10DW1000Time>
 8005cca:	f107 0310 	add.w	r3, r7, #16
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f000 fb85 	bl	80063de <_ZN10DW1000TimeD1Ev>
	DW1000Time deltaTime = DW1000Time(_replyDelayTimeUS, DW1000Time::MICROSECONDS);
 8005cd4:	f107 0308 	add.w	r3, r7, #8
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f000 fb80 	bl	80063de <_ZN10DW1000TimeD1Ev>
}
 8005cde:	bf00      	nop
 8005ce0:	3718      	adds	r7, #24
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	20000408 	.word	0x20000408
 8005cec:	20000428 	.word	0x20000428
 8005cf0:	20000414 	.word	0x20000414
 8005cf4:	2000048c 	.word	0x2000048c
 8005cf8:	2000040c 	.word	0x2000040c

08005cfc <_ZN18DW1000RangingClass13transmitRangeEP12DW1000Device>:

void DW1000RangingClass::transmitRange(DW1000Device* myDistantDevice) {
 8005cfc:	b590      	push	{r4, r7, lr}
 8005cfe:	b08f      	sub	sp, #60	; 0x3c
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
	//transmit range need to accept broadcast for multiple anchor
	transmitInit();
 8005d04:	f7ff fe80 	bl	8005a08 <_ZN18DW1000RangingClass12transmitInitEv>
	
	
	if(myDistantDevice == nullptr) {
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	f040 80b9 	bne.w	8005e82 <_ZN18DW1000RangingClass13transmitRangeEP12DW1000Device+0x186>
		//we need to set our timerDelay:
		_timerDelay = DEFAULT_TIMER_DELAY+(uint16_t)(_networkDevicesNumber*3*DEFAULT_REPLY_DELAY_TIME/1000);
 8005d10:	4b86      	ldr	r3, [pc, #536]	; (8005f2c <_ZN18DW1000RangingClass13transmitRangeEP12DW1000Device+0x230>)
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	461a      	mov	r2, r3
 8005d1a:	0052      	lsls	r2, r2, #1
 8005d1c:	4413      	add	r3, r2
 8005d1e:	461a      	mov	r2, r3
 8005d20:	00d2      	lsls	r2, r2, #3
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	3350      	adds	r3, #80	; 0x50
 8005d28:	b29a      	uxth	r2, r3
 8005d2a:	4b81      	ldr	r3, [pc, #516]	; (8005f30 <_ZN18DW1000RangingClass13transmitRangeEP12DW1000Device+0x234>)
 8005d2c:	801a      	strh	r2, [r3, #0]
		
		byte shortBroadcast[2] = {0xFF, 0xFF};
 8005d2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d32:	84bb      	strh	r3, [r7, #36]	; 0x24
		_globalMac.generateShortMACFrame(data, _currentShortAddress, shortBroadcast);
 8005d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d38:	4a7e      	ldr	r2, [pc, #504]	; (8005f34 <_ZN18DW1000RangingClass13transmitRangeEP12DW1000Device+0x238>)
 8005d3a:	497f      	ldr	r1, [pc, #508]	; (8005f38 <_ZN18DW1000RangingClass13transmitRangeEP12DW1000Device+0x23c>)
 8005d3c:	487f      	ldr	r0, [pc, #508]	; (8005f3c <_ZN18DW1000RangingClass13transmitRangeEP12DW1000Device+0x240>)
 8005d3e:	f7fe fd62 	bl	8004806 <_ZN9DW1000Mac21generateShortMACFrameEPhS0_S0_>
		data[SHORT_MAC_LEN]   = RANGE;
 8005d42:	4b7d      	ldr	r3, [pc, #500]	; (8005f38 <_ZN18DW1000RangingClass13transmitRangeEP12DW1000Device+0x23c>)
 8005d44:	2202      	movs	r2, #2
 8005d46:	725a      	strb	r2, [r3, #9]
		//we enter the number of devices
		data[SHORT_MAC_LEN+1] = _networkDevicesNumber;
 8005d48:	4b78      	ldr	r3, [pc, #480]	; (8005f2c <_ZN18DW1000RangingClass13transmitRangeEP12DW1000Device+0x230>)
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	b2da      	uxtb	r2, r3
 8005d4e:	4b7a      	ldr	r3, [pc, #488]	; (8005f38 <_ZN18DW1000RangingClass13transmitRangeEP12DW1000Device+0x23c>)
 8005d50:	729a      	strb	r2, [r3, #10]
		
		// delay sending the message and remember expected future sent timestamp
		DW1000Time deltaTime     = DW1000Time(DEFAULT_REPLY_DELAY_TIME, DW1000Time::MICROSECONDS);
 8005d52:	f107 0318 	add.w	r3, r7, #24
 8005d56:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005d5a:	f641 3158 	movw	r1, #7000	; 0x1b58
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f000 fb24 	bl	80063ac <_ZN10DW1000TimeC1Elf>
		DW1000Time timeRangeSent = DW1000.setDelay(deltaTime);
 8005d64:	f107 0310 	add.w	r3, r7, #16
 8005d68:	f107 0218 	add.w	r2, r7, #24
 8005d6c:	4611      	mov	r1, r2
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7fd f9c6 	bl	8003100 <_ZN11DW1000Class8setDelayERK10DW1000Time>
		
		for(uint8_t i = 0; i < _networkDevicesNumber; i++) {
 8005d74:	2300      	movs	r3, #0
 8005d76:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005d7a:	4b6c      	ldr	r3, [pc, #432]	; (8005f2c <_ZN18DW1000RangingClass13transmitRangeEP12DW1000Device+0x230>)
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8005d84:	429a      	cmp	r2, r3
 8005d86:	bf34      	ite	cc
 8005d88:	2301      	movcc	r3, #1
 8005d8a:	2300      	movcs	r3, #0
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d066      	beq.n	8005e60 <_ZN18DW1000RangingClass13transmitRangeEP12DW1000Device+0x164>
			//we write the short address of our device:
			memcpy(data+SHORT_MAC_LEN+2+17*i, _networkDevices[i].getByteShortAddress(), 2);
 8005d92:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8005d96:	4613      	mov	r3, r2
 8005d98:	011b      	lsls	r3, r3, #4
 8005d9a:	4413      	add	r3, r2
 8005d9c:	330b      	adds	r3, #11
 8005d9e:	4a66      	ldr	r2, [pc, #408]	; (8005f38 <_ZN18DW1000RangingClass13transmitRangeEP12DW1000Device+0x23c>)
 8005da0:	189c      	adds	r4, r3, r2
 8005da2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8005da6:	4613      	mov	r3, r2
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	4413      	add	r3, r2
 8005dac:	011b      	lsls	r3, r3, #4
 8005dae:	4a64      	ldr	r2, [pc, #400]	; (8005f40 <_ZN18DW1000RangingClass13transmitRangeEP12DW1000Device+0x244>)
 8005db0:	4413      	add	r3, r2
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7fe fc16 	bl	80045e4 <_ZN12DW1000Device19getByteShortAddressEv>
 8005db8:	4603      	mov	r3, r0
 8005dba:	881b      	ldrh	r3, [r3, #0]
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	8023      	strh	r3, [r4, #0]
			
			
			//we get the device which correspond to the message which was sent (need to be filtered by MAC address)
			_networkDevices[i].timeRangeSent = timeRangeSent;
 8005dc0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	4413      	add	r3, r2
 8005dca:	011b      	lsls	r3, r3, #4
 8005dcc:	3320      	adds	r3, #32
 8005dce:	4a5c      	ldr	r2, [pc, #368]	; (8005f40 <_ZN18DW1000RangingClass13transmitRangeEP12DW1000Device+0x244>)
 8005dd0:	4413      	add	r3, r2
 8005dd2:	f107 0210 	add.w	r2, r7, #16
 8005dd6:	4611      	mov	r1, r2
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f000 fc28 	bl	800662e <_ZN10DW1000TimeaSERKS_>
			_networkDevices[i].timePollSent.getTimestamp(data+SHORT_MAC_LEN+4+17*i);
 8005dde:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8005de2:	4613      	mov	r3, r2
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	4413      	add	r3, r2
 8005de8:	011b      	lsls	r3, r3, #4
 8005dea:	4a55      	ldr	r2, [pc, #340]	; (8005f40 <_ZN18DW1000RangingClass13transmitRangeEP12DW1000Device+0x244>)
 8005dec:	1898      	adds	r0, r3, r2
 8005dee:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8005df2:	4613      	mov	r3, r2
 8005df4:	011b      	lsls	r3, r3, #4
 8005df6:	4413      	add	r3, r2
 8005df8:	330d      	adds	r3, #13
 8005dfa:	4a4f      	ldr	r2, [pc, #316]	; (8005f38 <_ZN18DW1000RangingClass13transmitRangeEP12DW1000Device+0x23c>)
 8005dfc:	4413      	add	r3, r2
 8005dfe:	4619      	mov	r1, r3
 8005e00:	f000 fb9b 	bl	800653a <_ZNK10DW1000Time12getTimestampEPh>
			_networkDevices[i].timePollAckReceived.getTimestamp(data+SHORT_MAC_LEN+9+17*i);
 8005e04:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8005e08:	4613      	mov	r3, r2
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	4413      	add	r3, r2
 8005e0e:	011b      	lsls	r3, r3, #4
 8005e10:	3318      	adds	r3, #24
 8005e12:	4a4b      	ldr	r2, [pc, #300]	; (8005f40 <_ZN18DW1000RangingClass13transmitRangeEP12DW1000Device+0x244>)
 8005e14:	1898      	adds	r0, r3, r2
 8005e16:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	011b      	lsls	r3, r3, #4
 8005e1e:	4413      	add	r3, r2
 8005e20:	3312      	adds	r3, #18
 8005e22:	4a45      	ldr	r2, [pc, #276]	; (8005f38 <_ZN18DW1000RangingClass13transmitRangeEP12DW1000Device+0x23c>)
 8005e24:	4413      	add	r3, r2
 8005e26:	4619      	mov	r1, r3
 8005e28:	f000 fb87 	bl	800653a <_ZNK10DW1000Time12getTimestampEPh>
			_networkDevices[i].timeRangeSent.getTimestamp(data+SHORT_MAC_LEN+14+17*i);
 8005e2c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8005e30:	4613      	mov	r3, r2
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	4413      	add	r3, r2
 8005e36:	011b      	lsls	r3, r3, #4
 8005e38:	3320      	adds	r3, #32
 8005e3a:	4a41      	ldr	r2, [pc, #260]	; (8005f40 <_ZN18DW1000RangingClass13transmitRangeEP12DW1000Device+0x244>)
 8005e3c:	1898      	adds	r0, r3, r2
 8005e3e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8005e42:	4613      	mov	r3, r2
 8005e44:	011b      	lsls	r3, r3, #4
 8005e46:	4413      	add	r3, r2
 8005e48:	3317      	adds	r3, #23
 8005e4a:	4a3b      	ldr	r2, [pc, #236]	; (8005f38 <_ZN18DW1000RangingClass13transmitRangeEP12DW1000Device+0x23c>)
 8005e4c:	4413      	add	r3, r2
 8005e4e:	4619      	mov	r1, r3
 8005e50:	f000 fb73 	bl	800653a <_ZNK10DW1000Time12getTimestampEPh>
		for(uint8_t i = 0; i < _networkDevicesNumber; i++) {
 8005e54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e58:	3301      	adds	r3, #1
 8005e5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005e5e:	e78c      	b.n	8005d7a <_ZN18DW1000RangingClass13transmitRangeEP12DW1000Device+0x7e>
			
		}
		
		copyShortAddress(_lastSentToShortAddress, shortBroadcast);
 8005e60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e64:	4619      	mov	r1, r3
 8005e66:	4837      	ldr	r0, [pc, #220]	; (8005f44 <_ZN18DW1000RangingClass13transmitRangeEP12DW1000Device+0x248>)
 8005e68:	f7ff fdba 	bl	80059e0 <_ZN18DW1000RangingClass16copyShortAddressEPhS0_>
		DW1000Time timeRangeSent = DW1000.setDelay(deltaTime);
 8005e6c:	f107 0310 	add.w	r3, r7, #16
 8005e70:	4618      	mov	r0, r3
 8005e72:	f000 fab4 	bl	80063de <_ZN10DW1000TimeD1Ev>
		DW1000Time deltaTime     = DW1000Time(DEFAULT_REPLY_DELAY_TIME, DW1000Time::MICROSECONDS);
 8005e76:	f107 0318 	add.w	r3, r7, #24
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f000 faaf 	bl	80063de <_ZN10DW1000TimeD1Ev>
 8005e80:	e04d      	b.n	8005f1e <_ZN18DW1000RangingClass13transmitRangeEP12DW1000Device+0x222>
		
	}
	else {
		_globalMac.generateShortMACFrame(data, _currentShortAddress, myDistantDevice->getByteShortAddress());
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f7fe fbae 	bl	80045e4 <_ZN12DW1000Device19getByteShortAddressEv>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	4a2a      	ldr	r2, [pc, #168]	; (8005f34 <_ZN18DW1000RangingClass13transmitRangeEP12DW1000Device+0x238>)
 8005e8c:	492a      	ldr	r1, [pc, #168]	; (8005f38 <_ZN18DW1000RangingClass13transmitRangeEP12DW1000Device+0x23c>)
 8005e8e:	482b      	ldr	r0, [pc, #172]	; (8005f3c <_ZN18DW1000RangingClass13transmitRangeEP12DW1000Device+0x240>)
 8005e90:	f7fe fcb9 	bl	8004806 <_ZN9DW1000Mac21generateShortMACFrameEPhS0_S0_>
		data[SHORT_MAC_LEN] = RANGE;
 8005e94:	4b28      	ldr	r3, [pc, #160]	; (8005f38 <_ZN18DW1000RangingClass13transmitRangeEP12DW1000Device+0x23c>)
 8005e96:	2202      	movs	r2, #2
 8005e98:	725a      	strb	r2, [r3, #9]
		// delay sending the message and remember expected future sent timestamp
		DW1000Time deltaTime = DW1000Time(_replyDelayTimeUS, DW1000Time::MICROSECONDS);
 8005e9a:	4b2b      	ldr	r3, [pc, #172]	; (8005f48 <_ZN18DW1000RangingClass13transmitRangeEP12DW1000Device+0x24c>)
 8005e9c:	881b      	ldrh	r3, [r3, #0]
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	f107 0308 	add.w	r3, r7, #8
 8005ea4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005ea8:	4611      	mov	r1, r2
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f000 fa7e 	bl	80063ac <_ZN10DW1000TimeC1Elf>
		//we get the device which correspond to the message which was sent (need to be filtered by MAC address)
		myDistantDevice->timeRangeSent = DW1000.setDelay(deltaTime);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f103 0420 	add.w	r4, r3, #32
 8005eb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005eba:	f107 0208 	add.w	r2, r7, #8
 8005ebe:	4611      	mov	r1, r2
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f7fd f91d 	bl	8003100 <_ZN11DW1000Class8setDelayERK10DW1000Time>
 8005ec6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005eca:	4619      	mov	r1, r3
 8005ecc:	4620      	mov	r0, r4
 8005ece:	f000 fbae 	bl	800662e <_ZN10DW1000TimeaSERKS_>
 8005ed2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f000 fa81 	bl	80063de <_ZN10DW1000TimeD1Ev>
		myDistantDevice->timePollSent.getTimestamp(data+1+SHORT_MAC_LEN);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a1b      	ldr	r2, [pc, #108]	; (8005f4c <_ZN18DW1000RangingClass13transmitRangeEP12DW1000Device+0x250>)
 8005ee0:	4611      	mov	r1, r2
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f000 fb29 	bl	800653a <_ZNK10DW1000Time12getTimestampEPh>
		myDistantDevice->timePollAckReceived.getTimestamp(data+6+SHORT_MAC_LEN);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	3318      	adds	r3, #24
 8005eec:	4a18      	ldr	r2, [pc, #96]	; (8005f50 <_ZN18DW1000RangingClass13transmitRangeEP12DW1000Device+0x254>)
 8005eee:	4611      	mov	r1, r2
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f000 fb22 	bl	800653a <_ZNK10DW1000Time12getTimestampEPh>
		myDistantDevice->timeRangeSent.getTimestamp(data+11+SHORT_MAC_LEN);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	3320      	adds	r3, #32
 8005efa:	4a16      	ldr	r2, [pc, #88]	; (8005f54 <_ZN18DW1000RangingClass13transmitRangeEP12DW1000Device+0x258>)
 8005efc:	4611      	mov	r1, r2
 8005efe:	4618      	mov	r0, r3
 8005f00:	f000 fb1b 	bl	800653a <_ZNK10DW1000Time12getTimestampEPh>
		copyShortAddress(_lastSentToShortAddress, myDistantDevice->getByteShortAddress());
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f7fe fb6d 	bl	80045e4 <_ZN12DW1000Device19getByteShortAddressEv>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	480d      	ldr	r0, [pc, #52]	; (8005f44 <_ZN18DW1000RangingClass13transmitRangeEP12DW1000Device+0x248>)
 8005f10:	f7ff fd66 	bl	80059e0 <_ZN18DW1000RangingClass16copyShortAddressEPhS0_>
		DW1000Time deltaTime = DW1000Time(_replyDelayTimeUS, DW1000Time::MICROSECONDS);
 8005f14:	f107 0308 	add.w	r3, r7, #8
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f000 fa60 	bl	80063de <_ZN10DW1000TimeD1Ev>
	}
	transmit(data);
 8005f1e:	4806      	ldr	r0, [pc, #24]	; (8005f38 <_ZN18DW1000RangingClass13transmitRangeEP12DW1000Device+0x23c>)
 8005f20:	f7ff fd7a 	bl	8005a18 <_ZN18DW1000RangingClass8transmitEPh>
}
 8005f24:	bf00      	nop
 8005f26:	373c      	adds	r7, #60	; 0x3c
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd90      	pop	{r4, r7, pc}
 8005f2c:	2000040e 	.word	0x2000040e
 8005f30:	2000048e 	.word	0x2000048e
 8005f34:	20000408 	.word	0x20000408
 8005f38:	20000428 	.word	0x20000428
 8005f3c:	20000414 	.word	0x20000414
 8005f40:	200002c0 	.word	0x200002c0
 8005f44:	2000040c 	.word	0x2000040c
 8005f48:	2000048c 	.word	0x2000048c
 8005f4c:	20000432 	.word	0x20000432
 8005f50:	20000437 	.word	0x20000437
 8005f54:	2000043c 	.word	0x2000043c

08005f58 <_ZN18DW1000RangingClass19transmitRangeReportEP12DW1000Device>:


void DW1000RangingClass::transmitRangeReport(DW1000Device* myDistantDevice) {
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b086      	sub	sp, #24
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
	transmitInit();
 8005f60:	f7ff fd52 	bl	8005a08 <_ZN18DW1000RangingClass12transmitInitEv>
	_globalMac.generateShortMACFrame(data, _currentShortAddress, myDistantDevice->getByteShortAddress());
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f7fe fb3d 	bl	80045e4 <_ZN12DW1000Device19getByteShortAddressEv>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	4a1e      	ldr	r2, [pc, #120]	; (8005fe8 <_ZN18DW1000RangingClass19transmitRangeReportEP12DW1000Device+0x90>)
 8005f6e:	491f      	ldr	r1, [pc, #124]	; (8005fec <_ZN18DW1000RangingClass19transmitRangeReportEP12DW1000Device+0x94>)
 8005f70:	481f      	ldr	r0, [pc, #124]	; (8005ff0 <_ZN18DW1000RangingClass19transmitRangeReportEP12DW1000Device+0x98>)
 8005f72:	f7fe fc48 	bl	8004806 <_ZN9DW1000Mac21generateShortMACFrameEPhS0_S0_>
	data[SHORT_MAC_LEN] = RANGE_REPORT;
 8005f76:	4b1d      	ldr	r3, [pc, #116]	; (8005fec <_ZN18DW1000RangingClass19transmitRangeReportEP12DW1000Device+0x94>)
 8005f78:	2203      	movs	r2, #3
 8005f7a:	725a      	strb	r2, [r3, #9]
	// write final ranging result
	float curRange   = myDistantDevice->getRange();
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f7fe fb75 	bl	800466c <_ZN12DW1000Device8getRangeEv>
 8005f82:	eef0 7a40 	vmov.f32	s15, s0
 8005f86:	edc7 7a03 	vstr	s15, [r7, #12]
	float curRXPower = myDistantDevice->getRXPower();
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f7fe fb88 	bl	80046a0 <_ZN12DW1000Device10getRXPowerEv>
 8005f90:	eef0 7a40 	vmov.f32	s15, s0
 8005f94:	edc7 7a02 	vstr	s15, [r7, #8]
	//We add the Range and then the RXPower
	memcpy(data+1+SHORT_MAC_LEN, &curRange, 4);
 8005f98:	4a16      	ldr	r2, [pc, #88]	; (8005ff4 <_ZN18DW1000RangingClass19transmitRangeReportEP12DW1000Device+0x9c>)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6013      	str	r3, [r2, #0]
	memcpy(data+5+SHORT_MAC_LEN, &curRXPower, 4);
 8005f9e:	4a16      	ldr	r2, [pc, #88]	; (8005ff8 <_ZN18DW1000RangingClass19transmitRangeReportEP12DW1000Device+0xa0>)
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	6013      	str	r3, [r2, #0]
	copyShortAddress(_lastSentToShortAddress, myDistantDevice->getByteShortAddress());
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f7fe fb1d 	bl	80045e4 <_ZN12DW1000Device19getByteShortAddressEv>
 8005faa:	4603      	mov	r3, r0
 8005fac:	4619      	mov	r1, r3
 8005fae:	4813      	ldr	r0, [pc, #76]	; (8005ffc <_ZN18DW1000RangingClass19transmitRangeReportEP12DW1000Device+0xa4>)
 8005fb0:	f7ff fd16 	bl	80059e0 <_ZN18DW1000RangingClass16copyShortAddressEPhS0_>
	transmit(data, DW1000Time(_replyDelayTimeUS, DW1000Time::MICROSECONDS));
 8005fb4:	4b12      	ldr	r3, [pc, #72]	; (8006000 <_ZN18DW1000RangingClass19transmitRangeReportEP12DW1000Device+0xa8>)
 8005fb6:	881b      	ldrh	r3, [r3, #0]
 8005fb8:	461a      	mov	r2, r3
 8005fba:	f107 0310 	add.w	r3, r7, #16
 8005fbe:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005fc2:	4611      	mov	r1, r2
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f000 f9f1 	bl	80063ac <_ZN10DW1000TimeC1Elf>
 8005fca:	f107 0310 	add.w	r3, r7, #16
 8005fce:	4619      	mov	r1, r3
 8005fd0:	4806      	ldr	r0, [pc, #24]	; (8005fec <_ZN18DW1000RangingClass19transmitRangeReportEP12DW1000Device+0x94>)
 8005fd2:	f7ff fd2f 	bl	8005a34 <_ZN18DW1000RangingClass8transmitEPh10DW1000Time>
 8005fd6:	f107 0310 	add.w	r3, r7, #16
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f000 f9ff 	bl	80063de <_ZN10DW1000TimeD1Ev>
}
 8005fe0:	bf00      	nop
 8005fe2:	3718      	adds	r7, #24
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	20000408 	.word	0x20000408
 8005fec:	20000428 	.word	0x20000428
 8005ff0:	20000414 	.word	0x20000414
 8005ff4:	20000432 	.word	0x20000432
 8005ff8:	20000436 	.word	0x20000436
 8005ffc:	2000040c 	.word	0x2000040c
 8006000:	2000048c 	.word	0x2000048c

08006004 <_ZN18DW1000RangingClass19transmitRangeFailedEP12DW1000Device>:

void DW1000RangingClass::transmitRangeFailed(DW1000Device* myDistantDevice) {
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
	transmitInit();
 800600c:	f7ff fcfc 	bl	8005a08 <_ZN18DW1000RangingClass12transmitInitEv>
	_globalMac.generateShortMACFrame(data, _currentShortAddress, myDistantDevice->getByteShortAddress());
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f7fe fae7 	bl	80045e4 <_ZN12DW1000Device19getByteShortAddressEv>
 8006016:	4603      	mov	r3, r0
 8006018:	4a0b      	ldr	r2, [pc, #44]	; (8006048 <_ZN18DW1000RangingClass19transmitRangeFailedEP12DW1000Device+0x44>)
 800601a:	490c      	ldr	r1, [pc, #48]	; (800604c <_ZN18DW1000RangingClass19transmitRangeFailedEP12DW1000Device+0x48>)
 800601c:	480c      	ldr	r0, [pc, #48]	; (8006050 <_ZN18DW1000RangingClass19transmitRangeFailedEP12DW1000Device+0x4c>)
 800601e:	f7fe fbf2 	bl	8004806 <_ZN9DW1000Mac21generateShortMACFrameEPhS0_S0_>
	data[SHORT_MAC_LEN] = RANGE_FAILED;
 8006022:	4b0a      	ldr	r3, [pc, #40]	; (800604c <_ZN18DW1000RangingClass19transmitRangeFailedEP12DW1000Device+0x48>)
 8006024:	22ff      	movs	r2, #255	; 0xff
 8006026:	725a      	strb	r2, [r3, #9]
	
	copyShortAddress(_lastSentToShortAddress, myDistantDevice->getByteShortAddress());
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f7fe fadb 	bl	80045e4 <_ZN12DW1000Device19getByteShortAddressEv>
 800602e:	4603      	mov	r3, r0
 8006030:	4619      	mov	r1, r3
 8006032:	4808      	ldr	r0, [pc, #32]	; (8006054 <_ZN18DW1000RangingClass19transmitRangeFailedEP12DW1000Device+0x50>)
 8006034:	f7ff fcd4 	bl	80059e0 <_ZN18DW1000RangingClass16copyShortAddressEPhS0_>
	transmit(data);
 8006038:	4804      	ldr	r0, [pc, #16]	; (800604c <_ZN18DW1000RangingClass19transmitRangeFailedEP12DW1000Device+0x48>)
 800603a:	f7ff fced 	bl	8005a18 <_ZN18DW1000RangingClass8transmitEPh>
}
 800603e:	bf00      	nop
 8006040:	3708      	adds	r7, #8
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	20000408 	.word	0x20000408
 800604c:	20000428 	.word	0x20000428
 8006050:	20000414 	.word	0x20000414
 8006054:	2000040c 	.word	0x2000040c

08006058 <_ZN18DW1000RangingClass8receiverEv>:

void DW1000RangingClass::receiver() {
 8006058:	b580      	push	{r7, lr}
 800605a:	af00      	add	r7, sp, #0
	DW1000.newReceive();
 800605c:	f7fc ff52 	bl	8002f04 <_ZN11DW1000Class10newReceiveEv>
	DW1000.setDefaults();
 8006060:	f7fd fc92 	bl	8003988 <_ZN11DW1000Class11setDefaultsEv>
	// so we don't need to restart the receiver manually
	DW1000.receivePermanently(true);
 8006064:	2001      	movs	r0, #1
 8006066:	f7fd f8b3 	bl	80031d0 <_ZN11DW1000Class18receivePermanentlyEb>
	DW1000.startReceive();
 800606a:	f7fc ff5f 	bl	8002f2c <_ZN11DW1000Class12startReceiveEv>
}
 800606e:	bf00      	nop
 8006070:	bd80      	pop	{r7, pc}

08006072 <_ZN18DW1000RangingClass22computeRangeAsymmetricEP12DW1000DeviceP10DW1000Time>:
/* ###########################################################################
 * #### Methods for range computation and corrections  #######################
 * ######################################################################### */


void DW1000RangingClass::computeRangeAsymmetric(DW1000Device* myDistantDevice, DW1000Time* myTOF) {
 8006072:	b580      	push	{r7, lr}
 8006074:	b0a0      	sub	sp, #128	; 0x80
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
 800607a:	6039      	str	r1, [r7, #0]
	// asymmetric two-way ranging (more computation intense, less error prone)
	DW1000Time round1 = (myDistantDevice->timePollAckReceived-myDistantDevice->timePollSent).wrap();
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f103 0118 	add.w	r1, r3, #24
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006088:	4618      	mov	r0, r3
 800608a:	f000 fb35 	bl	80066f8 <_ZNK10DW1000TimemiERKS_>
 800608e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006092:	4618      	mov	r0, r3
 8006094:	f000 fab2 	bl	80065fc <_ZN10DW1000Time4wrapEv>
 8006098:	4602      	mov	r2, r0
 800609a:	f107 0320 	add.w	r3, r7, #32
 800609e:	4611      	mov	r1, r2
 80060a0:	4618      	mov	r0, r3
 80060a2:	f000 f96e 	bl	8006382 <_ZN10DW1000TimeC1ERKS_>
 80060a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80060aa:	4618      	mov	r0, r3
 80060ac:	f000 f997 	bl	80063de <_ZN10DW1000TimeD1Ev>
	DW1000Time reply1 = (myDistantDevice->timePollAckSent-myDistantDevice->timePollReceived).wrap();
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f103 0110 	add.w	r1, r3, #16
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f103 0208 	add.w	r2, r3, #8
 80060bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80060c0:	4618      	mov	r0, r3
 80060c2:	f000 fb19 	bl	80066f8 <_ZNK10DW1000TimemiERKS_>
 80060c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80060ca:	4618      	mov	r0, r3
 80060cc:	f000 fa96 	bl	80065fc <_ZN10DW1000Time4wrapEv>
 80060d0:	4602      	mov	r2, r0
 80060d2:	f107 0318 	add.w	r3, r7, #24
 80060d6:	4611      	mov	r1, r2
 80060d8:	4618      	mov	r0, r3
 80060da:	f000 f952 	bl	8006382 <_ZN10DW1000TimeC1ERKS_>
 80060de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80060e2:	4618      	mov	r0, r3
 80060e4:	f000 f97b 	bl	80063de <_ZN10DW1000TimeD1Ev>
	DW1000Time round2 = (myDistantDevice->timeRangeReceived-myDistantDevice->timePollAckSent).wrap();
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f103 0210 	add.w	r2, r3, #16
 80060f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80060f8:	4618      	mov	r0, r3
 80060fa:	f000 fafd 	bl	80066f8 <_ZNK10DW1000TimemiERKS_>
 80060fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006102:	4618      	mov	r0, r3
 8006104:	f000 fa7a 	bl	80065fc <_ZN10DW1000Time4wrapEv>
 8006108:	4602      	mov	r2, r0
 800610a:	f107 0310 	add.w	r3, r7, #16
 800610e:	4611      	mov	r1, r2
 8006110:	4618      	mov	r0, r3
 8006112:	f000 f936 	bl	8006382 <_ZN10DW1000TimeC1ERKS_>
 8006116:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800611a:	4618      	mov	r0, r3
 800611c:	f000 f95f 	bl	80063de <_ZN10DW1000TimeD1Ev>
	DW1000Time reply2 = (myDistantDevice->timeRangeSent-myDistantDevice->timePollAckReceived).wrap();
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f103 0120 	add.w	r1, r3, #32
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f103 0218 	add.w	r2, r3, #24
 800612c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006130:	4618      	mov	r0, r3
 8006132:	f000 fae1 	bl	80066f8 <_ZNK10DW1000TimemiERKS_>
 8006136:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800613a:	4618      	mov	r0, r3
 800613c:	f000 fa5e 	bl	80065fc <_ZN10DW1000Time4wrapEv>
 8006140:	4602      	mov	r2, r0
 8006142:	f107 0308 	add.w	r3, r7, #8
 8006146:	4611      	mov	r1, r2
 8006148:	4618      	mov	r0, r3
 800614a:	f000 f91a 	bl	8006382 <_ZN10DW1000TimeC1ERKS_>
 800614e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006152:	4618      	mov	r0, r3
 8006154:	f000 f943 	bl	80063de <_ZN10DW1000TimeD1Ev>
	
	myTOF->setTimestamp((round1*round2-reply1*reply2)/(round1+round2+reply1+reply2));
 8006158:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800615c:	f107 0210 	add.w	r2, r7, #16
 8006160:	f107 0120 	add.w	r1, r7, #32
 8006164:	4618      	mov	r0, r3
 8006166:	f000 fb04 	bl	8006772 <_ZNK10DW1000TimemlERKS_>
 800616a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800616e:	f107 0208 	add.w	r2, r7, #8
 8006172:	f107 0118 	add.w	r1, r7, #24
 8006176:	4618      	mov	r0, r3
 8006178:	f000 fafb 	bl	8006772 <_ZNK10DW1000TimemlERKS_>
 800617c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006180:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006184:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006188:	4618      	mov	r0, r3
 800618a:	f000 fab5 	bl	80066f8 <_ZNK10DW1000TimemiERKS_>
 800618e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006192:	f107 0210 	add.w	r2, r7, #16
 8006196:	f107 0120 	add.w	r1, r7, #32
 800619a:	4618      	mov	r0, r3
 800619c:	f000 fa75 	bl	800668a <_ZNK10DW1000TimeplERKS_>
 80061a0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80061a4:	f107 0218 	add.w	r2, r7, #24
 80061a8:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80061ac:	4618      	mov	r0, r3
 80061ae:	f000 fa6c 	bl	800668a <_ZNK10DW1000TimeplERKS_>
 80061b2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80061b6:	f107 0208 	add.w	r2, r7, #8
 80061ba:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80061be:	4618      	mov	r0, r3
 80061c0:	f000 fa63 	bl	800668a <_ZNK10DW1000TimeplERKS_>
 80061c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80061c8:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80061cc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80061d0:	4618      	mov	r0, r3
 80061d2:	f000 fb08 	bl	80067e6 <_ZNK10DW1000TimedvERKS_>
 80061d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80061da:	4619      	mov	r1, r3
 80061dc:	6838      	ldr	r0, [r7, #0]
 80061de:	f000 f958 	bl	8006492 <_ZN10DW1000Time12setTimestampERKS_>
 80061e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80061e6:	4618      	mov	r0, r3
 80061e8:	f000 f8f9 	bl	80063de <_ZN10DW1000TimeD1Ev>
 80061ec:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80061f0:	4618      	mov	r0, r3
 80061f2:	f000 f8f4 	bl	80063de <_ZN10DW1000TimeD1Ev>
 80061f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80061fa:	4618      	mov	r0, r3
 80061fc:	f000 f8ef 	bl	80063de <_ZN10DW1000TimeD1Ev>
 8006200:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006204:	4618      	mov	r0, r3
 8006206:	f000 f8ea 	bl	80063de <_ZN10DW1000TimeD1Ev>
 800620a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800620e:	4618      	mov	r0, r3
 8006210:	f000 f8e5 	bl	80063de <_ZN10DW1000TimeD1Ev>
 8006214:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006218:	4618      	mov	r0, r3
 800621a:	f000 f8e0 	bl	80063de <_ZN10DW1000TimeD1Ev>
 800621e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006222:	4618      	mov	r0, r3
 8006224:	f000 f8db 	bl	80063de <_ZN10DW1000TimeD1Ev>
	DW1000Time reply2 = (myDistantDevice->timeRangeSent-myDistantDevice->timePollAckReceived).wrap();
 8006228:	f107 0308 	add.w	r3, r7, #8
 800622c:	4618      	mov	r0, r3
 800622e:	f000 f8d6 	bl	80063de <_ZN10DW1000TimeD1Ev>
	DW1000Time round2 = (myDistantDevice->timeRangeReceived-myDistantDevice->timePollAckSent).wrap();
 8006232:	f107 0310 	add.w	r3, r7, #16
 8006236:	4618      	mov	r0, r3
 8006238:	f000 f8d1 	bl	80063de <_ZN10DW1000TimeD1Ev>
	DW1000Time reply1 = (myDistantDevice->timePollAckSent-myDistantDevice->timePollReceived).wrap();
 800623c:	f107 0318 	add.w	r3, r7, #24
 8006240:	4618      	mov	r0, r3
 8006242:	f000 f8cc 	bl	80063de <_ZN10DW1000TimeD1Ev>
	DW1000Time round1 = (myDistantDevice->timePollAckReceived-myDistantDevice->timePollSent).wrap();
 8006246:	f107 0320 	add.w	r3, r7, #32
 800624a:	4618      	mov	r0, r3
 800624c:	f000 f8c7 	bl	80063de <_ZN10DW1000TimeD1Ev>
	
	Serial.print("timeRangeSent ");myDistantDevice->timeRangeSent.print();
	Serial.print("timePollAckReceived ");myDistantDevice->timePollAckReceived.print();
	Serial.print("reply2 "); Serial.println((long)reply2.getTimestamp());
	 */
}
 8006250:	bf00      	nop
 8006252:	3780      	adds	r7, #128	; 0x80
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <_ZN18DW1000RangingClass11filterValueEfft>:

/* ###########################################################################
 * #### Utils  ###############################################################
 * ######################################################################### */

float DW1000RangingClass::filterValue(float value, float previousValue, uint16_t numberOfElements) {
 8006258:	b480      	push	{r7}
 800625a:	b087      	sub	sp, #28
 800625c:	af00      	add	r7, sp, #0
 800625e:	ed87 0a03 	vstr	s0, [r7, #12]
 8006262:	edc7 0a02 	vstr	s1, [r7, #8]
 8006266:	4603      	mov	r3, r0
 8006268:	80fb      	strh	r3, [r7, #6]
	
	float k = 2.0f / ((float)numberOfElements + 1.0f);
 800626a:	88fb      	ldrh	r3, [r7, #6]
 800626c:	ee07 3a90 	vmov	s15, r3
 8006270:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006274:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006278:	ee37 7a87 	vadd.f32	s14, s15, s14
 800627c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006280:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006284:	edc7 7a05 	vstr	s15, [r7, #20]
	return (value * k) + previousValue * (1.0f - k);
 8006288:	ed97 7a03 	vldr	s14, [r7, #12]
 800628c:	edd7 7a05 	vldr	s15, [r7, #20]
 8006290:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006294:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006298:	edd7 7a05 	vldr	s15, [r7, #20]
 800629c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80062a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80062a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062a8:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80062ac:	eeb0 0a67 	vmov.f32	s0, s15
 80062b0:	371c      	adds	r7, #28
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
	...

080062bc <_Z41__static_initialization_and_destruction_0ii>:
 80062bc:	b5b0      	push	{r4, r5, r7, lr}
 80062be:	b082      	sub	sp, #8
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d112      	bne.n	80062f2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d10d      	bne.n	80062f2 <_Z41__static_initialization_and_destruction_0ii+0x36>
DW1000Device DW1000RangingClass::_networkDevices[MAX_DEVICES];
 80062d6:	4b13      	ldr	r3, [pc, #76]	; (8006324 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80062d8:	2403      	movs	r4, #3
 80062da:	461d      	mov	r5, r3
 80062dc:	2c00      	cmp	r4, #0
 80062de:	db05      	blt.n	80062ec <_Z41__static_initialization_and_destruction_0ii+0x30>
 80062e0:	4628      	mov	r0, r5
 80062e2:	f7fe f807 	bl	80042f4 <_ZN12DW1000DeviceC1Ev>
 80062e6:	3550      	adds	r5, #80	; 0x50
 80062e8:	3c01      	subs	r4, #1
 80062ea:	e7f7      	b.n	80062dc <_Z41__static_initialization_and_destruction_0ii+0x20>
DW1000Mac    DW1000RangingClass::_globalMac;
 80062ec:	480e      	ldr	r0, [pc, #56]	; (8006328 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80062ee:	f7fe fa3e 	bl	800476e <_ZN9DW1000MacC1Ev>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d110      	bne.n	800631a <_Z41__static_initialization_and_destruction_0ii+0x5e>
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80062fe:	4293      	cmp	r3, r2
 8006300:	d10b      	bne.n	800631a <_Z41__static_initialization_and_destruction_0ii+0x5e>
 8006302:	4809      	ldr	r0, [pc, #36]	; (8006328 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8006304:	f7fe fa44 	bl	8004790 <_ZN9DW1000MacD1Ev>
DW1000Device DW1000RangingClass::_networkDevices[MAX_DEVICES];
 8006308:	4c08      	ldr	r4, [pc, #32]	; (800632c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800630a:	4b06      	ldr	r3, [pc, #24]	; (8006324 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800630c:	429c      	cmp	r4, r3
 800630e:	d004      	beq.n	800631a <_Z41__static_initialization_and_destruction_0ii+0x5e>
 8006310:	3c50      	subs	r4, #80	; 0x50
 8006312:	4620      	mov	r0, r4
 8006314:	f7fe f882 	bl	800441c <_ZN12DW1000DeviceD1Ev>
 8006318:	e7f7      	b.n	800630a <_Z41__static_initialization_and_destruction_0ii+0x4e>
}
 800631a:	bf00      	nop
 800631c:	3708      	adds	r7, #8
 800631e:	46bd      	mov	sp, r7
 8006320:	bdb0      	pop	{r4, r5, r7, pc}
 8006322:	bf00      	nop
 8006324:	200002c0 	.word	0x200002c0
 8006328:	20000414 	.word	0x20000414
 800632c:	20000400 	.word	0x20000400

08006330 <_GLOBAL__sub_I_DW1000Ranging>:
 8006330:	b580      	push	{r7, lr}
 8006332:	af00      	add	r7, sp, #0
 8006334:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006338:	2001      	movs	r0, #1
 800633a:	f7ff ffbf 	bl	80062bc <_Z41__static_initialization_and_destruction_0ii>
 800633e:	bd80      	pop	{r7, pc}

08006340 <_GLOBAL__sub_D_DW1000Ranging>:
 8006340:	b580      	push	{r7, lr}
 8006342:	af00      	add	r7, sp, #0
 8006344:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006348:	2000      	movs	r0, #0
 800634a:	f7ff ffb7 	bl	80062bc <_Z41__static_initialization_and_destruction_0ii>
 800634e:	bd80      	pop	{r7, pc}

08006350 <_ZN10DW1000TimeC1Ev>:
#include "DW1000Time.h"

/**
 * Initiates DW1000Time with 0
 */
DW1000Time::DW1000Time() {
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6879      	ldr	r1, [r7, #4]
 800635a:	f04f 0200 	mov.w	r2, #0
 800635e:	f04f 0300 	mov.w	r3, #0
 8006362:	e9c1 2300 	strd	r2, r3, [r1]
	_timestamp = 0;
 8006366:	6879      	ldr	r1, [r7, #4]
 8006368:	f04f 0200 	mov.w	r2, #0
 800636c:	f04f 0300 	mov.w	r3, #0
 8006370:	e9c1 2300 	strd	r2, r3, [r1]
}
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4618      	mov	r0, r3
 8006378:	370c      	adds	r7, #12
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr

08006382 <_ZN10DW1000TimeC1ERKS_>:

/**
 * Initiates DW100Time with another instance
 * @param copy other instance
 */
DW1000Time::DW1000Time(const DW1000Time& copy) {
 8006382:	b580      	push	{r7, lr}
 8006384:	b082      	sub	sp, #8
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
 800638a:	6039      	str	r1, [r7, #0]
 800638c:	6879      	ldr	r1, [r7, #4]
 800638e:	f04f 0200 	mov.w	r2, #0
 8006392:	f04f 0300 	mov.w	r3, #0
 8006396:	e9c1 2300 	strd	r2, r3, [r1]
	setTimestamp(copy);
 800639a:	6839      	ldr	r1, [r7, #0]
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 f878 	bl	8006492 <_ZN10DW1000Time12setTimestampERKS_>
}
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4618      	mov	r0, r3
 80063a6:	3708      	adds	r7, #8
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <_ZN10DW1000TimeC1Elf>:
 * Initiates DW100Time with time and factor
 * @param value time
 * @param factorUs multiply factor for time
 * @todo maybe replace by better function without float
 */
DW1000Time::DW1000Time(int32_t value, float factorUs) {
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80063ba:	68f9      	ldr	r1, [r7, #12]
 80063bc:	f04f 0200 	mov.w	r2, #0
 80063c0:	f04f 0300 	mov.w	r3, #0
 80063c4:	e9c1 2300 	strd	r2, r3, [r1]
	setTime(value, factorUs);
 80063c8:	ed97 0a01 	vldr	s0, [r7, #4]
 80063cc:	68b9      	ldr	r1, [r7, #8]
 80063ce:	68f8      	ldr	r0, [r7, #12]
 80063d0:	f000 f88c 	bl	80064ec <_ZN10DW1000Time7setTimeElf>
}
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	4618      	mov	r0, r3
 80063d8:	3710      	adds	r7, #16
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}

080063de <_ZN10DW1000TimeD1Ev>:

/**
 * Empty
 */
DW1000Time::~DW1000Time() {}
 80063de:	b480      	push	{r7}
 80063e0:	b083      	sub	sp, #12
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4618      	mov	r0, r3
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <_ZN10DW1000Time12setTimestampEx>:

/**
 * Set timestamp
 * @param value - timestamp with intervall 1 is approx. 15ps
 */
void DW1000Time::setTimestamp(int64_t value) {
 80063f4:	b480      	push	{r7}
 80063f6:	b085      	sub	sp, #20
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	e9c7 2300 	strd	r2, r3, [r7]
	_timestamp = value;
 8006400:	68f9      	ldr	r1, [r7, #12]
 8006402:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006406:	e9c1 2300 	strd	r2, r3, [r1]
}
 800640a:	bf00      	nop
 800640c:	3714      	adds	r7, #20
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr

08006416 <_ZN10DW1000Time12setTimestampEPh>:

/**
 * Set timestamp
 * @param data timestamp as byte array
 */
void DW1000Time::setTimestamp(byte data[]) {
 8006416:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
	_timestamp = 0;
 8006422:	687e      	ldr	r6, [r7, #4]
 8006424:	f04f 0000 	mov.w	r0, #0
 8006428:	f04f 0100 	mov.w	r1, #0
 800642c:	e9c6 0100 	strd	r0, r1, [r6]
	for(uint8_t i = 0; i < LENGTH_TIMESTAMP; i++) {
 8006430:	2100      	movs	r1, #0
 8006432:	73f9      	strb	r1, [r7, #15]
 8006434:	7bf9      	ldrb	r1, [r7, #15]
 8006436:	2904      	cmp	r1, #4
 8006438:	d825      	bhi.n	8006486 <_ZN10DW1000Time12setTimestampEPh+0x70>
		_timestamp |= ((int64_t)data[i] << (i*8));
 800643a:	6879      	ldr	r1, [r7, #4]
 800643c:	e9d1 ab00 	ldrd	sl, fp, [r1]
 8006440:	7bf9      	ldrb	r1, [r7, #15]
 8006442:	6838      	ldr	r0, [r7, #0]
 8006444:	4401      	add	r1, r0
 8006446:	7809      	ldrb	r1, [r1, #0]
 8006448:	b2c9      	uxtb	r1, r1
 800644a:	2000      	movs	r0, #0
 800644c:	460c      	mov	r4, r1
 800644e:	4605      	mov	r5, r0
 8006450:	7bf9      	ldrb	r1, [r7, #15]
 8006452:	00c9      	lsls	r1, r1, #3
 8006454:	f1a1 0620 	sub.w	r6, r1, #32
 8006458:	f1c1 0020 	rsb	r0, r1, #32
 800645c:	fa05 f301 	lsl.w	r3, r5, r1
 8006460:	fa04 f606 	lsl.w	r6, r4, r6
 8006464:	4333      	orrs	r3, r6
 8006466:	fa24 f000 	lsr.w	r0, r4, r0
 800646a:	4303      	orrs	r3, r0
 800646c:	fa04 f201 	lsl.w	r2, r4, r1
 8006470:	ea4a 0802 	orr.w	r8, sl, r2
 8006474:	ea4b 0903 	orr.w	r9, fp, r3
 8006478:	6879      	ldr	r1, [r7, #4]
 800647a:	e9c1 8900 	strd	r8, r9, [r1]
	for(uint8_t i = 0; i < LENGTH_TIMESTAMP; i++) {
 800647e:	7bf9      	ldrb	r1, [r7, #15]
 8006480:	3101      	adds	r1, #1
 8006482:	73f9      	strb	r1, [r7, #15]
 8006484:	e7d6      	b.n	8006434 <_ZN10DW1000Time12setTimestampEPh+0x1e>
	}
}
 8006486:	bf00      	nop
 8006488:	3710      	adds	r7, #16
 800648a:	46bd      	mov	sp, r7
 800648c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006490:	4770      	bx	lr

08006492 <_ZN10DW1000Time12setTimestampERKS_>:

/**
 * Set timestamp from other instance
 * @param copy instance where the timestamp should be copied
 */
void DW1000Time::setTimestamp(const DW1000Time& copy) {
 8006492:	b580      	push	{r7, lr}
 8006494:	b082      	sub	sp, #8
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
 800649a:	6039      	str	r1, [r7, #0]
	_timestamp = copy.getTimestamp();
 800649c:	6838      	ldr	r0, [r7, #0]
 800649e:	f000 f83e 	bl	800651e <_ZNK10DW1000Time12getTimestampEv>
 80064a2:	4602      	mov	r2, r0
 80064a4:	460b      	mov	r3, r1
 80064a6:	6879      	ldr	r1, [r7, #4]
 80064a8:	e9c1 2300 	strd	r2, r3, [r1]
}
 80064ac:	bf00      	nop
 80064ae:	3708      	adds	r7, #8
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <_ZN10DW1000Time7setTimeEf>:
/**
 * Initiates DW100Time with micro seconds
 * @param timeUs time in micro seconds
 * @todo maybe replace by better function without float
 */
void DW1000Time::setTime(float timeUs) {
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	ed87 0a00 	vstr	s0, [r7]
	_timestamp = (int64_t)(timeUs*TIME_RES_INV);
 80064c0:	edd7 7a00 	vldr	s15, [r7]
 80064c4:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80064e8 <_ZN10DW1000Time7setTimeEf+0x34>
 80064c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80064cc:	ee17 0a90 	vmov	r0, s15
 80064d0:	f7fa fd60 	bl	8000f94 <__aeabi_f2lz>
 80064d4:	4602      	mov	r2, r0
 80064d6:	460b      	mov	r3, r1
 80064d8:	6879      	ldr	r1, [r7, #4]
 80064da:	e9c1 2300 	strd	r2, r3, [r1]
//	_timestamp %= TIME_OVERFLOW; // clean overflow
}
 80064de:	bf00      	nop
 80064e0:	3708      	adds	r7, #8
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	4779999a 	.word	0x4779999a

080064ec <_ZN10DW1000Time7setTimeElf>:
 * Set DW100Time with time and factor
 * @param value time
 * @param factorUs multiply factor for time
 * @todo maybe replace by better function without float
 */
void DW1000Time::setTime(int32_t value, float factorUs) {
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	ed87 0a01 	vstr	s0, [r7, #4]
	//float tsValue = value*factorUs;
	//tsValue = fmod(tsValue, TIME_OVERFLOW);
	//setTime(tsValue);
	setTime(value*factorUs);
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	ee07 3a90 	vmov	s15, r3
 8006500:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006504:	edd7 7a01 	vldr	s15, [r7, #4]
 8006508:	ee67 7a27 	vmul.f32	s15, s14, s15
 800650c:	eeb0 0a67 	vmov.f32	s0, s15
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f7ff ffcf 	bl	80064b4 <_ZN10DW1000Time7setTimeEf>
}
 8006516:	bf00      	nop
 8006518:	3710      	adds	r7, #16
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <_ZNK10DW1000Time12getTimestampEv>:

/**
 * Get timestamp as integer
 * @return timestamp as integer
 */
int64_t DW1000Time::getTimestamp() const {
 800651e:	b480      	push	{r7}
 8006520:	b083      	sub	sp, #12
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
	return _timestamp;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 800652c:	4610      	mov	r0, r2
 800652e:	4619      	mov	r1, r3
 8006530:	370c      	adds	r7, #12
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr

0800653a <_ZNK10DW1000Time12getTimestampEPh>:

/**
 * Get timestamp as byte array
 * @param data var where data should be written
 */
void DW1000Time::getTimestamp(byte data[]) const {
 800653a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800653c:	b085      	sub	sp, #20
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
 8006542:	6039      	str	r1, [r7, #0]
	memset(data, 0, LENGTH_TIMESTAMP);
 8006544:	2205      	movs	r2, #5
 8006546:	2100      	movs	r1, #0
 8006548:	6838      	ldr	r0, [r7, #0]
 800654a:	f003 fe75 	bl	800a238 <memset>
	for(uint8_t i = 0; i < LENGTH_TIMESTAMP; i++) {
 800654e:	2300      	movs	r3, #0
 8006550:	73fb      	strb	r3, [r7, #15]
 8006552:	7bfb      	ldrb	r3, [r7, #15]
 8006554:	2b04      	cmp	r3, #4
 8006556:	d81d      	bhi.n	8006594 <_ZNK10DW1000Time12getTimestampEPh+0x5a>
		data[i] = (byte)((_timestamp >> (i*8)) & 0xFF);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655e:	7bf9      	ldrb	r1, [r7, #15]
 8006560:	00c9      	lsls	r1, r1, #3
 8006562:	f1c1 0620 	rsb	r6, r1, #32
 8006566:	f1b1 0020 	subs.w	r0, r1, #32
 800656a:	fa22 f401 	lsr.w	r4, r2, r1
 800656e:	fa03 f606 	lsl.w	r6, r3, r6
 8006572:	ea44 0406 	orr.w	r4, r4, r6
 8006576:	d402      	bmi.n	800657e <_ZNK10DW1000Time12getTimestampEPh+0x44>
 8006578:	fa43 f000 	asr.w	r0, r3, r0
 800657c:	4304      	orrs	r4, r0
 800657e:	fa43 f501 	asr.w	r5, r3, r1
 8006582:	7bfb      	ldrb	r3, [r7, #15]
 8006584:	683a      	ldr	r2, [r7, #0]
 8006586:	4413      	add	r3, r2
 8006588:	b2e2      	uxtb	r2, r4
 800658a:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < LENGTH_TIMESTAMP; i++) {
 800658c:	7bfb      	ldrb	r3, [r7, #15]
 800658e:	3301      	adds	r3, #1
 8006590:	73fb      	strb	r3, [r7, #15]
 8006592:	e7de      	b.n	8006552 <_ZNK10DW1000Time12getTimestampEPh+0x18>
	}
}
 8006594:	bf00      	nop
 8006596:	3714      	adds	r7, #20
 8006598:	46bd      	mov	sp, r7
 800659a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800659c <_ZNK10DW1000Time11getAsMetersEv>:
/**
 * Return time as distance in meter, d=c*t
 * this is useful for e.g. time of flight
 * @return distance in meters
 */
float DW1000Time::getAsMeters() const {
 800659c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80065a0:	b082      	sub	sp, #8
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
	//return fmod((float)_timestamp, TIME_OVERFLOW)*DISTANCE_OF_RADIO;
	return (_timestamp%TIME_OVERFLOW)*DISTANCE_OF_RADIO;
 80065a6:	6879      	ldr	r1, [r7, #4]
 80065a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065ac:	4602      	mov	r2, r0
 80065ae:	f021 43ff 	bic.w	r3, r1, #2139095040	; 0x7f800000
 80065b2:	f423 03ff 	bic.w	r3, r3, #8355840	; 0x7f8000
 80065b6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	da0b      	bge.n	80065d6 <_ZNK10DW1000Time11getAsMetersEv+0x3a>
 80065be:	1e54      	subs	r4, r2, #1
 80065c0:	f143 35ff 	adc.w	r5, r3, #4294967295	; 0xffffffff
 80065c4:	4622      	mov	r2, r4
 80065c6:	f065 03ff 	orn	r3, r5, #255	; 0xff
 80065ca:	f112 0801 	adds.w	r8, r2, #1
 80065ce:	f143 0900 	adc.w	r9, r3, #0
 80065d2:	4642      	mov	r2, r8
 80065d4:	464b      	mov	r3, r9
 80065d6:	4610      	mov	r0, r2
 80065d8:	4619      	mov	r1, r3
 80065da:	f7fa fc35 	bl	8000e48 <__aeabi_l2f>
 80065de:	ee07 0a10 	vmov	s14, r0
 80065e2:	eddf 7a05 	vldr	s15, [pc, #20]	; 80065f8 <_ZNK10DW1000Time11getAsMetersEv+0x5c>
 80065e6:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80065ea:	eeb0 0a67 	vmov.f32	s0, s15
 80065ee:	3708      	adds	r7, #8
 80065f0:	46bd      	mov	sp, r7
 80065f2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80065f6:	bf00      	nop
 80065f8:	3b99bd5e 	.word	0x3b99bd5e

080065fc <_ZN10DW1000Time4wrapEv>:
 * Delay is 10, so timestamp would be 1009, but due overflow 009 is sent back.
 * Now calculate TOF: 009 - 999 = -990 -> not correct time, so wrap()
 * Wrap calculation: -990 + 1000 = 10 -> correct time 
 * @return 
 */
DW1000Time& DW1000Time::wrap() {
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
	if(_timestamp < 0) {
 8006604:	6879      	ldr	r1, [r7, #4]
 8006606:	e9d1 0100 	ldrd	r0, r1, [r1]
 800660a:	2900      	cmp	r1, #0
 800660c:	da08      	bge.n	8006620 <_ZN10DW1000Time4wrapEv+0x24>
		_timestamp += TIME_OVERFLOW;
 800660e:	6879      	ldr	r1, [r7, #4]
 8006610:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006614:	f501 7380 	add.w	r3, r1, #256	; 0x100
 8006618:	4602      	mov	r2, r0
 800661a:	6879      	ldr	r1, [r7, #4]
 800661c:	e9c1 2300 	strd	r2, r3, [r1]
	}
	return *this;
 8006620:	687b      	ldr	r3, [r7, #4]
}
 8006622:	4618      	mov	r0, r3
 8006624:	370c      	adds	r7, #12
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr

0800662e <_ZN10DW1000TimeaSERKS_>:
bool DW1000Time::isValidTimestamp() {
	return (0 <= _timestamp && _timestamp <= TIME_MAX);
}

// assign
DW1000Time& DW1000Time::operator=(const DW1000Time& assign) {
 800662e:	b580      	push	{r7, lr}
 8006630:	b082      	sub	sp, #8
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
 8006636:	6039      	str	r1, [r7, #0]
	if(this == &assign) {
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	429a      	cmp	r2, r3
 800663e:	d101      	bne.n	8006644 <_ZN10DW1000TimeaSERKS_+0x16>
		return *this;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	e008      	b.n	8006656 <_ZN10DW1000TimeaSERKS_+0x28>
	}
	_timestamp = assign.getTimestamp();
 8006644:	6838      	ldr	r0, [r7, #0]
 8006646:	f7ff ff6a 	bl	800651e <_ZNK10DW1000Time12getTimestampEv>
 800664a:	4602      	mov	r2, r0
 800664c:	460b      	mov	r3, r1
 800664e:	6879      	ldr	r1, [r7, #4]
 8006650:	e9c1 2300 	strd	r2, r3, [r1]
	return *this;
 8006654:	687b      	ldr	r3, [r7, #4]
}
 8006656:	4618      	mov	r0, r3
 8006658:	3708      	adds	r7, #8
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}

0800665e <_ZN10DW1000TimepLERKS_>:

// add
DW1000Time& DW1000Time::operator+=(const DW1000Time& add) {
 800665e:	b5b0      	push	{r4, r5, r7, lr}
 8006660:	b082      	sub	sp, #8
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
 8006666:	6039      	str	r1, [r7, #0]
	_timestamp += add.getTimestamp();
 8006668:	6838      	ldr	r0, [r7, #0]
 800666a:	f7ff ff58 	bl	800651e <_ZNK10DW1000Time12getTimestampEv>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006674:	1884      	adds	r4, r0, r2
 8006676:	eb41 0503 	adc.w	r5, r1, r3
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	e9c3 4500 	strd	r4, r5, [r3]
	return *this;
 8006680:	687b      	ldr	r3, [r7, #4]
}
 8006682:	4618      	mov	r0, r3
 8006684:	3708      	adds	r7, #8
 8006686:	46bd      	mov	sp, r7
 8006688:	bdb0      	pop	{r4, r5, r7, pc}

0800668a <_ZNK10DW1000TimeplERKS_>:

DW1000Time DW1000Time::operator+(const DW1000Time& add) const {
 800668a:	b580      	push	{r7, lr}
 800668c:	b086      	sub	sp, #24
 800668e:	af00      	add	r7, sp, #0
 8006690:	60f8      	str	r0, [r7, #12]
 8006692:	60b9      	str	r1, [r7, #8]
 8006694:	607a      	str	r2, [r7, #4]
	return DW1000Time(*this) += add;
 8006696:	f107 0310 	add.w	r3, r7, #16
 800669a:	68b9      	ldr	r1, [r7, #8]
 800669c:	4618      	mov	r0, r3
 800669e:	f7ff fe70 	bl	8006382 <_ZN10DW1000TimeC1ERKS_>
 80066a2:	f107 0310 	add.w	r3, r7, #16
 80066a6:	6879      	ldr	r1, [r7, #4]
 80066a8:	4618      	mov	r0, r3
 80066aa:	f7ff ffd8 	bl	800665e <_ZN10DW1000TimepLERKS_>
 80066ae:	4603      	mov	r3, r0
 80066b0:	4619      	mov	r1, r3
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	f7ff fe65 	bl	8006382 <_ZN10DW1000TimeC1ERKS_>
 80066b8:	f107 0310 	add.w	r3, r7, #16
 80066bc:	4618      	mov	r0, r3
 80066be:	f7ff fe8e 	bl	80063de <_ZN10DW1000TimeD1Ev>
 80066c2:	bf00      	nop
}
 80066c4:	68f8      	ldr	r0, [r7, #12]
 80066c6:	3718      	adds	r7, #24
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <_ZN10DW1000TimemIERKS_>:

// subtract
DW1000Time& DW1000Time::operator-=(const DW1000Time& sub) {
 80066cc:	b5b0      	push	{r4, r5, r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
	_timestamp -= sub.getTimestamp();
 80066d6:	6838      	ldr	r0, [r7, #0]
 80066d8:	f7ff ff21 	bl	800651e <_ZNK10DW1000Time12getTimestampEv>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e2:	1a14      	subs	r4, r2, r0
 80066e4:	eb63 0501 	sbc.w	r5, r3, r1
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	e9c3 4500 	strd	r4, r5, [r3]
	return *this;
 80066ee:	687b      	ldr	r3, [r7, #4]
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3708      	adds	r7, #8
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bdb0      	pop	{r4, r5, r7, pc}

080066f8 <_ZNK10DW1000TimemiERKS_>:

DW1000Time DW1000Time::operator-(const DW1000Time& sub) const {
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b086      	sub	sp, #24
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]
	return DW1000Time(*this) -= sub;
 8006704:	f107 0310 	add.w	r3, r7, #16
 8006708:	68b9      	ldr	r1, [r7, #8]
 800670a:	4618      	mov	r0, r3
 800670c:	f7ff fe39 	bl	8006382 <_ZN10DW1000TimeC1ERKS_>
 8006710:	f107 0310 	add.w	r3, r7, #16
 8006714:	6879      	ldr	r1, [r7, #4]
 8006716:	4618      	mov	r0, r3
 8006718:	f7ff ffd8 	bl	80066cc <_ZN10DW1000TimemIERKS_>
 800671c:	4603      	mov	r3, r0
 800671e:	4619      	mov	r1, r3
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f7ff fe2e 	bl	8006382 <_ZN10DW1000TimeC1ERKS_>
 8006726:	f107 0310 	add.w	r3, r7, #16
 800672a:	4618      	mov	r0, r3
 800672c:	f7ff fe57 	bl	80063de <_ZN10DW1000TimeD1Ev>
 8006730:	bf00      	nop
}
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	3718      	adds	r7, #24
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}

0800673a <_ZN10DW1000TimemLERKS_>:

DW1000Time DW1000Time::operator*(float factor) const {
	return DW1000Time(*this) *= factor;
}

DW1000Time& DW1000Time::operator*=(const DW1000Time& factor) {
 800673a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800673c:	b083      	sub	sp, #12
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
 8006742:	6039      	str	r1, [r7, #0]
	_timestamp *= factor.getTimestamp();
 8006744:	6838      	ldr	r0, [r7, #0]
 8006746:	f7ff feea 	bl	800651e <_ZNK10DW1000Time12getTimestampEv>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006750:	fb02 fc01 	mul.w	ip, r2, r1
 8006754:	fb00 f603 	mul.w	r6, r0, r3
 8006758:	4466      	add	r6, ip
 800675a:	fba0 4502 	umull	r4, r5, r0, r2
 800675e:	1973      	adds	r3, r6, r5
 8006760:	461d      	mov	r5, r3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	e9c3 4500 	strd	r4, r5, [r3]
	return *this;
 8006768:	687b      	ldr	r3, [r7, #4]
}
 800676a:	4618      	mov	r0, r3
 800676c:	370c      	adds	r7, #12
 800676e:	46bd      	mov	sp, r7
 8006770:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006772 <_ZNK10DW1000TimemlERKS_>:

DW1000Time DW1000Time::operator*(const DW1000Time& factor) const {
 8006772:	b580      	push	{r7, lr}
 8006774:	b086      	sub	sp, #24
 8006776:	af00      	add	r7, sp, #0
 8006778:	60f8      	str	r0, [r7, #12]
 800677a:	60b9      	str	r1, [r7, #8]
 800677c:	607a      	str	r2, [r7, #4]
	return DW1000Time(*this) *= factor;
 800677e:	f107 0310 	add.w	r3, r7, #16
 8006782:	68b9      	ldr	r1, [r7, #8]
 8006784:	4618      	mov	r0, r3
 8006786:	f7ff fdfc 	bl	8006382 <_ZN10DW1000TimeC1ERKS_>
 800678a:	f107 0310 	add.w	r3, r7, #16
 800678e:	6879      	ldr	r1, [r7, #4]
 8006790:	4618      	mov	r0, r3
 8006792:	f7ff ffd2 	bl	800673a <_ZN10DW1000TimemLERKS_>
 8006796:	4603      	mov	r3, r0
 8006798:	4619      	mov	r1, r3
 800679a:	68f8      	ldr	r0, [r7, #12]
 800679c:	f7ff fdf1 	bl	8006382 <_ZN10DW1000TimeC1ERKS_>
 80067a0:	f107 0310 	add.w	r3, r7, #16
 80067a4:	4618      	mov	r0, r3
 80067a6:	f7ff fe1a 	bl	80063de <_ZN10DW1000TimeD1Ev>
 80067aa:	bf00      	nop
}
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	3718      	adds	r7, #24
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <_ZN10DW1000TimedVERKS_>:

DW1000Time DW1000Time::operator/(float factor) const {
	return DW1000Time(*this) /= factor;
}

DW1000Time& DW1000Time::operator/=(const DW1000Time& factor) {
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
	_timestamp /= factor.getTimestamp();
 80067be:	6838      	ldr	r0, [r7, #0]
 80067c0:	f7ff fead 	bl	800651e <_ZNK10DW1000Time12getTimestampEv>
 80067c4:	4602      	mov	r2, r0
 80067c6:	460b      	mov	r3, r1
 80067c8:	6879      	ldr	r1, [r7, #4]
 80067ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067ce:	f7fa fb79 	bl	8000ec4 <__aeabi_ldivmod>
 80067d2:	4602      	mov	r2, r0
 80067d4:	460b      	mov	r3, r1
 80067d6:	6879      	ldr	r1, [r7, #4]
 80067d8:	e9c1 2300 	strd	r2, r3, [r1]
	return *this;
 80067dc:	687b      	ldr	r3, [r7, #4]
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3708      	adds	r7, #8
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <_ZNK10DW1000TimedvERKS_>:

DW1000Time DW1000Time::operator/(const DW1000Time& factor) const {
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b086      	sub	sp, #24
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	60f8      	str	r0, [r7, #12]
 80067ee:	60b9      	str	r1, [r7, #8]
 80067f0:	607a      	str	r2, [r7, #4]
	return DW1000Time(*this) /= factor;
 80067f2:	f107 0310 	add.w	r3, r7, #16
 80067f6:	68b9      	ldr	r1, [r7, #8]
 80067f8:	4618      	mov	r0, r3
 80067fa:	f7ff fdc2 	bl	8006382 <_ZN10DW1000TimeC1ERKS_>
 80067fe:	f107 0310 	add.w	r3, r7, #16
 8006802:	6879      	ldr	r1, [r7, #4]
 8006804:	4618      	mov	r0, r3
 8006806:	f7ff ffd5 	bl	80067b4 <_ZN10DW1000TimedVERKS_>
 800680a:	4603      	mov	r3, r0
 800680c:	4619      	mov	r1, r3
 800680e:	68f8      	ldr	r0, [r7, #12]
 8006810:	f7ff fdb7 	bl	8006382 <_ZN10DW1000TimeC1ERKS_>
 8006814:	f107 0310 	add.w	r3, r7, #16
 8006818:	4618      	mov	r0, r3
 800681a:	f7ff fde0 	bl	80063de <_ZN10DW1000TimeD1Ev>
 800681e:	bf00      	nop
}
 8006820:	68f8      	ldr	r0, [r7, #12]
 8006822:	3718      	adds	r7, #24
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <_ZN18DW1000RangingClass14attachNewRangeEPFvvE>:
	static void useRangeFilter(bool enabled);
	// Used for the smoothing algorithm (Exponential Moving Average). newValue must be >= 2. Default 15.
	static void setRangeFilterValue(uint16_t newValue);
	
	//Handlers:
	static void attachNewRange(void (* handleNewRange)(void)) { _handleNewRange = handleNewRange; };
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	4a04      	ldr	r2, [pc, #16]	; (8006844 <_ZN18DW1000RangingClass14attachNewRangeEPFvvE+0x1c>)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6013      	str	r3, [r2, #0]
 8006836:	bf00      	nop
 8006838:	370c      	adds	r7, #12
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	20000494 	.word	0x20000494

08006848 <_ZN18DW1000RangingClass15attachNewDeviceEPFvP12DW1000DeviceE>:
	
	static void attachBlinkDevice(void (* handleBlinkDevice)(DW1000Device*)) { _handleBlinkDevice = handleBlinkDevice; };
	
	static void attachNewDevice(void (* handleNewDevice)(DW1000Device*)) { _handleNewDevice = handleNewDevice; };
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	4a04      	ldr	r2, [pc, #16]	; (8006864 <_ZN18DW1000RangingClass15attachNewDeviceEPFvP12DW1000DeviceE+0x1c>)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6013      	str	r3, [r2, #0]
 8006856:	bf00      	nop
 8006858:	370c      	adds	r7, #12
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	2000049c 	.word	0x2000049c

08006868 <_ZN18DW1000RangingClass20attachInactiveDeviceEPFvP12DW1000DeviceE>:
	
	static void attachInactiveDevice(void (* handleInactiveDevice)(DW1000Device*)) { _handleInactiveDevice = handleInactiveDevice; };
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	4a04      	ldr	r2, [pc, #16]	; (8006884 <_ZN18DW1000RangingClass20attachInactiveDeviceEPFvP12DW1000DeviceE+0x1c>)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6013      	str	r3, [r2, #0]
 8006876:	bf00      	nop
 8006878:	370c      	adds	r7, #12
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop
 8006884:	200004a0 	.word	0x200004a0

08006888 <_Z8newRangev>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void newRange()
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b08a      	sub	sp, #40	; 0x28
 800688c:	af00      	add	r7, sp, #0
	uint8_t buffer_uart1[32];

	float range = DW1000Ranging.getDistantDevice()->getRange();
 800688e:	f7fe fba3 	bl	8004fd8 <_ZN18DW1000RangingClass16getDistantDeviceEv>
 8006892:	4603      	mov	r3, r0
 8006894:	4618      	mov	r0, r3
 8006896:	f7fd fee9 	bl	800466c <_ZN12DW1000Device8getRangeEv>
 800689a:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	sprintf((char*)buffer_uart1, "Distance is: %f\r\n", range);
 800689e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068a0:	f7f9 fe62 	bl	8000568 <__aeabi_f2d>
 80068a4:	4602      	mov	r2, r0
 80068a6:	460b      	mov	r3, r1
 80068a8:	1d38      	adds	r0, r7, #4
 80068aa:	4909      	ldr	r1, [pc, #36]	; (80068d0 <_Z8newRangev+0x48>)
 80068ac:	f004 fa64 	bl	800ad78 <siprintf>
	HAL_UART_Transmit(&huart1, buffer_uart1, strlen((char*)buffer_uart1), 100);
 80068b0:	1d3b      	adds	r3, r7, #4
 80068b2:	4618      	mov	r0, r3
 80068b4:	f7f9 fc9c 	bl	80001f0 <strlen>
 80068b8:	4603      	mov	r3, r0
 80068ba:	b29a      	uxth	r2, r3
 80068bc:	1d39      	adds	r1, r7, #4
 80068be:	2364      	movs	r3, #100	; 0x64
 80068c0:	4804      	ldr	r0, [pc, #16]	; (80068d4 <_Z8newRangev+0x4c>)
 80068c2:	f002 ff54 	bl	800976e <HAL_UART_Transmit>
}
 80068c6:	bf00      	nop
 80068c8:	3728      	adds	r7, #40	; 0x28
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	0800d0e4 	.word	0x0800d0e4
 80068d4:	200004fc 	.word	0x200004fc

080068d8 <_Z9newDeviceP12DW1000Device>:

void newDevice(DW1000Device *device)
{
 80068d8:	b590      	push	{r4, r7, lr}
 80068da:	b087      	sub	sp, #28
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
	uint8_t buffer_uart2[] = "Device added\r\n";
 80068e0:	4b09      	ldr	r3, [pc, #36]	; (8006908 <_Z9newDeviceP12DW1000Device+0x30>)
 80068e2:	f107 0408 	add.w	r4, r7, #8
 80068e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80068e8:	c407      	stmia	r4!, {r0, r1, r2}
 80068ea:	8023      	strh	r3, [r4, #0]
 80068ec:	3402      	adds	r4, #2
 80068ee:	0c1b      	lsrs	r3, r3, #16
 80068f0:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, buffer_uart2, sizeof(buffer_uart2), 100);
 80068f2:	f107 0108 	add.w	r1, r7, #8
 80068f6:	2364      	movs	r3, #100	; 0x64
 80068f8:	220f      	movs	r2, #15
 80068fa:	4804      	ldr	r0, [pc, #16]	; (800690c <_Z9newDeviceP12DW1000Device+0x34>)
 80068fc:	f002 ff37 	bl	800976e <HAL_UART_Transmit>
}
 8006900:	bf00      	nop
 8006902:	371c      	adds	r7, #28
 8006904:	46bd      	mov	sp, r7
 8006906:	bd90      	pop	{r4, r7, pc}
 8006908:	0800d0f8 	.word	0x0800d0f8
 800690c:	200004fc 	.word	0x200004fc

08006910 <_Z14inactiveDeviceP12DW1000Device>:

void inactiveDevice(DW1000Device *device)
{
 8006910:	b5b0      	push	{r4, r5, r7, lr}
 8006912:	b08a      	sub	sp, #40	; 0x28
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
	uint8_t buffer_uart3[] = "Delete inactive device\r\n";
 8006918:	4b0a      	ldr	r3, [pc, #40]	; (8006944 <_Z14inactiveDeviceP12DW1000Device+0x34>)
 800691a:	f107 040c 	add.w	r4, r7, #12
 800691e:	461d      	mov	r5, r3
 8006920:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006922:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006924:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006928:	c403      	stmia	r4!, {r0, r1}
 800692a:	7022      	strb	r2, [r4, #0]
	HAL_UART_Transmit(&huart1, buffer_uart3, sizeof(buffer_uart3), 100);
 800692c:	f107 010c 	add.w	r1, r7, #12
 8006930:	2364      	movs	r3, #100	; 0x64
 8006932:	2219      	movs	r2, #25
 8006934:	4804      	ldr	r0, [pc, #16]	; (8006948 <_Z14inactiveDeviceP12DW1000Device+0x38>)
 8006936:	f002 ff1a 	bl	800976e <HAL_UART_Transmit>
}
 800693a:	bf00      	nop
 800693c:	3728      	adds	r7, #40	; 0x28
 800693e:	46bd      	mov	sp, r7
 8006940:	bdb0      	pop	{r4, r5, r7, pc}
 8006942:	bf00      	nop
 8006944:	0800d108 	.word	0x0800d108
 8006948:	200004fc 	.word	0x200004fc

0800694c <_Z7dw_mainv>:


int dw_main(void)
{
 800694c:	b5b0      	push	{r4, r5, r7, lr}
 800694e:	b086      	sub	sp, #24
 8006950:	af00      	add	r7, sp, #0
    /* Display application name on LCD. */
	uint8_t buffer_uart[] = "\r\nSS TWR INIT v1.3\r\n";  // начало строки, новая строка
 8006952:	4b16      	ldr	r3, [pc, #88]	; (80069ac <_Z7dw_mainv+0x60>)
 8006954:	463c      	mov	r4, r7
 8006956:	461d      	mov	r5, r3
 8006958:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800695a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800695c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006960:	6020      	str	r0, [r4, #0]
 8006962:	3404      	adds	r4, #4
 8006964:	7021      	strb	r1, [r4, #0]
	HAL_UART_Transmit(&huart1, buffer_uart, sizeof(buffer_uart), 100);
 8006966:	4639      	mov	r1, r7
 8006968:	2364      	movs	r3, #100	; 0x64
 800696a:	2215      	movs	r2, #21
 800696c:	4810      	ldr	r0, [pc, #64]	; (80069b0 <_Z7dw_mainv+0x64>)
 800696e:	f002 fefe 	bl	800976e <HAL_UART_Transmit>
//	HAL_Delay(1000);
//	uint32_t devid2 = dwt_readdevid();
//	HAL_Delay(1000);
//	uint32_t devid3 = dwt_readdevid();

	DW1000Ranging.initCommunication(&huart1, &config);
 8006972:	4910      	ldr	r1, [pc, #64]	; (80069b4 <_Z7dw_mainv+0x68>)
 8006974:	480e      	ldr	r0, [pc, #56]	; (80069b0 <_Z7dw_mainv+0x64>)
 8006976:	f7fe f897 	bl	8004aa8 <_ZN18DW1000RangingClass17initCommunicationEP20__UART_HandleTypeDefP12dwt_config_t>

	DW1000.setAntennaDelay(Adelay);
 800697a:	4b0f      	ldr	r3, [pc, #60]	; (80069b8 <_Z7dw_mainv+0x6c>)
 800697c:	881b      	ldrh	r3, [r3, #0]
 800697e:	4618      	mov	r0, r3
 8006980:	f7fc fa9c 	bl	8002ebc <_ZN11DW1000Class15setAntennaDelayEt>

	DW1000Ranging.attachNewRange(newRange);
 8006984:	480d      	ldr	r0, [pc, #52]	; (80069bc <_Z7dw_mainv+0x70>)
 8006986:	f7ff ff4f 	bl	8006828 <_ZN18DW1000RangingClass14attachNewRangeEPFvvE>
	DW1000Ranging.attachNewDevice(newDevice);
 800698a:	480d      	ldr	r0, [pc, #52]	; (80069c0 <_Z7dw_mainv+0x74>)
 800698c:	f7ff ff5c 	bl	8006848 <_ZN18DW1000RangingClass15attachNewDeviceEPFvP12DW1000DeviceE>
	DW1000Ranging.attachInactiveDevice(inactiveDevice);
 8006990:	480c      	ldr	r0, [pc, #48]	; (80069c4 <_Z7dw_mainv+0x78>)
 8006992:	f7ff ff69 	bl	8006868 <_ZN18DW1000RangingClass20attachInactiveDeviceEPFvP12DW1000DeviceE>

	DW1000Ranging.startAsAnchor(anchor_addr, DW1000.MODE_LONGDATA_RANGE_LOWPOWER, false);
 8006996:	2200      	movs	r2, #0
 8006998:	490b      	ldr	r1, [pc, #44]	; (80069c8 <_Z7dw_mainv+0x7c>)
 800699a:	480c      	ldr	r0, [pc, #48]	; (80069cc <_Z7dw_mainv+0x80>)
 800699c:	f7fe f912 	bl	8004bc4 <_ZN18DW1000RangingClass13startAsAnchorEPcPKhb>

}
 80069a0:	bf00      	nop
 80069a2:	4618      	mov	r0, r3
 80069a4:	3718      	adds	r7, #24
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bdb0      	pop	{r4, r5, r7, pc}
 80069aa:	bf00      	nop
 80069ac:	0800d124 	.word	0x0800d124
 80069b0:	200004fc 	.word	0x200004fc
 80069b4:	20000010 	.word	0x20000010
 80069b8:	20000034 	.word	0x20000034
 80069bc:	08006889 	.word	0x08006889
 80069c0:	080068d9 	.word	0x080068d9
 80069c4:	08006911 	.word	0x08006911
 80069c8:	0800d1f0 	.word	0x0800d1f0
 80069cc:	2000001c 	.word	0x2000001c

080069d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80069d4:	f000 fe16 	bl	8007604 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80069d8:	f000 f80e 	bl	80069f8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80069dc:	f000 f8ec 	bl	8006bb8 <_ZL12MX_GPIO_Initv>
  MX_SPI3_Init();
 80069e0:	f000 f880 	bl	8006ae4 <_ZL12MX_SPI3_Initv>
  MX_USART1_UART_Init();
 80069e4:	f000 f8ba 	bl	8006b5c <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */
  setup_DW1000RSTnIRQ(0);
 80069e8:	2000      	movs	r0, #0
 80069ea:	f000 fd29 	bl	8007440 <setup_DW1000RSTnIRQ>
  dw_main();
 80069ee:	f7ff ffad 	bl	800694c <_Z7dw_mainv>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  DW1000Ranging.loop();
 80069f2:	f7fe fba5 	bl	8005140 <_ZN18DW1000RangingClass4loopEv>
 80069f6:	e7fc      	b.n	80069f2 <main+0x22>

080069f8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b094      	sub	sp, #80	; 0x50
 80069fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80069fe:	f107 0320 	add.w	r3, r7, #32
 8006a02:	2230      	movs	r2, #48	; 0x30
 8006a04:	2100      	movs	r1, #0
 8006a06:	4618      	mov	r0, r3
 8006a08:	f003 fc16 	bl	800a238 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006a0c:	f107 030c 	add.w	r3, r7, #12
 8006a10:	2200      	movs	r2, #0
 8006a12:	601a      	str	r2, [r3, #0]
 8006a14:	605a      	str	r2, [r3, #4]
 8006a16:	609a      	str	r2, [r3, #8]
 8006a18:	60da      	str	r2, [r3, #12]
 8006a1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	60bb      	str	r3, [r7, #8]
 8006a20:	4b2e      	ldr	r3, [pc, #184]	; (8006adc <_Z18SystemClock_Configv+0xe4>)
 8006a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a24:	4a2d      	ldr	r2, [pc, #180]	; (8006adc <_Z18SystemClock_Configv+0xe4>)
 8006a26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a2a:	6413      	str	r3, [r2, #64]	; 0x40
 8006a2c:	4b2b      	ldr	r3, [pc, #172]	; (8006adc <_Z18SystemClock_Configv+0xe4>)
 8006a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a34:	60bb      	str	r3, [r7, #8]
 8006a36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8006a38:	2300      	movs	r3, #0
 8006a3a:	607b      	str	r3, [r7, #4]
 8006a3c:	4b28      	ldr	r3, [pc, #160]	; (8006ae0 <_Z18SystemClock_Configv+0xe8>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006a44:	4a26      	ldr	r2, [pc, #152]	; (8006ae0 <_Z18SystemClock_Configv+0xe8>)
 8006a46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006a4a:	6013      	str	r3, [r2, #0]
 8006a4c:	4b24      	ldr	r3, [pc, #144]	; (8006ae0 <_Z18SystemClock_Configv+0xe8>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006a54:	607b      	str	r3, [r7, #4]
 8006a56:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006a58:	2302      	movs	r3, #2
 8006a5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006a60:	2310      	movs	r3, #16
 8006a62:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006a64:	2302      	movs	r3, #2
 8006a66:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8006a6c:	2308      	movs	r3, #8
 8006a6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8006a70:	2340      	movs	r3, #64	; 0x40
 8006a72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006a74:	2302      	movs	r3, #2
 8006a76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8006a78:	2307      	movs	r3, #7
 8006a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006a7c:	f107 0320 	add.w	r3, r7, #32
 8006a80:	4618      	mov	r0, r3
 8006a82:	f001 f951 	bl	8007d28 <HAL_RCC_OscConfig>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	bf14      	ite	ne
 8006a8c:	2301      	movne	r3, #1
 8006a8e:	2300      	moveq	r3, #0
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d001      	beq.n	8006a9a <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8006a96:	f000 f91d 	bl	8006cd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006a9a:	230f      	movs	r3, #15
 8006a9c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006a9e:	2302      	movs	r3, #2
 8006aa0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006aa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006aaa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8006aac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006ab0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006ab2:	f107 030c 	add.w	r3, r7, #12
 8006ab6:	2102      	movs	r1, #2
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f001 fbad 	bl	8008218 <HAL_RCC_ClockConfig>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	bf14      	ite	ne
 8006ac4:	2301      	movne	r3, #1
 8006ac6:	2300      	moveq	r3, #0
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d001      	beq.n	8006ad2 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 8006ace:	f000 f901 	bl	8006cd4 <Error_Handler>
  }
}
 8006ad2:	bf00      	nop
 8006ad4:	3750      	adds	r7, #80	; 0x50
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
 8006ada:	bf00      	nop
 8006adc:	40023800 	.word	0x40023800
 8006ae0:	40007000 	.word	0x40007000

08006ae4 <_ZL12MX_SPI3_Initv>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8006ae8:	4b1a      	ldr	r3, [pc, #104]	; (8006b54 <_ZL12MX_SPI3_Initv+0x70>)
 8006aea:	4a1b      	ldr	r2, [pc, #108]	; (8006b58 <_ZL12MX_SPI3_Initv+0x74>)
 8006aec:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8006aee:	4b19      	ldr	r3, [pc, #100]	; (8006b54 <_ZL12MX_SPI3_Initv+0x70>)
 8006af0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006af4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8006af6:	4b17      	ldr	r3, [pc, #92]	; (8006b54 <_ZL12MX_SPI3_Initv+0x70>)
 8006af8:	2200      	movs	r2, #0
 8006afa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8006afc:	4b15      	ldr	r3, [pc, #84]	; (8006b54 <_ZL12MX_SPI3_Initv+0x70>)
 8006afe:	2200      	movs	r2, #0
 8006b00:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b02:	4b14      	ldr	r3, [pc, #80]	; (8006b54 <_ZL12MX_SPI3_Initv+0x70>)
 8006b04:	2200      	movs	r2, #0
 8006b06:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006b08:	4b12      	ldr	r3, [pc, #72]	; (8006b54 <_ZL12MX_SPI3_Initv+0x70>)
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8006b0e:	4b11      	ldr	r3, [pc, #68]	; (8006b54 <_ZL12MX_SPI3_Initv+0x70>)
 8006b10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b14:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8006b16:	4b0f      	ldr	r3, [pc, #60]	; (8006b54 <_ZL12MX_SPI3_Initv+0x70>)
 8006b18:	2208      	movs	r2, #8
 8006b1a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006b1c:	4b0d      	ldr	r3, [pc, #52]	; (8006b54 <_ZL12MX_SPI3_Initv+0x70>)
 8006b1e:	2200      	movs	r2, #0
 8006b20:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8006b22:	4b0c      	ldr	r3, [pc, #48]	; (8006b54 <_ZL12MX_SPI3_Initv+0x70>)
 8006b24:	2200      	movs	r2, #0
 8006b26:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b28:	4b0a      	ldr	r3, [pc, #40]	; (8006b54 <_ZL12MX_SPI3_Initv+0x70>)
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8006b2e:	4b09      	ldr	r3, [pc, #36]	; (8006b54 <_ZL12MX_SPI3_Initv+0x70>)
 8006b30:	220a      	movs	r2, #10
 8006b32:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8006b34:	4807      	ldr	r0, [pc, #28]	; (8006b54 <_ZL12MX_SPI3_Initv+0x70>)
 8006b36:	f001 fdc1 	bl	80086bc <HAL_SPI_Init>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	bf14      	ite	ne
 8006b40:	2301      	movne	r3, #1
 8006b42:	2300      	moveq	r3, #0
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d001      	beq.n	8006b4e <_ZL12MX_SPI3_Initv+0x6a>
  {
    Error_Handler();
 8006b4a:	f000 f8c3 	bl	8006cd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8006b4e:	bf00      	nop
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	200004a4 	.word	0x200004a4
 8006b58:	40003c00 	.word	0x40003c00

08006b5c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006b60:	4b13      	ldr	r3, [pc, #76]	; (8006bb0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8006b62:	4a14      	ldr	r2, [pc, #80]	; (8006bb4 <_ZL19MX_USART1_UART_Initv+0x58>)
 8006b64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006b66:	4b12      	ldr	r3, [pc, #72]	; (8006bb0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8006b68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006b6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006b6e:	4b10      	ldr	r3, [pc, #64]	; (8006bb0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8006b70:	2200      	movs	r2, #0
 8006b72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006b74:	4b0e      	ldr	r3, [pc, #56]	; (8006bb0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8006b76:	2200      	movs	r2, #0
 8006b78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006b7a:	4b0d      	ldr	r3, [pc, #52]	; (8006bb0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006b80:	4b0b      	ldr	r3, [pc, #44]	; (8006bb0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8006b82:	220c      	movs	r2, #12
 8006b84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006b86:	4b0a      	ldr	r3, [pc, #40]	; (8006bb0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8006b88:	2200      	movs	r2, #0
 8006b8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006b8c:	4b08      	ldr	r3, [pc, #32]	; (8006bb0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8006b8e:	2200      	movs	r2, #0
 8006b90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006b92:	4807      	ldr	r0, [pc, #28]	; (8006bb0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8006b94:	f002 fd9e 	bl	80096d4 <HAL_UART_Init>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	bf14      	ite	ne
 8006b9e:	2301      	movne	r3, #1
 8006ba0:	2300      	moveq	r3, #0
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d001      	beq.n	8006bac <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8006ba8:	f000 f894 	bl	8006cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006bac:	bf00      	nop
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	200004fc 	.word	0x200004fc
 8006bb4:	40011000 	.word	0x40011000

08006bb8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b088      	sub	sp, #32
 8006bbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bbe:	f107 030c 	add.w	r3, r7, #12
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	601a      	str	r2, [r3, #0]
 8006bc6:	605a      	str	r2, [r3, #4]
 8006bc8:	609a      	str	r2, [r3, #8]
 8006bca:	60da      	str	r2, [r3, #12]
 8006bcc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006bce:	2300      	movs	r3, #0
 8006bd0:	60bb      	str	r3, [r7, #8]
 8006bd2:	4b34      	ldr	r3, [pc, #208]	; (8006ca4 <_ZL12MX_GPIO_Initv+0xec>)
 8006bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd6:	4a33      	ldr	r2, [pc, #204]	; (8006ca4 <_ZL12MX_GPIO_Initv+0xec>)
 8006bd8:	f043 0301 	orr.w	r3, r3, #1
 8006bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8006bde:	4b31      	ldr	r3, [pc, #196]	; (8006ca4 <_ZL12MX_GPIO_Initv+0xec>)
 8006be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be2:	f003 0301 	and.w	r3, r3, #1
 8006be6:	60bb      	str	r3, [r7, #8]
 8006be8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006bea:	2300      	movs	r3, #0
 8006bec:	607b      	str	r3, [r7, #4]
 8006bee:	4b2d      	ldr	r3, [pc, #180]	; (8006ca4 <_ZL12MX_GPIO_Initv+0xec>)
 8006bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf2:	4a2c      	ldr	r2, [pc, #176]	; (8006ca4 <_ZL12MX_GPIO_Initv+0xec>)
 8006bf4:	f043 0304 	orr.w	r3, r3, #4
 8006bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8006bfa:	4b2a      	ldr	r3, [pc, #168]	; (8006ca4 <_ZL12MX_GPIO_Initv+0xec>)
 8006bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bfe:	f003 0304 	and.w	r3, r3, #4
 8006c02:	607b      	str	r3, [r7, #4]
 8006c04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006c06:	2300      	movs	r3, #0
 8006c08:	603b      	str	r3, [r7, #0]
 8006c0a:	4b26      	ldr	r3, [pc, #152]	; (8006ca4 <_ZL12MX_GPIO_Initv+0xec>)
 8006c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c0e:	4a25      	ldr	r2, [pc, #148]	; (8006ca4 <_ZL12MX_GPIO_Initv+0xec>)
 8006c10:	f043 0308 	orr.w	r3, r3, #8
 8006c14:	6313      	str	r3, [r2, #48]	; 0x30
 8006c16:	4b23      	ldr	r3, [pc, #140]	; (8006ca4 <_ZL12MX_GPIO_Initv+0xec>)
 8006c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c1a:	f003 0308 	and.w	r3, r3, #8
 8006c1e:	603b      	str	r3, [r7, #0]
 8006c20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET);
 8006c22:	2200      	movs	r2, #0
 8006c24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006c28:	481f      	ldr	r0, [pc, #124]	; (8006ca8 <_ZL12MX_GPIO_Initv+0xf0>)
 8006c2a:	f001 f84b 	bl	8007cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DW_RESET_Pin|DW_WUP_Pin, GPIO_PIN_RESET);
 8006c2e:	2200      	movs	r2, #0
 8006c30:	2105      	movs	r1, #5
 8006c32:	481e      	ldr	r0, [pc, #120]	; (8006cac <_ZL12MX_GPIO_Initv+0xf4>)
 8006c34:	f001 f846 	bl	8007cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DW_NSS_Pin */
  GPIO_InitStruct.Pin = DW_NSS_Pin;
 8006c38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c42:	2300      	movs	r3, #0
 8006c44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006c46:	2302      	movs	r3, #2
 8006c48:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DW_NSS_GPIO_Port, &GPIO_InitStruct);
 8006c4a:	f107 030c 	add.w	r3, r7, #12
 8006c4e:	4619      	mov	r1, r3
 8006c50:	4815      	ldr	r0, [pc, #84]	; (8006ca8 <_ZL12MX_GPIO_Initv+0xf0>)
 8006c52:	f000 fe73 	bl	800793c <HAL_GPIO_Init>

  /*Configure GPIO pins : DW_RESET_Pin DW_WUP_Pin */
  GPIO_InitStruct.Pin = DW_RESET_Pin|DW_WUP_Pin;
 8006c56:	2305      	movs	r3, #5
 8006c58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8006c5a:	2311      	movs	r3, #17
 8006c5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006c62:	2302      	movs	r3, #2
 8006c64:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006c66:	f107 030c 	add.w	r3, r7, #12
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	480f      	ldr	r0, [pc, #60]	; (8006cac <_ZL12MX_GPIO_Initv+0xf4>)
 8006c6e:	f000 fe65 	bl	800793c <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_IRQn_Pin */
  GPIO_InitStruct.Pin = DW_IRQn_Pin;
 8006c72:	2302      	movs	r3, #2
 8006c74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006c76:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8006c7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006c7c:	2302      	movs	r3, #2
 8006c7e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DW_IRQn_GPIO_Port, &GPIO_InitStruct);
 8006c80:	f107 030c 	add.w	r3, r7, #12
 8006c84:	4619      	mov	r1, r3
 8006c86:	4809      	ldr	r0, [pc, #36]	; (8006cac <_ZL12MX_GPIO_Initv+0xf4>)
 8006c88:	f000 fe58 	bl	800793c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	2100      	movs	r1, #0
 8006c90:	2007      	movs	r0, #7
 8006c92:	f000 fdf9 	bl	8007888 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8006c96:	2007      	movs	r0, #7
 8006c98:	f000 fe12 	bl	80078c0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8006c9c:	bf00      	nop
 8006c9e:	3720      	adds	r7, #32
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}
 8006ca4:	40023800 	.word	0x40023800
 8006ca8:	40020000 	.word	0x40020000
 8006cac:	40020c00 	.word	0x40020c00

08006cb0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a04      	ldr	r2, [pc, #16]	; (8006cd0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d101      	bne.n	8006cc6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8006cc2:	f000 fcc1 	bl	8007648 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8006cc6:	bf00      	nop
 8006cc8:	3708      	adds	r7, #8
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	40010000 	.word	0x40010000

08006cd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006cd8:	b672      	cpsid	i
}
 8006cda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006cdc:	e7fe      	b.n	8006cdc <Error_Handler+0x8>
	...

08006ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b082      	sub	sp, #8
 8006ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	607b      	str	r3, [r7, #4]
 8006cea:	4b10      	ldr	r3, [pc, #64]	; (8006d2c <HAL_MspInit+0x4c>)
 8006cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cee:	4a0f      	ldr	r2, [pc, #60]	; (8006d2c <HAL_MspInit+0x4c>)
 8006cf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8006cf6:	4b0d      	ldr	r3, [pc, #52]	; (8006d2c <HAL_MspInit+0x4c>)
 8006cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cfe:	607b      	str	r3, [r7, #4]
 8006d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006d02:	2300      	movs	r3, #0
 8006d04:	603b      	str	r3, [r7, #0]
 8006d06:	4b09      	ldr	r3, [pc, #36]	; (8006d2c <HAL_MspInit+0x4c>)
 8006d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0a:	4a08      	ldr	r2, [pc, #32]	; (8006d2c <HAL_MspInit+0x4c>)
 8006d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d10:	6413      	str	r3, [r2, #64]	; 0x40
 8006d12:	4b06      	ldr	r3, [pc, #24]	; (8006d2c <HAL_MspInit+0x4c>)
 8006d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d1a:	603b      	str	r3, [r7, #0]
 8006d1c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8006d1e:	2007      	movs	r0, #7
 8006d20:	f000 fda7 	bl	8007872 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006d24:	bf00      	nop
 8006d26:	3708      	adds	r7, #8
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	40023800 	.word	0x40023800

08006d30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b08a      	sub	sp, #40	; 0x28
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d38:	f107 0314 	add.w	r3, r7, #20
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	601a      	str	r2, [r3, #0]
 8006d40:	605a      	str	r2, [r3, #4]
 8006d42:	609a      	str	r2, [r3, #8]
 8006d44:	60da      	str	r2, [r3, #12]
 8006d46:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a1d      	ldr	r2, [pc, #116]	; (8006dc4 <HAL_SPI_MspInit+0x94>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d134      	bne.n	8006dbc <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8006d52:	2300      	movs	r3, #0
 8006d54:	613b      	str	r3, [r7, #16]
 8006d56:	4b1c      	ldr	r3, [pc, #112]	; (8006dc8 <HAL_SPI_MspInit+0x98>)
 8006d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5a:	4a1b      	ldr	r2, [pc, #108]	; (8006dc8 <HAL_SPI_MspInit+0x98>)
 8006d5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d60:	6413      	str	r3, [r2, #64]	; 0x40
 8006d62:	4b19      	ldr	r3, [pc, #100]	; (8006dc8 <HAL_SPI_MspInit+0x98>)
 8006d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d6a:	613b      	str	r3, [r7, #16]
 8006d6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d6e:	2300      	movs	r3, #0
 8006d70:	60fb      	str	r3, [r7, #12]
 8006d72:	4b15      	ldr	r3, [pc, #84]	; (8006dc8 <HAL_SPI_MspInit+0x98>)
 8006d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d76:	4a14      	ldr	r2, [pc, #80]	; (8006dc8 <HAL_SPI_MspInit+0x98>)
 8006d78:	f043 0304 	orr.w	r3, r3, #4
 8006d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8006d7e:	4b12      	ldr	r3, [pc, #72]	; (8006dc8 <HAL_SPI_MspInit+0x98>)
 8006d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d82:	f003 0304 	and.w	r3, r3, #4
 8006d86:	60fb      	str	r3, [r7, #12]
 8006d88:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = DW_SCK_Pin|DW_MISO_Pin|DW_MOSI_Pin;
 8006d8a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006d8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d90:	2302      	movs	r3, #2
 8006d92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d94:	2300      	movs	r3, #0
 8006d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8006d9c:	2306      	movs	r3, #6
 8006d9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006da0:	f107 0314 	add.w	r3, r7, #20
 8006da4:	4619      	mov	r1, r3
 8006da6:	4809      	ldr	r0, [pc, #36]	; (8006dcc <HAL_SPI_MspInit+0x9c>)
 8006da8:	f000 fdc8 	bl	800793c <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8006dac:	2200      	movs	r2, #0
 8006dae:	2100      	movs	r1, #0
 8006db0:	2033      	movs	r0, #51	; 0x33
 8006db2:	f000 fd69 	bl	8007888 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8006db6:	2033      	movs	r0, #51	; 0x33
 8006db8:	f000 fd82 	bl	80078c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8006dbc:	bf00      	nop
 8006dbe:	3728      	adds	r7, #40	; 0x28
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	40003c00 	.word	0x40003c00
 8006dc8:	40023800 	.word	0x40023800
 8006dcc:	40020800 	.word	0x40020800

08006dd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b08a      	sub	sp, #40	; 0x28
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006dd8:	f107 0314 	add.w	r3, r7, #20
 8006ddc:	2200      	movs	r2, #0
 8006dde:	601a      	str	r2, [r3, #0]
 8006de0:	605a      	str	r2, [r3, #4]
 8006de2:	609a      	str	r2, [r3, #8]
 8006de4:	60da      	str	r2, [r3, #12]
 8006de6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a19      	ldr	r2, [pc, #100]	; (8006e54 <HAL_UART_MspInit+0x84>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d12c      	bne.n	8006e4c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006df2:	2300      	movs	r3, #0
 8006df4:	613b      	str	r3, [r7, #16]
 8006df6:	4b18      	ldr	r3, [pc, #96]	; (8006e58 <HAL_UART_MspInit+0x88>)
 8006df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dfa:	4a17      	ldr	r2, [pc, #92]	; (8006e58 <HAL_UART_MspInit+0x88>)
 8006dfc:	f043 0310 	orr.w	r3, r3, #16
 8006e00:	6453      	str	r3, [r2, #68]	; 0x44
 8006e02:	4b15      	ldr	r3, [pc, #84]	; (8006e58 <HAL_UART_MspInit+0x88>)
 8006e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e06:	f003 0310 	and.w	r3, r3, #16
 8006e0a:	613b      	str	r3, [r7, #16]
 8006e0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e0e:	2300      	movs	r3, #0
 8006e10:	60fb      	str	r3, [r7, #12]
 8006e12:	4b11      	ldr	r3, [pc, #68]	; (8006e58 <HAL_UART_MspInit+0x88>)
 8006e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e16:	4a10      	ldr	r2, [pc, #64]	; (8006e58 <HAL_UART_MspInit+0x88>)
 8006e18:	f043 0301 	orr.w	r3, r3, #1
 8006e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8006e1e:	4b0e      	ldr	r3, [pc, #56]	; (8006e58 <HAL_UART_MspInit+0x88>)
 8006e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e22:	f003 0301 	and.w	r3, r3, #1
 8006e26:	60fb      	str	r3, [r7, #12]
 8006e28:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006e2a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006e2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e30:	2302      	movs	r3, #2
 8006e32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e34:	2300      	movs	r3, #0
 8006e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e38:	2303      	movs	r3, #3
 8006e3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006e3c:	2307      	movs	r3, #7
 8006e3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e40:	f107 0314 	add.w	r3, r7, #20
 8006e44:	4619      	mov	r1, r3
 8006e46:	4805      	ldr	r0, [pc, #20]	; (8006e5c <HAL_UART_MspInit+0x8c>)
 8006e48:	f000 fd78 	bl	800793c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006e4c:	bf00      	nop
 8006e4e:	3728      	adds	r7, #40	; 0x28
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	40011000 	.word	0x40011000
 8006e58:	40023800 	.word	0x40023800
 8006e5c:	40020000 	.word	0x40020000

08006e60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b08c      	sub	sp, #48	; 0x30
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8006e70:	2300      	movs	r3, #0
 8006e72:	60bb      	str	r3, [r7, #8]
 8006e74:	4b2f      	ldr	r3, [pc, #188]	; (8006f34 <HAL_InitTick+0xd4>)
 8006e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e78:	4a2e      	ldr	r2, [pc, #184]	; (8006f34 <HAL_InitTick+0xd4>)
 8006e7a:	f043 0301 	orr.w	r3, r3, #1
 8006e7e:	6453      	str	r3, [r2, #68]	; 0x44
 8006e80:	4b2c      	ldr	r3, [pc, #176]	; (8006f34 <HAL_InitTick+0xd4>)
 8006e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e84:	f003 0301 	and.w	r3, r3, #1
 8006e88:	60bb      	str	r3, [r7, #8]
 8006e8a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006e8c:	f107 020c 	add.w	r2, r7, #12
 8006e90:	f107 0310 	add.w	r3, r7, #16
 8006e94:	4611      	mov	r1, r2
 8006e96:	4618      	mov	r0, r3
 8006e98:	f001 fbde 	bl	8008658 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8006e9c:	f001 fbc8 	bl	8008630 <HAL_RCC_GetPCLK2Freq>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	005b      	lsls	r3, r3, #1
 8006ea4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea8:	4a23      	ldr	r2, [pc, #140]	; (8006f38 <HAL_InitTick+0xd8>)
 8006eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8006eae:	0c9b      	lsrs	r3, r3, #18
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8006eb4:	4b21      	ldr	r3, [pc, #132]	; (8006f3c <HAL_InitTick+0xdc>)
 8006eb6:	4a22      	ldr	r2, [pc, #136]	; (8006f40 <HAL_InitTick+0xe0>)
 8006eb8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8006eba:	4b20      	ldr	r3, [pc, #128]	; (8006f3c <HAL_InitTick+0xdc>)
 8006ebc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006ec0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8006ec2:	4a1e      	ldr	r2, [pc, #120]	; (8006f3c <HAL_InitTick+0xdc>)
 8006ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8006ec8:	4b1c      	ldr	r3, [pc, #112]	; (8006f3c <HAL_InitTick+0xdc>)
 8006eca:	2200      	movs	r2, #0
 8006ecc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006ece:	4b1b      	ldr	r3, [pc, #108]	; (8006f3c <HAL_InitTick+0xdc>)
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006ed4:	4b19      	ldr	r3, [pc, #100]	; (8006f3c <HAL_InitTick+0xdc>)
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8006eda:	4818      	ldr	r0, [pc, #96]	; (8006f3c <HAL_InitTick+0xdc>)
 8006edc:	f002 f94c 	bl	8009178 <HAL_TIM_Base_Init>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8006ee6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d11b      	bne.n	8006f26 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8006eee:	4813      	ldr	r0, [pc, #76]	; (8006f3c <HAL_InitTick+0xdc>)
 8006ef0:	f002 f99c 	bl	800922c <HAL_TIM_Base_Start_IT>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8006efa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d111      	bne.n	8006f26 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8006f02:	2019      	movs	r0, #25
 8006f04:	f000 fcdc 	bl	80078c0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2b0f      	cmp	r3, #15
 8006f0c:	d808      	bhi.n	8006f20 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8006f0e:	2200      	movs	r2, #0
 8006f10:	6879      	ldr	r1, [r7, #4]
 8006f12:	2019      	movs	r0, #25
 8006f14:	f000 fcb8 	bl	8007888 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006f18:	4a0a      	ldr	r2, [pc, #40]	; (8006f44 <HAL_InitTick+0xe4>)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6013      	str	r3, [r2, #0]
 8006f1e:	e002      	b.n	8006f26 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8006f26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3730      	adds	r7, #48	; 0x30
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	bf00      	nop
 8006f34:	40023800 	.word	0x40023800
 8006f38:	431bde83 	.word	0x431bde83
 8006f3c:	20000540 	.word	0x20000540
 8006f40:	40010000 	.word	0x40010000
 8006f44:	2000003c 	.word	0x2000003c

08006f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006f4c:	e7fe      	b.n	8006f4c <NMI_Handler+0x4>

08006f4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006f4e:	b480      	push	{r7}
 8006f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006f52:	e7fe      	b.n	8006f52 <HardFault_Handler+0x4>

08006f54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006f54:	b480      	push	{r7}
 8006f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006f58:	e7fe      	b.n	8006f58 <MemManage_Handler+0x4>

08006f5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006f5a:	b480      	push	{r7}
 8006f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006f5e:	e7fe      	b.n	8006f5e <BusFault_Handler+0x4>

08006f60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006f60:	b480      	push	{r7}
 8006f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006f64:	e7fe      	b.n	8006f64 <UsageFault_Handler+0x4>

08006f66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006f66:	b480      	push	{r7}
 8006f68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006f6a:	bf00      	nop
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006f74:	b480      	push	{r7}
 8006f76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006f78:	bf00      	nop
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr

08006f82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006f82:	b480      	push	{r7}
 8006f84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006f86:	bf00      	nop
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006f90:	b480      	push	{r7}
 8006f92:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006f94:	bf00      	nop
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr

08006f9e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DW_IRQn_Pin);
 8006fa2:	2002      	movs	r0, #2
 8006fa4:	f000 fea8 	bl	8007cf8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8006fa8:	bf00      	nop
 8006faa:	bd80      	pop	{r7, pc}

08006fac <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006fb0:	4802      	ldr	r0, [pc, #8]	; (8006fbc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8006fb2:	f002 f9ab 	bl	800930c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8006fb6:	bf00      	nop
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	20000540 	.word	0x20000540

08006fc0 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8006fc4:	4802      	ldr	r0, [pc, #8]	; (8006fd0 <SPI3_IRQHandler+0x10>)
 8006fc6:	f001 fee1 	bl	8008d8c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8006fca:	bf00      	nop
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	200004a4 	.word	0x200004a4

08006fd4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	af00      	add	r7, sp, #0
  return 1;
 8006fd8:	2301      	movs	r3, #1
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <_kill>:

int _kill(int pid, int sig)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006fee:	f003 f8d3 	bl	800a198 <__errno>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	2216      	movs	r2, #22
 8006ff6:	601a      	str	r2, [r3, #0]
  return -1;
 8006ff8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3708      	adds	r7, #8
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <_exit>:

void _exit (int status)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800700c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f7ff ffe7 	bl	8006fe4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8007016:	e7fe      	b.n	8007016 <_exit+0x12>

08007018 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b086      	sub	sp, #24
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007024:	2300      	movs	r3, #0
 8007026:	617b      	str	r3, [r7, #20]
 8007028:	e00a      	b.n	8007040 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800702a:	f3af 8000 	nop.w
 800702e:	4601      	mov	r1, r0
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	1c5a      	adds	r2, r3, #1
 8007034:	60ba      	str	r2, [r7, #8]
 8007036:	b2ca      	uxtb	r2, r1
 8007038:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	3301      	adds	r3, #1
 800703e:	617b      	str	r3, [r7, #20]
 8007040:	697a      	ldr	r2, [r7, #20]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	429a      	cmp	r2, r3
 8007046:	dbf0      	blt.n	800702a <_read+0x12>
  }

  return len;
 8007048:	687b      	ldr	r3, [r7, #4]
}
 800704a:	4618      	mov	r0, r3
 800704c:	3718      	adds	r7, #24
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007052:	b580      	push	{r7, lr}
 8007054:	b086      	sub	sp, #24
 8007056:	af00      	add	r7, sp, #0
 8007058:	60f8      	str	r0, [r7, #12]
 800705a:	60b9      	str	r1, [r7, #8]
 800705c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800705e:	2300      	movs	r3, #0
 8007060:	617b      	str	r3, [r7, #20]
 8007062:	e009      	b.n	8007078 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	1c5a      	adds	r2, r3, #1
 8007068:	60ba      	str	r2, [r7, #8]
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	4618      	mov	r0, r3
 800706e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	3301      	adds	r3, #1
 8007076:	617b      	str	r3, [r7, #20]
 8007078:	697a      	ldr	r2, [r7, #20]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	429a      	cmp	r2, r3
 800707e:	dbf1      	blt.n	8007064 <_write+0x12>
  }
  return len;
 8007080:	687b      	ldr	r3, [r7, #4]
}
 8007082:	4618      	mov	r0, r3
 8007084:	3718      	adds	r7, #24
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <_close>:

int _close(int file)
{
 800708a:	b480      	push	{r7}
 800708c:	b083      	sub	sp, #12
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8007092:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007096:	4618      	mov	r0, r3
 8007098:	370c      	adds	r7, #12
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr

080070a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80070a2:	b480      	push	{r7}
 80070a4:	b083      	sub	sp, #12
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
 80070aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80070b2:	605a      	str	r2, [r3, #4]
  return 0;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	370c      	adds	r7, #12
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr

080070c2 <_isatty>:

int _isatty(int file)
{
 80070c2:	b480      	push	{r7}
 80070c4:	b083      	sub	sp, #12
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80070ca:	2301      	movs	r3, #1
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	370c      	adds	r7, #12
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80070d8:	b480      	push	{r7}
 80070da:	b085      	sub	sp, #20
 80070dc:	af00      	add	r7, sp, #0
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	60b9      	str	r1, [r7, #8]
 80070e2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3714      	adds	r7, #20
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr
	...

080070f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b086      	sub	sp, #24
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80070fc:	4a14      	ldr	r2, [pc, #80]	; (8007150 <_sbrk+0x5c>)
 80070fe:	4b15      	ldr	r3, [pc, #84]	; (8007154 <_sbrk+0x60>)
 8007100:	1ad3      	subs	r3, r2, r3
 8007102:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007108:	4b13      	ldr	r3, [pc, #76]	; (8007158 <_sbrk+0x64>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d102      	bne.n	8007116 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007110:	4b11      	ldr	r3, [pc, #68]	; (8007158 <_sbrk+0x64>)
 8007112:	4a12      	ldr	r2, [pc, #72]	; (800715c <_sbrk+0x68>)
 8007114:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007116:	4b10      	ldr	r3, [pc, #64]	; (8007158 <_sbrk+0x64>)
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4413      	add	r3, r2
 800711e:	693a      	ldr	r2, [r7, #16]
 8007120:	429a      	cmp	r2, r3
 8007122:	d207      	bcs.n	8007134 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007124:	f003 f838 	bl	800a198 <__errno>
 8007128:	4603      	mov	r3, r0
 800712a:	220c      	movs	r2, #12
 800712c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800712e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007132:	e009      	b.n	8007148 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007134:	4b08      	ldr	r3, [pc, #32]	; (8007158 <_sbrk+0x64>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800713a:	4b07      	ldr	r3, [pc, #28]	; (8007158 <_sbrk+0x64>)
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4413      	add	r3, r2
 8007142:	4a05      	ldr	r2, [pc, #20]	; (8007158 <_sbrk+0x64>)
 8007144:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007146:	68fb      	ldr	r3, [r7, #12]
}
 8007148:	4618      	mov	r0, r3
 800714a:	3718      	adds	r7, #24
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}
 8007150:	20030000 	.word	0x20030000
 8007154:	00000400 	.word	0x00000400
 8007158:	20000588 	.word	0x20000588
 800715c:	200005a8 	.word	0x200005a8

08007160 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007160:	b480      	push	{r7}
 8007162:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007164:	4b06      	ldr	r3, [pc, #24]	; (8007180 <SystemInit+0x20>)
 8007166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800716a:	4a05      	ldr	r2, [pc, #20]	; (8007180 <SystemInit+0x20>)
 800716c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007170:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007174:	bf00      	nop
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop
 8007180:	e000ed00 	.word	0xe000ed00

08007184 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 800718a:	f000 f9e1 	bl	8007550 <port_GetEXT_IRQStatus>
 800718e:	4603      	mov	r3, r0
 8007190:	607b      	str	r3, [r7, #4]

	if(s) {
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d001      	beq.n	800719c <decamutexon+0x18>
		port_DisableEXT_IRQ(); //disable the external interrupt line
 8007198:	f000 f9cc 	bl	8007534 <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 800719c:	687b      	ldr	r3, [r7, #4]
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3708      	adds	r7, #8
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b082      	sub	sp, #8
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d001      	beq.n	80071b8 <decamutexoff+0x12>
		port_EnableEXT_IRQ();
 80071b4:	f000 f9c5 	bl	8007542 <port_EnableEXT_IRQ>
	}
}
 80071b8:	bf00      	nop
 80071ba:	3708      	adds	r7, #8
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <deca_sleep>:
#include "sleep.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
	Sleep(time_ms);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 f8ed 	bl	80073a8 <Sleep>
}
 80071ce:	bf00      	nop
 80071d0:	3708      	adds	r7, #8
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
	...

080071d8 <writetospi>:
#pragma GCC optimize ("O3")
int writetospi(uint16_t headerLength,
               const    uint8_t *headerBuffer,
               uint32_t bodyLength,
               const    uint8_t *bodyBuffer)
{
 80071d8:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 80071dc:	4683      	mov	fp, r0
 80071de:	468a      	mov	sl, r1
 80071e0:	4690      	mov	r8, r2
 80071e2:	4699      	mov	r9, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 80071e4:	f7ff ffce 	bl	8007184 <decamutexon>

    while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY);
 80071e8:	4d14      	ldr	r5, [pc, #80]	; (800723c <writetospi+0x64>)
    stat = decamutexon() ;
 80071ea:	4606      	mov	r6, r0
    while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY);
 80071ec:	4628      	mov	r0, r5
 80071ee:	f001 fed7 	bl	8008fa0 <HAL_SPI_GetState>
 80071f2:	2801      	cmp	r0, #1
 80071f4:	4604      	mov	r4, r0
 80071f6:	d1f9      	bne.n	80071ec <writetospi+0x14>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 80071f8:	4811      	ldr	r0, [pc, #68]	; (8007240 <writetospi+0x68>)
 80071fa:	2200      	movs	r2, #0
 80071fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007200:	f000 fd60 	bl	8007cc4 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi3, (uint8_t *)&headerBuffer[0], headerLength, HAL_MAX_DELAY);    /* Send header in polling mode */
 8007204:	465a      	mov	r2, fp
 8007206:	4651      	mov	r1, sl
 8007208:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800720c:	480b      	ldr	r0, [pc, #44]	; (800723c <writetospi+0x64>)
 800720e:	f001 fade 	bl	80087ce <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi3, (uint8_t *)&bodyBuffer[0], bodyLength, HAL_MAX_DELAY);        /* Send data in polling mode */
 8007212:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007216:	4649      	mov	r1, r9
 8007218:	fa1f f288 	uxth.w	r2, r8
 800721c:	4807      	ldr	r0, [pc, #28]	; (800723c <writetospi+0x64>)
 800721e:	f001 fad6 	bl	80087ce <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 8007222:	4622      	mov	r2, r4
 8007224:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007228:	4805      	ldr	r0, [pc, #20]	; (8007240 <writetospi+0x68>)
 800722a:	f000 fd4b 	bl	8007cc4 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 800722e:	4630      	mov	r0, r6
 8007230:	f7ff ffb9 	bl	80071a6 <decamutexoff>

    return 0;
} // end writetospi()
 8007234:	2000      	movs	r0, #0
 8007236:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 800723a:	bf00      	nop
 800723c:	200004a4 	.word	0x200004a4
 8007240:	40020000 	.word	0x40020000

08007244 <readfromspi>:

int readfromspi(uint16_t headerLength,
				const uint8_t *headerBuffer,
				uint32_t readlength,
				uint8_t *readBuffer)
{
 8007244:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8007248:	b084      	sub	sp, #16
 800724a:	4605      	mov	r5, r0
 800724c:	468a      	mov	sl, r1
 800724e:	4691      	mov	r9, r2
 8007250:	4698      	mov	r8, r3
	int i;
	decaIrqStatus_t stat ;
	stat = decamutexon() ;
 8007252:	f7ff ff97 	bl	8007184 <decamutexon>
	char temp;

	/* Blocking: Check whether previous transfer has been finished */
	while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY);
 8007256:	4c1c      	ldr	r4, [pc, #112]	; (80072c8 <readfromspi+0x84>)
	stat = decamutexon() ;
 8007258:	4606      	mov	r6, r0
	while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY);
 800725a:	4620      	mov	r0, r4
 800725c:	f001 fea0 	bl	8008fa0 <HAL_SPI_GetState>
 8007260:	2801      	cmp	r0, #1
 8007262:	d1fa      	bne.n	800725a <readfromspi+0x16>

	HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8007264:	4819      	ldr	r0, [pc, #100]	; (80072cc <readfromspi+0x88>)
 8007266:	2200      	movs	r2, #0
 8007268:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800726c:	f000 fd2a 	bl	8007cc4 <HAL_GPIO_WritePin>

	/* Send header */
	for(i=0; i<headerLength; i++)
 8007270:	b195      	cbz	r5, 8007298 <readfromspi+0x54>
 8007272:	4654      	mov	r4, sl
 8007274:	4455      	add	r5, sl
	{
		//HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
		HAL_SPI_TransmitReceive(&hspi3, &headerBuffer[i], (uint8_t *)&temp, 1, HAL_MAX_DELAY);
 8007276:	f8df a050 	ldr.w	sl, [pc, #80]	; 80072c8 <readfromspi+0x84>
 800727a:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800727e:	2301      	movs	r3, #1
 8007280:	4621      	mov	r1, r4
 8007282:	f8cd b000 	str.w	fp, [sp]
	for(i=0; i<headerLength; i++)
 8007286:	441c      	add	r4, r3
		HAL_SPI_TransmitReceive(&hspi3, &headerBuffer[i], (uint8_t *)&temp, 1, HAL_MAX_DELAY);
 8007288:	f10d 020f 	add.w	r2, sp, #15
 800728c:	4650      	mov	r0, sl
 800728e:	f001 fbda 	bl	8008a46 <HAL_SPI_TransmitReceive>
	for(i=0; i<headerLength; i++)
 8007292:	42ac      	cmp	r4, r5
 8007294:	d1f3      	bne.n	800727e <readfromspi+0x3a>
	}

	/* for the data buffer use LL functions directly as the HAL SPI read function
	 * has issue reading single bytes */
	HAL_SPI_TransmitReceive(&hspi3, &headerBuffer[i], (uint8_t *)readBuffer, readlength, HAL_MAX_DELAY);
 8007296:	46a2      	mov	sl, r4
 8007298:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800729c:	fa1f f389 	uxth.w	r3, r9
 80072a0:	4642      	mov	r2, r8
 80072a2:	4651      	mov	r1, sl
 80072a4:	9400      	str	r4, [sp, #0]
 80072a6:	4808      	ldr	r0, [pc, #32]	; (80072c8 <readfromspi+0x84>)
 80072a8:	f001 fbcd 	bl	8008a46 <HAL_SPI_TransmitReceive>

	HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 80072ac:	2201      	movs	r2, #1
 80072ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80072b2:	4806      	ldr	r0, [pc, #24]	; (80072cc <readfromspi+0x88>)
 80072b4:	f000 fd06 	bl	8007cc4 <HAL_GPIO_WritePin>

	decamutexoff(stat);
 80072b8:	4630      	mov	r0, r6
 80072ba:	f7ff ff74 	bl	80071a6 <decamutexoff>

	return 0;

} // end readfromspi()
 80072be:	2000      	movs	r0, #0
 80072c0:	b004      	add	sp, #16
 80072c2:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 80072c6:	bf00      	nop
 80072c8:	200004a4 	.word	0x200004a4
 80072cc:	40020000 	.word	0x40020000

080072d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	4603      	mov	r3, r0
 80072d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80072da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	db0b      	blt.n	80072fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80072e2:	79fb      	ldrb	r3, [r7, #7]
 80072e4:	f003 021f 	and.w	r2, r3, #31
 80072e8:	4907      	ldr	r1, [pc, #28]	; (8007308 <__NVIC_EnableIRQ+0x38>)
 80072ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072ee:	095b      	lsrs	r3, r3, #5
 80072f0:	2001      	movs	r0, #1
 80072f2:	fa00 f202 	lsl.w	r2, r0, r2
 80072f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80072fa:	bf00      	nop
 80072fc:	370c      	adds	r7, #12
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr
 8007306:	bf00      	nop
 8007308:	e000e100 	.word	0xe000e100

0800730c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	4603      	mov	r3, r0
 8007314:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800731a:	2b00      	cmp	r3, #0
 800731c:	db12      	blt.n	8007344 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800731e:	79fb      	ldrb	r3, [r7, #7]
 8007320:	f003 021f 	and.w	r2, r3, #31
 8007324:	490a      	ldr	r1, [pc, #40]	; (8007350 <__NVIC_DisableIRQ+0x44>)
 8007326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800732a:	095b      	lsrs	r3, r3, #5
 800732c:	2001      	movs	r0, #1
 800732e:	fa00 f202 	lsl.w	r2, r0, r2
 8007332:	3320      	adds	r3, #32
 8007334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007338:	f3bf 8f4f 	dsb	sy
}
 800733c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800733e:	f3bf 8f6f 	isb	sy
}
 8007342:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8007344:	bf00      	nop
 8007346:	370c      	adds	r7, #12
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr
 8007350:	e000e100 	.word	0xe000e100

08007354 <usleep>:
/* @fn    usleep
 * @brief precise usleep() delay
 * */
#pragma GCC optimize ("O0")
int usleep(useconds_t usec)
{
 8007354:	b480      	push	{r7}
 8007356:	b085      	sub	sp, #20
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
    int i,j;
#pragma GCC ivdep
    for(i=0;i<usec;i++)
 800735c:	2300      	movs	r3, #0
 800735e:	60fb      	str	r3, [r7, #12]
 8007360:	e012      	b.n	8007388 <usleep+0x34>
    {
#pragma GCC ivdep
        for(j=0;j<2;j++)
 8007362:	2300      	movs	r3, #0
 8007364:	60bb      	str	r3, [r7, #8]
 8007366:	e004      	b.n	8007372 <usleep+0x1e>
        {
            __NOP();
 8007368:	bf00      	nop
            __NOP();
 800736a:	bf00      	nop
        for(j=0;j<2;j++)
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	3301      	adds	r3, #1
 8007370:	60bb      	str	r3, [r7, #8]
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	2b01      	cmp	r3, #1
 8007376:	bfd4      	ite	le
 8007378:	2301      	movle	r3, #1
 800737a:	2300      	movgt	r3, #0
 800737c:	b2db      	uxtb	r3, r3
 800737e:	2b00      	cmp	r3, #0
 8007380:	d1f2      	bne.n	8007368 <usleep+0x14>
    for(i=0;i<usec;i++)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	3301      	adds	r3, #1
 8007386:	60fb      	str	r3, [r7, #12]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	429a      	cmp	r2, r3
 800738e:	bf8c      	ite	hi
 8007390:	2301      	movhi	r3, #1
 8007392:	2300      	movls	r3, #0
 8007394:	b2db      	uxtb	r3, r3
 8007396:	2b00      	cmp	r3, #0
 8007398:	d1e3      	bne.n	8007362 <usleep+0xe>
        }
    }
    return 0;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	3714      	adds	r7, #20
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 f969 	bl	8007688 <HAL_Delay>
}
 80073b6:	bf00      	nop
 80073b8:	3708      	adds	r7, #8
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
	...

080073c0 <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
    return ((NVIC->ISER[(((uint32_t)x) >> 5UL)] &\
 80073c8:	4a0b      	ldr	r2, [pc, #44]	; (80073f8 <EXTI_GetITEnStatus+0x38>)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	095b      	lsrs	r3, r3, #5
 80073ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            (uint32_t)(1UL << (((uint32_t)x) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f003 031f 	and.w	r3, r3, #31
 80073d8:	fa22 f303 	lsr.w	r3, r2, r3
 80073dc:	f003 0301 	and.w	r3, r3, #1
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	bf14      	ite	ne
 80073e4:	2301      	movne	r3, #1
 80073e6:	2300      	moveq	r3, #0
 80073e8:	b2db      	uxtb	r3, r3
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	370c      	adds	r7, #12
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr
 80073f6:	bf00      	nop
 80073f8:	e000e100 	.word	0xe000e100

080073fc <reset_DW1000>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW1000 by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b086      	sub	sp, #24
 8007400:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef    GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RESET_Pin;
 8007402:	2301      	movs	r3, #1
 8007404:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8007406:	2311      	movs	r3, #17
 8007408:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800740a:	2300      	movs	r3, #0
 800740c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 800740e:	1d3b      	adds	r3, r7, #4
 8007410:	4619      	mov	r1, r3
 8007412:	480a      	ldr	r0, [pc, #40]	; (800743c <reset_DW1000+0x40>)
 8007414:	f000 fa92 	bl	800793c <HAL_GPIO_Init>

    //drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_RESET);
 8007418:	2200      	movs	r2, #0
 800741a:	2101      	movs	r1, #1
 800741c:	4807      	ldr	r0, [pc, #28]	; (800743c <reset_DW1000+0x40>)
 800741e:	f000 fc51 	bl	8007cc4 <HAL_GPIO_WritePin>

    usleep(1);
 8007422:	2001      	movs	r0, #1
 8007424:	f7ff ff96 	bl	8007354 <usleep>

    //put the pin back to output open-drain (not active)
    setup_DW1000RSTnIRQ(0);
 8007428:	2000      	movs	r0, #0
 800742a:	f000 f809 	bl	8007440 <setup_DW1000RSTnIRQ>



    Sleep(2);
 800742e:	2002      	movs	r0, #2
 8007430:	f7ff ffba 	bl	80073a8 <Sleep>
}
 8007434:	bf00      	nop
 8007436:	3718      	adds	r7, #24
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}
 800743c:	40020c00 	.word	0x40020c00

08007440 <setup_DW1000RSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI0 IRQ
 * */
void setup_DW1000RSTnIRQ(int enable)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b088      	sub	sp, #32
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if(enable)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d015      	beq.n	800747a <setup_DW1000RSTnIRQ+0x3a>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 800744e:	2301      	movs	r3, #1
 8007450:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007452:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8007456:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007458:	2300      	movs	r3, #0
 800745a:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 800745c:	f107 030c 	add.w	r3, r7, #12
 8007460:	4619      	mov	r1, r3
 8007462:	4813      	ldr	r0, [pc, #76]	; (80074b0 <setup_DW1000RSTnIRQ+0x70>)
 8007464:	f000 fa6a 	bl	800793c <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI0_IRQn);     //pin #0 -> EXTI #0
 8007468:	2006      	movs	r0, #6
 800746a:	f000 fa29 	bl	80078c0 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800746e:	2200      	movs	r2, #0
 8007470:	2105      	movs	r1, #5
 8007472:	2006      	movs	r0, #6
 8007474:	f000 fa08 	bl	8007888 <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
    }
}
 8007478:	e015      	b.n	80074a6 <setup_DW1000RSTnIRQ+0x66>
        HAL_NVIC_DisableIRQ(EXTI0_IRQn);    //pin #0 -> EXTI #0
 800747a:	2006      	movs	r0, #6
 800747c:	f000 fa2e 	bl	80078dc <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 8007480:	2301      	movs	r3, #1
 8007482:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8007484:	2311      	movs	r3, #17
 8007486:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007488:	2300      	movs	r3, #0
 800748a:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800748c:	2302      	movs	r3, #2
 800748e:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8007490:	f107 030c 	add.w	r3, r7, #12
 8007494:	4619      	mov	r1, r3
 8007496:	4806      	ldr	r0, [pc, #24]	; (80074b0 <setup_DW1000RSTnIRQ+0x70>)
 8007498:	f000 fa50 	bl	800793c <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
 800749c:	2201      	movs	r2, #1
 800749e:	2101      	movs	r1, #1
 80074a0:	4803      	ldr	r0, [pc, #12]	; (80074b0 <setup_DW1000RSTnIRQ+0x70>)
 80074a2:	f000 fc0f 	bl	8007cc4 <HAL_GPIO_WritePin>
}
 80074a6:	bf00      	nop
 80074a8:	3720      	adds	r7, #32
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	40020c00 	.word	0x40020c00

080074b4 <port_set_dw1000_slowrate>:
/* @fn      port_set_dw1000_slowrate
 * @brief   set 2.25MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_slowrate(void)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	af00      	add	r7, sp, #0
    hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80074b8:	4b03      	ldr	r3, [pc, #12]	; (80074c8 <port_set_dw1000_slowrate+0x14>)
 80074ba:	2238      	movs	r2, #56	; 0x38
 80074bc:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi3);
 80074be:	4802      	ldr	r0, [pc, #8]	; (80074c8 <port_set_dw1000_slowrate+0x14>)
 80074c0:	f001 f8fc 	bl	80086bc <HAL_SPI_Init>
}
 80074c4:	bf00      	nop
 80074c6:	bd80      	pop	{r7, pc}
 80074c8:	200004a4 	.word	0x200004a4

080074cc <port_set_dw1000_fastrate>:
/* @fn      port_set_dw1000_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_fastrate(void)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	af00      	add	r7, sp, #0
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80074d0:	4b03      	ldr	r3, [pc, #12]	; (80074e0 <port_set_dw1000_fastrate+0x14>)
 80074d2:	2208      	movs	r2, #8
 80074d4:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi3);
 80074d6:	4802      	ldr	r0, [pc, #8]	; (80074e0 <port_set_dw1000_fastrate+0x14>)
 80074d8:	f001 f8f0 	bl	80086bc <HAL_SPI_Init>
}
 80074dc:	bf00      	nop
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	200004a4 	.word	0x200004a4

080074e4 <HAL_GPIO_EXTI_Callback>:
/* @fn      HAL_GPIO_EXTI_Callback
 * @brief   IRQ HAL call-back for all EXTI configured lines
 *          i.e. DW_RESET_Pin and DW_IRQn_Pin
 * */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	4603      	mov	r3, r0
 80074ec:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == DW_RESET_Pin)
 80074ee:	88fb      	ldrh	r3, [r7, #6]
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d103      	bne.n	80074fc <HAL_GPIO_EXTI_Callback+0x18>
    {
        signalResetDone = 1;
 80074f4:	4b06      	ldr	r3, [pc, #24]	; (8007510 <HAL_GPIO_EXTI_Callback+0x2c>)
 80074f6:	2201      	movs	r2, #1
 80074f8:	601a      	str	r2, [r3, #0]
        process_deca_irq();
    }
    else
    {
    }
}
 80074fa:	e004      	b.n	8007506 <HAL_GPIO_EXTI_Callback+0x22>
    else if (GPIO_Pin == DW_IRQn_Pin)
 80074fc:	88fb      	ldrh	r3, [r7, #6]
 80074fe:	2b02      	cmp	r3, #2
 8007500:	d101      	bne.n	8007506 <HAL_GPIO_EXTI_Callback+0x22>
        process_deca_irq();
 8007502:	f000 f807 	bl	8007514 <process_deca_irq>
}
 8007506:	bf00      	nop
 8007508:	3708      	adds	r7, #8
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	2000058c 	.word	0x2000058c

08007514 <process_deca_irq>:
 * @brief   main call-back for processing of DW1000 IRQ
 *          it re-enters the IRQ routing and processes all events.
 *          After processing of all events, DW1000 will clear the IRQ line.
 * */
__INLINE void process_deca_irq(void)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	af00      	add	r7, sp, #0
    while(port_CheckEXT_IRQ() != 0)
 8007518:	e002      	b.n	8007520 <process_deca_irq+0xc>
    {

        port_deca_isr();
 800751a:	4b05      	ldr	r3, [pc, #20]	; (8007530 <process_deca_irq+0x1c>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4798      	blx	r3
    while(port_CheckEXT_IRQ() != 0)
 8007520:	f000 f81e 	bl	8007560 <port_CheckEXT_IRQ>
 8007524:	4603      	mov	r3, r0
 8007526:	2b00      	cmp	r3, #0
 8007528:	d1f7      	bne.n	800751a <process_deca_irq+0x6>

    } //while DW1000 IRQ line active
}
 800752a:	bf00      	nop
 800752c:	bf00      	nop
 800752e:	bd80      	pop	{r7, pc}
 8007530:	20000590 	.word	0x20000590

08007534 <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 8007538:	2017      	movs	r0, #23
 800753a:	f7ff fee7 	bl	800730c <__NVIC_DisableIRQ>
}
 800753e:	bf00      	nop
 8007540:	bd80      	pop	{r7, pc}

08007542 <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 8007542:	b580      	push	{r7, lr}
 8007544:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 8007546:	2017      	movs	r0, #23
 8007548:	f7ff fec2 	bl	80072d0 <__NVIC_EnableIRQ>
}
 800754c:	bf00      	nop
 800754e:	bd80      	pop	{r7, pc}

08007550 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 8007554:	2017      	movs	r0, #23
 8007556:	f7ff ff33 	bl	80073c0 <EXTI_GetITEnStatus>
 800755a:	4603      	mov	r3, r0
}
 800755c:	4618      	mov	r0, r3
 800755e:	bd80      	pop	{r7, pc}

08007560 <port_CheckEXT_IRQ>:

/* @fn      port_CheckEXT_IRQ
 * @brief   wrapper to read DW_IRQ input pin state
 * */
__INLINE uint32_t port_CheckEXT_IRQ(void)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(DECAIRQ_GPIO, DW_IRQn_Pin);
 8007564:	2102      	movs	r1, #2
 8007566:	4803      	ldr	r0, [pc, #12]	; (8007574 <port_CheckEXT_IRQ+0x14>)
 8007568:	f000 fb94 	bl	8007c94 <HAL_GPIO_ReadPin>
 800756c:	4603      	mov	r3, r0
}
 800756e:	4618      	mov	r0, r3
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop
 8007574:	40020c00 	.word	0x40020c00

08007578 <port_set_deca_isr>:
 * @param deca_isr function pointer to DW1000 interrupt handler to install
 *
 * @return none
 */
void port_set_deca_isr(port_deca_isr_t deca_isr)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
    /* Check DW1000 IRQ activation status. */
    ITStatus en = port_GetEXT_IRQStatus();
 8007580:	f7ff ffe6 	bl	8007550 <port_GetEXT_IRQStatus>
 8007584:	4603      	mov	r3, r0
 8007586:	73fb      	strb	r3, [r7, #15]

    /* If needed, deactivate DW1000 IRQ during the installation of the new handler. */
    if (en)
 8007588:	7bfb      	ldrb	r3, [r7, #15]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d001      	beq.n	8007592 <port_set_deca_isr+0x1a>
    {
        port_DisableEXT_IRQ();
 800758e:	f7ff ffd1 	bl	8007534 <port_DisableEXT_IRQ>
    }
    port_deca_isr = deca_isr;
 8007592:	4a06      	ldr	r2, [pc, #24]	; (80075ac <port_set_deca_isr+0x34>)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6013      	str	r3, [r2, #0]
    if (en)
 8007598:	7bfb      	ldrb	r3, [r7, #15]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d001      	beq.n	80075a2 <port_set_deca_isr+0x2a>
    {
        port_EnableEXT_IRQ();
 800759e:	f7ff ffd0 	bl	8007542 <port_EnableEXT_IRQ>
    }
}
 80075a2:	bf00      	nop
 80075a4:	3710      	adds	r7, #16
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	20000590 	.word	0x20000590

080075b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80075b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80075e8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80075b4:	480d      	ldr	r0, [pc, #52]	; (80075ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80075b6:	490e      	ldr	r1, [pc, #56]	; (80075f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80075b8:	4a0e      	ldr	r2, [pc, #56]	; (80075f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80075ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80075bc:	e002      	b.n	80075c4 <LoopCopyDataInit>

080075be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80075be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80075c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80075c2:	3304      	adds	r3, #4

080075c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80075c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80075c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80075c8:	d3f9      	bcc.n	80075be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80075ca:	4a0b      	ldr	r2, [pc, #44]	; (80075f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80075cc:	4c0b      	ldr	r4, [pc, #44]	; (80075fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80075ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80075d0:	e001      	b.n	80075d6 <LoopFillZerobss>

080075d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80075d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80075d4:	3204      	adds	r2, #4

080075d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80075d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80075d8:	d3fb      	bcc.n	80075d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80075da:	f7ff fdc1 	bl	8007160 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80075de:	f002 fde1 	bl	800a1a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80075e2:	f7ff f9f5 	bl	80069d0 <main>
  bx  lr    
 80075e6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80075e8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80075ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80075f0:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 80075f4:	0800d6b4 	.word	0x0800d6b4
  ldr r2, =_sbss
 80075f8:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 80075fc:	200005a8 	.word	0x200005a8

08007600 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007600:	e7fe      	b.n	8007600 <ADC_IRQHandler>
	...

08007604 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007608:	4b0e      	ldr	r3, [pc, #56]	; (8007644 <HAL_Init+0x40>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a0d      	ldr	r2, [pc, #52]	; (8007644 <HAL_Init+0x40>)
 800760e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007612:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007614:	4b0b      	ldr	r3, [pc, #44]	; (8007644 <HAL_Init+0x40>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a0a      	ldr	r2, [pc, #40]	; (8007644 <HAL_Init+0x40>)
 800761a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800761e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007620:	4b08      	ldr	r3, [pc, #32]	; (8007644 <HAL_Init+0x40>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a07      	ldr	r2, [pc, #28]	; (8007644 <HAL_Init+0x40>)
 8007626:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800762a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800762c:	2003      	movs	r0, #3
 800762e:	f000 f920 	bl	8007872 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007632:	2000      	movs	r0, #0
 8007634:	f7ff fc14 	bl	8006e60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007638:	f7ff fb52 	bl	8006ce0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	bd80      	pop	{r7, pc}
 8007642:	bf00      	nop
 8007644:	40023c00 	.word	0x40023c00

08007648 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007648:	b480      	push	{r7}
 800764a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800764c:	4b06      	ldr	r3, [pc, #24]	; (8007668 <HAL_IncTick+0x20>)
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	461a      	mov	r2, r3
 8007652:	4b06      	ldr	r3, [pc, #24]	; (800766c <HAL_IncTick+0x24>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4413      	add	r3, r2
 8007658:	4a04      	ldr	r2, [pc, #16]	; (800766c <HAL_IncTick+0x24>)
 800765a:	6013      	str	r3, [r2, #0]
}
 800765c:	bf00      	nop
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr
 8007666:	bf00      	nop
 8007668:	20000040 	.word	0x20000040
 800766c:	20000594 	.word	0x20000594

08007670 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007670:	b480      	push	{r7}
 8007672:	af00      	add	r7, sp, #0
  return uwTick;
 8007674:	4b03      	ldr	r3, [pc, #12]	; (8007684 <HAL_GetTick+0x14>)
 8007676:	681b      	ldr	r3, [r3, #0]
}
 8007678:	4618      	mov	r0, r3
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr
 8007682:	bf00      	nop
 8007684:	20000594 	.word	0x20000594

08007688 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007690:	f7ff ffee 	bl	8007670 <HAL_GetTick>
 8007694:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076a0:	d005      	beq.n	80076ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80076a2:	4b0a      	ldr	r3, [pc, #40]	; (80076cc <HAL_Delay+0x44>)
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	461a      	mov	r2, r3
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	4413      	add	r3, r2
 80076ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80076ae:	bf00      	nop
 80076b0:	f7ff ffde 	bl	8007670 <HAL_GetTick>
 80076b4:	4602      	mov	r2, r0
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	1ad3      	subs	r3, r2, r3
 80076ba:	68fa      	ldr	r2, [r7, #12]
 80076bc:	429a      	cmp	r2, r3
 80076be:	d8f7      	bhi.n	80076b0 <HAL_Delay+0x28>
  {
  }
}
 80076c0:	bf00      	nop
 80076c2:	bf00      	nop
 80076c4:	3710      	adds	r7, #16
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	20000040 	.word	0x20000040

080076d0 <__NVIC_SetPriorityGrouping>:
{
 80076d0:	b480      	push	{r7}
 80076d2:	b085      	sub	sp, #20
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f003 0307 	and.w	r3, r3, #7
 80076de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80076e0:	4b0c      	ldr	r3, [pc, #48]	; (8007714 <__NVIC_SetPriorityGrouping+0x44>)
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80076e6:	68ba      	ldr	r2, [r7, #8]
 80076e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80076ec:	4013      	ands	r3, r2
 80076ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80076f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80076fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007700:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007702:	4a04      	ldr	r2, [pc, #16]	; (8007714 <__NVIC_SetPriorityGrouping+0x44>)
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	60d3      	str	r3, [r2, #12]
}
 8007708:	bf00      	nop
 800770a:	3714      	adds	r7, #20
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr
 8007714:	e000ed00 	.word	0xe000ed00

08007718 <__NVIC_GetPriorityGrouping>:
{
 8007718:	b480      	push	{r7}
 800771a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800771c:	4b04      	ldr	r3, [pc, #16]	; (8007730 <__NVIC_GetPriorityGrouping+0x18>)
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	0a1b      	lsrs	r3, r3, #8
 8007722:	f003 0307 	and.w	r3, r3, #7
}
 8007726:	4618      	mov	r0, r3
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr
 8007730:	e000ed00 	.word	0xe000ed00

08007734 <__NVIC_EnableIRQ>:
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	4603      	mov	r3, r0
 800773c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800773e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007742:	2b00      	cmp	r3, #0
 8007744:	db0b      	blt.n	800775e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007746:	79fb      	ldrb	r3, [r7, #7]
 8007748:	f003 021f 	and.w	r2, r3, #31
 800774c:	4907      	ldr	r1, [pc, #28]	; (800776c <__NVIC_EnableIRQ+0x38>)
 800774e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007752:	095b      	lsrs	r3, r3, #5
 8007754:	2001      	movs	r0, #1
 8007756:	fa00 f202 	lsl.w	r2, r0, r2
 800775a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800775e:	bf00      	nop
 8007760:	370c      	adds	r7, #12
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr
 800776a:	bf00      	nop
 800776c:	e000e100 	.word	0xe000e100

08007770 <__NVIC_DisableIRQ>:
{
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	4603      	mov	r3, r0
 8007778:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800777a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800777e:	2b00      	cmp	r3, #0
 8007780:	db12      	blt.n	80077a8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007782:	79fb      	ldrb	r3, [r7, #7]
 8007784:	f003 021f 	and.w	r2, r3, #31
 8007788:	490a      	ldr	r1, [pc, #40]	; (80077b4 <__NVIC_DisableIRQ+0x44>)
 800778a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800778e:	095b      	lsrs	r3, r3, #5
 8007790:	2001      	movs	r0, #1
 8007792:	fa00 f202 	lsl.w	r2, r0, r2
 8007796:	3320      	adds	r3, #32
 8007798:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800779c:	f3bf 8f4f 	dsb	sy
}
 80077a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80077a2:	f3bf 8f6f 	isb	sy
}
 80077a6:	bf00      	nop
}
 80077a8:	bf00      	nop
 80077aa:	370c      	adds	r7, #12
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr
 80077b4:	e000e100 	.word	0xe000e100

080077b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
 80077be:	4603      	mov	r3, r0
 80077c0:	6039      	str	r1, [r7, #0]
 80077c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80077c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	db0a      	blt.n	80077e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	b2da      	uxtb	r2, r3
 80077d0:	490c      	ldr	r1, [pc, #48]	; (8007804 <__NVIC_SetPriority+0x4c>)
 80077d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077d6:	0112      	lsls	r2, r2, #4
 80077d8:	b2d2      	uxtb	r2, r2
 80077da:	440b      	add	r3, r1
 80077dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80077e0:	e00a      	b.n	80077f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	b2da      	uxtb	r2, r3
 80077e6:	4908      	ldr	r1, [pc, #32]	; (8007808 <__NVIC_SetPriority+0x50>)
 80077e8:	79fb      	ldrb	r3, [r7, #7]
 80077ea:	f003 030f 	and.w	r3, r3, #15
 80077ee:	3b04      	subs	r3, #4
 80077f0:	0112      	lsls	r2, r2, #4
 80077f2:	b2d2      	uxtb	r2, r2
 80077f4:	440b      	add	r3, r1
 80077f6:	761a      	strb	r2, [r3, #24]
}
 80077f8:	bf00      	nop
 80077fa:	370c      	adds	r7, #12
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr
 8007804:	e000e100 	.word	0xe000e100
 8007808:	e000ed00 	.word	0xe000ed00

0800780c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800780c:	b480      	push	{r7}
 800780e:	b089      	sub	sp, #36	; 0x24
 8007810:	af00      	add	r7, sp, #0
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f003 0307 	and.w	r3, r3, #7
 800781e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	f1c3 0307 	rsb	r3, r3, #7
 8007826:	2b04      	cmp	r3, #4
 8007828:	bf28      	it	cs
 800782a:	2304      	movcs	r3, #4
 800782c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	3304      	adds	r3, #4
 8007832:	2b06      	cmp	r3, #6
 8007834:	d902      	bls.n	800783c <NVIC_EncodePriority+0x30>
 8007836:	69fb      	ldr	r3, [r7, #28]
 8007838:	3b03      	subs	r3, #3
 800783a:	e000      	b.n	800783e <NVIC_EncodePriority+0x32>
 800783c:	2300      	movs	r3, #0
 800783e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007840:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007844:	69bb      	ldr	r3, [r7, #24]
 8007846:	fa02 f303 	lsl.w	r3, r2, r3
 800784a:	43da      	mvns	r2, r3
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	401a      	ands	r2, r3
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007854:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	fa01 f303 	lsl.w	r3, r1, r3
 800785e:	43d9      	mvns	r1, r3
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007864:	4313      	orrs	r3, r2
         );
}
 8007866:	4618      	mov	r0, r3
 8007868:	3724      	adds	r7, #36	; 0x24
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr

08007872 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007872:	b580      	push	{r7, lr}
 8007874:	b082      	sub	sp, #8
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f7ff ff28 	bl	80076d0 <__NVIC_SetPriorityGrouping>
}
 8007880:	bf00      	nop
 8007882:	3708      	adds	r7, #8
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007888:	b580      	push	{r7, lr}
 800788a:	b086      	sub	sp, #24
 800788c:	af00      	add	r7, sp, #0
 800788e:	4603      	mov	r3, r0
 8007890:	60b9      	str	r1, [r7, #8]
 8007892:	607a      	str	r2, [r7, #4]
 8007894:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007896:	2300      	movs	r3, #0
 8007898:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800789a:	f7ff ff3d 	bl	8007718 <__NVIC_GetPriorityGrouping>
 800789e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80078a0:	687a      	ldr	r2, [r7, #4]
 80078a2:	68b9      	ldr	r1, [r7, #8]
 80078a4:	6978      	ldr	r0, [r7, #20]
 80078a6:	f7ff ffb1 	bl	800780c <NVIC_EncodePriority>
 80078aa:	4602      	mov	r2, r0
 80078ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078b0:	4611      	mov	r1, r2
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7ff ff80 	bl	80077b8 <__NVIC_SetPriority>
}
 80078b8:	bf00      	nop
 80078ba:	3718      	adds	r7, #24
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b082      	sub	sp, #8
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	4603      	mov	r3, r0
 80078c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80078ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078ce:	4618      	mov	r0, r3
 80078d0:	f7ff ff30 	bl	8007734 <__NVIC_EnableIRQ>
}
 80078d4:	bf00      	nop
 80078d6:	3708      	adds	r7, #8
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b082      	sub	sp, #8
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	4603      	mov	r3, r0
 80078e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80078e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078ea:	4618      	mov	r0, r3
 80078ec:	f7ff ff40 	bl	8007770 <__NVIC_DisableIRQ>
}
 80078f0:	bf00      	nop
 80078f2:	3708      	adds	r7, #8
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007906:	b2db      	uxtb	r3, r3
 8007908:	2b02      	cmp	r3, #2
 800790a:	d004      	beq.n	8007916 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2280      	movs	r2, #128	; 0x80
 8007910:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	e00c      	b.n	8007930 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2205      	movs	r2, #5
 800791a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f022 0201 	bic.w	r2, r2, #1
 800792c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800792e:	2300      	movs	r3, #0
}
 8007930:	4618      	mov	r0, r3
 8007932:	370c      	adds	r7, #12
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800793c:	b480      	push	{r7}
 800793e:	b089      	sub	sp, #36	; 0x24
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007946:	2300      	movs	r3, #0
 8007948:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800794a:	2300      	movs	r3, #0
 800794c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800794e:	2300      	movs	r3, #0
 8007950:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007952:	2300      	movs	r3, #0
 8007954:	61fb      	str	r3, [r7, #28]
 8007956:	e177      	b.n	8007c48 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007958:	2201      	movs	r2, #1
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	fa02 f303 	lsl.w	r3, r2, r3
 8007960:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	697a      	ldr	r2, [r7, #20]
 8007968:	4013      	ands	r3, r2
 800796a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800796c:	693a      	ldr	r2, [r7, #16]
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	429a      	cmp	r2, r3
 8007972:	f040 8166 	bne.w	8007c42 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	f003 0303 	and.w	r3, r3, #3
 800797e:	2b01      	cmp	r3, #1
 8007980:	d005      	beq.n	800798e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800798a:	2b02      	cmp	r3, #2
 800798c:	d130      	bne.n	80079f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007994:	69fb      	ldr	r3, [r7, #28]
 8007996:	005b      	lsls	r3, r3, #1
 8007998:	2203      	movs	r2, #3
 800799a:	fa02 f303 	lsl.w	r3, r2, r3
 800799e:	43db      	mvns	r3, r3
 80079a0:	69ba      	ldr	r2, [r7, #24]
 80079a2:	4013      	ands	r3, r2
 80079a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	68da      	ldr	r2, [r3, #12]
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	005b      	lsls	r3, r3, #1
 80079ae:	fa02 f303 	lsl.w	r3, r2, r3
 80079b2:	69ba      	ldr	r2, [r7, #24]
 80079b4:	4313      	orrs	r3, r2
 80079b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	69ba      	ldr	r2, [r7, #24]
 80079bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80079c4:	2201      	movs	r2, #1
 80079c6:	69fb      	ldr	r3, [r7, #28]
 80079c8:	fa02 f303 	lsl.w	r3, r2, r3
 80079cc:	43db      	mvns	r3, r3
 80079ce:	69ba      	ldr	r2, [r7, #24]
 80079d0:	4013      	ands	r3, r2
 80079d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	091b      	lsrs	r3, r3, #4
 80079da:	f003 0201 	and.w	r2, r3, #1
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	fa02 f303 	lsl.w	r3, r2, r3
 80079e4:	69ba      	ldr	r2, [r7, #24]
 80079e6:	4313      	orrs	r3, r2
 80079e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	69ba      	ldr	r2, [r7, #24]
 80079ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	f003 0303 	and.w	r3, r3, #3
 80079f8:	2b03      	cmp	r3, #3
 80079fa:	d017      	beq.n	8007a2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	005b      	lsls	r3, r3, #1
 8007a06:	2203      	movs	r2, #3
 8007a08:	fa02 f303 	lsl.w	r3, r2, r3
 8007a0c:	43db      	mvns	r3, r3
 8007a0e:	69ba      	ldr	r2, [r7, #24]
 8007a10:	4013      	ands	r3, r2
 8007a12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	689a      	ldr	r2, [r3, #8]
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	005b      	lsls	r3, r3, #1
 8007a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a20:	69ba      	ldr	r2, [r7, #24]
 8007a22:	4313      	orrs	r3, r2
 8007a24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	69ba      	ldr	r2, [r7, #24]
 8007a2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	f003 0303 	and.w	r3, r3, #3
 8007a34:	2b02      	cmp	r3, #2
 8007a36:	d123      	bne.n	8007a80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007a38:	69fb      	ldr	r3, [r7, #28]
 8007a3a:	08da      	lsrs	r2, r3, #3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	3208      	adds	r2, #8
 8007a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007a46:	69fb      	ldr	r3, [r7, #28]
 8007a48:	f003 0307 	and.w	r3, r3, #7
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	220f      	movs	r2, #15
 8007a50:	fa02 f303 	lsl.w	r3, r2, r3
 8007a54:	43db      	mvns	r3, r3
 8007a56:	69ba      	ldr	r2, [r7, #24]
 8007a58:	4013      	ands	r3, r2
 8007a5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	691a      	ldr	r2, [r3, #16]
 8007a60:	69fb      	ldr	r3, [r7, #28]
 8007a62:	f003 0307 	and.w	r3, r3, #7
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	fa02 f303 	lsl.w	r3, r2, r3
 8007a6c:	69ba      	ldr	r2, [r7, #24]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	08da      	lsrs	r2, r3, #3
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	3208      	adds	r2, #8
 8007a7a:	69b9      	ldr	r1, [r7, #24]
 8007a7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007a86:	69fb      	ldr	r3, [r7, #28]
 8007a88:	005b      	lsls	r3, r3, #1
 8007a8a:	2203      	movs	r2, #3
 8007a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a90:	43db      	mvns	r3, r3
 8007a92:	69ba      	ldr	r2, [r7, #24]
 8007a94:	4013      	ands	r3, r2
 8007a96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	f003 0203 	and.w	r2, r3, #3
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	005b      	lsls	r3, r3, #1
 8007aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8007aa8:	69ba      	ldr	r2, [r7, #24]
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	69ba      	ldr	r2, [r7, #24]
 8007ab2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	f000 80c0 	beq.w	8007c42 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	60fb      	str	r3, [r7, #12]
 8007ac6:	4b66      	ldr	r3, [pc, #408]	; (8007c60 <HAL_GPIO_Init+0x324>)
 8007ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aca:	4a65      	ldr	r2, [pc, #404]	; (8007c60 <HAL_GPIO_Init+0x324>)
 8007acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8007ad2:	4b63      	ldr	r3, [pc, #396]	; (8007c60 <HAL_GPIO_Init+0x324>)
 8007ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ada:	60fb      	str	r3, [r7, #12]
 8007adc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007ade:	4a61      	ldr	r2, [pc, #388]	; (8007c64 <HAL_GPIO_Init+0x328>)
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	089b      	lsrs	r3, r3, #2
 8007ae4:	3302      	adds	r3, #2
 8007ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007aec:	69fb      	ldr	r3, [r7, #28]
 8007aee:	f003 0303 	and.w	r3, r3, #3
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	220f      	movs	r2, #15
 8007af6:	fa02 f303 	lsl.w	r3, r2, r3
 8007afa:	43db      	mvns	r3, r3
 8007afc:	69ba      	ldr	r2, [r7, #24]
 8007afe:	4013      	ands	r3, r2
 8007b00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4a58      	ldr	r2, [pc, #352]	; (8007c68 <HAL_GPIO_Init+0x32c>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d037      	beq.n	8007b7a <HAL_GPIO_Init+0x23e>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	4a57      	ldr	r2, [pc, #348]	; (8007c6c <HAL_GPIO_Init+0x330>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d031      	beq.n	8007b76 <HAL_GPIO_Init+0x23a>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	4a56      	ldr	r2, [pc, #344]	; (8007c70 <HAL_GPIO_Init+0x334>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d02b      	beq.n	8007b72 <HAL_GPIO_Init+0x236>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4a55      	ldr	r2, [pc, #340]	; (8007c74 <HAL_GPIO_Init+0x338>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d025      	beq.n	8007b6e <HAL_GPIO_Init+0x232>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	4a54      	ldr	r2, [pc, #336]	; (8007c78 <HAL_GPIO_Init+0x33c>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d01f      	beq.n	8007b6a <HAL_GPIO_Init+0x22e>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4a53      	ldr	r2, [pc, #332]	; (8007c7c <HAL_GPIO_Init+0x340>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d019      	beq.n	8007b66 <HAL_GPIO_Init+0x22a>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	4a52      	ldr	r2, [pc, #328]	; (8007c80 <HAL_GPIO_Init+0x344>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d013      	beq.n	8007b62 <HAL_GPIO_Init+0x226>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4a51      	ldr	r2, [pc, #324]	; (8007c84 <HAL_GPIO_Init+0x348>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d00d      	beq.n	8007b5e <HAL_GPIO_Init+0x222>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4a50      	ldr	r2, [pc, #320]	; (8007c88 <HAL_GPIO_Init+0x34c>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d007      	beq.n	8007b5a <HAL_GPIO_Init+0x21e>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4a4f      	ldr	r2, [pc, #316]	; (8007c8c <HAL_GPIO_Init+0x350>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d101      	bne.n	8007b56 <HAL_GPIO_Init+0x21a>
 8007b52:	2309      	movs	r3, #9
 8007b54:	e012      	b.n	8007b7c <HAL_GPIO_Init+0x240>
 8007b56:	230a      	movs	r3, #10
 8007b58:	e010      	b.n	8007b7c <HAL_GPIO_Init+0x240>
 8007b5a:	2308      	movs	r3, #8
 8007b5c:	e00e      	b.n	8007b7c <HAL_GPIO_Init+0x240>
 8007b5e:	2307      	movs	r3, #7
 8007b60:	e00c      	b.n	8007b7c <HAL_GPIO_Init+0x240>
 8007b62:	2306      	movs	r3, #6
 8007b64:	e00a      	b.n	8007b7c <HAL_GPIO_Init+0x240>
 8007b66:	2305      	movs	r3, #5
 8007b68:	e008      	b.n	8007b7c <HAL_GPIO_Init+0x240>
 8007b6a:	2304      	movs	r3, #4
 8007b6c:	e006      	b.n	8007b7c <HAL_GPIO_Init+0x240>
 8007b6e:	2303      	movs	r3, #3
 8007b70:	e004      	b.n	8007b7c <HAL_GPIO_Init+0x240>
 8007b72:	2302      	movs	r3, #2
 8007b74:	e002      	b.n	8007b7c <HAL_GPIO_Init+0x240>
 8007b76:	2301      	movs	r3, #1
 8007b78:	e000      	b.n	8007b7c <HAL_GPIO_Init+0x240>
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	69fa      	ldr	r2, [r7, #28]
 8007b7e:	f002 0203 	and.w	r2, r2, #3
 8007b82:	0092      	lsls	r2, r2, #2
 8007b84:	4093      	lsls	r3, r2
 8007b86:	69ba      	ldr	r2, [r7, #24]
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007b8c:	4935      	ldr	r1, [pc, #212]	; (8007c64 <HAL_GPIO_Init+0x328>)
 8007b8e:	69fb      	ldr	r3, [r7, #28]
 8007b90:	089b      	lsrs	r3, r3, #2
 8007b92:	3302      	adds	r3, #2
 8007b94:	69ba      	ldr	r2, [r7, #24]
 8007b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007b9a:	4b3d      	ldr	r3, [pc, #244]	; (8007c90 <HAL_GPIO_Init+0x354>)
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	43db      	mvns	r3, r3
 8007ba4:	69ba      	ldr	r2, [r7, #24]
 8007ba6:	4013      	ands	r3, r2
 8007ba8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d003      	beq.n	8007bbe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007bb6:	69ba      	ldr	r2, [r7, #24]
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007bbe:	4a34      	ldr	r2, [pc, #208]	; (8007c90 <HAL_GPIO_Init+0x354>)
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007bc4:	4b32      	ldr	r3, [pc, #200]	; (8007c90 <HAL_GPIO_Init+0x354>)
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	43db      	mvns	r3, r3
 8007bce:	69ba      	ldr	r2, [r7, #24]
 8007bd0:	4013      	ands	r3, r2
 8007bd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d003      	beq.n	8007be8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007be0:	69ba      	ldr	r2, [r7, #24]
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	4313      	orrs	r3, r2
 8007be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007be8:	4a29      	ldr	r2, [pc, #164]	; (8007c90 <HAL_GPIO_Init+0x354>)
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007bee:	4b28      	ldr	r3, [pc, #160]	; (8007c90 <HAL_GPIO_Init+0x354>)
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	43db      	mvns	r3, r3
 8007bf8:	69ba      	ldr	r2, [r7, #24]
 8007bfa:	4013      	ands	r3, r2
 8007bfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d003      	beq.n	8007c12 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007c0a:	69ba      	ldr	r2, [r7, #24]
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007c12:	4a1f      	ldr	r2, [pc, #124]	; (8007c90 <HAL_GPIO_Init+0x354>)
 8007c14:	69bb      	ldr	r3, [r7, #24]
 8007c16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007c18:	4b1d      	ldr	r3, [pc, #116]	; (8007c90 <HAL_GPIO_Init+0x354>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	43db      	mvns	r3, r3
 8007c22:	69ba      	ldr	r2, [r7, #24]
 8007c24:	4013      	ands	r3, r2
 8007c26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d003      	beq.n	8007c3c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007c34:	69ba      	ldr	r2, [r7, #24]
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007c3c:	4a14      	ldr	r2, [pc, #80]	; (8007c90 <HAL_GPIO_Init+0x354>)
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007c42:	69fb      	ldr	r3, [r7, #28]
 8007c44:	3301      	adds	r3, #1
 8007c46:	61fb      	str	r3, [r7, #28]
 8007c48:	69fb      	ldr	r3, [r7, #28]
 8007c4a:	2b0f      	cmp	r3, #15
 8007c4c:	f67f ae84 	bls.w	8007958 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007c50:	bf00      	nop
 8007c52:	bf00      	nop
 8007c54:	3724      	adds	r7, #36	; 0x24
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr
 8007c5e:	bf00      	nop
 8007c60:	40023800 	.word	0x40023800
 8007c64:	40013800 	.word	0x40013800
 8007c68:	40020000 	.word	0x40020000
 8007c6c:	40020400 	.word	0x40020400
 8007c70:	40020800 	.word	0x40020800
 8007c74:	40020c00 	.word	0x40020c00
 8007c78:	40021000 	.word	0x40021000
 8007c7c:	40021400 	.word	0x40021400
 8007c80:	40021800 	.word	0x40021800
 8007c84:	40021c00 	.word	0x40021c00
 8007c88:	40022000 	.word	0x40022000
 8007c8c:	40022400 	.word	0x40022400
 8007c90:	40013c00 	.word	0x40013c00

08007c94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b085      	sub	sp, #20
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	691a      	ldr	r2, [r3, #16]
 8007ca4:	887b      	ldrh	r3, [r7, #2]
 8007ca6:	4013      	ands	r3, r2
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d002      	beq.n	8007cb2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007cac:	2301      	movs	r3, #1
 8007cae:	73fb      	strb	r3, [r7, #15]
 8007cb0:	e001      	b.n	8007cb6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3714      	adds	r7, #20
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	460b      	mov	r3, r1
 8007cce:	807b      	strh	r3, [r7, #2]
 8007cd0:	4613      	mov	r3, r2
 8007cd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007cd4:	787b      	ldrb	r3, [r7, #1]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d003      	beq.n	8007ce2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007cda:	887a      	ldrh	r2, [r7, #2]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007ce0:	e003      	b.n	8007cea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007ce2:	887b      	ldrh	r3, [r7, #2]
 8007ce4:	041a      	lsls	r2, r3, #16
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	619a      	str	r2, [r3, #24]
}
 8007cea:	bf00      	nop
 8007cec:	370c      	adds	r7, #12
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr
	...

08007cf8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	4603      	mov	r3, r0
 8007d00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007d02:	4b08      	ldr	r3, [pc, #32]	; (8007d24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007d04:	695a      	ldr	r2, [r3, #20]
 8007d06:	88fb      	ldrh	r3, [r7, #6]
 8007d08:	4013      	ands	r3, r2
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d006      	beq.n	8007d1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007d0e:	4a05      	ldr	r2, [pc, #20]	; (8007d24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007d10:	88fb      	ldrh	r3, [r7, #6]
 8007d12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007d14:	88fb      	ldrh	r3, [r7, #6]
 8007d16:	4618      	mov	r0, r3
 8007d18:	f7ff fbe4 	bl	80074e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8007d1c:	bf00      	nop
 8007d1e:	3708      	adds	r7, #8
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}
 8007d24:	40013c00 	.word	0x40013c00

08007d28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b086      	sub	sp, #24
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d101      	bne.n	8007d3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e267      	b.n	800820a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f003 0301 	and.w	r3, r3, #1
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d075      	beq.n	8007e32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007d46:	4b88      	ldr	r3, [pc, #544]	; (8007f68 <HAL_RCC_OscConfig+0x240>)
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	f003 030c 	and.w	r3, r3, #12
 8007d4e:	2b04      	cmp	r3, #4
 8007d50:	d00c      	beq.n	8007d6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007d52:	4b85      	ldr	r3, [pc, #532]	; (8007f68 <HAL_RCC_OscConfig+0x240>)
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007d5a:	2b08      	cmp	r3, #8
 8007d5c:	d112      	bne.n	8007d84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007d5e:	4b82      	ldr	r3, [pc, #520]	; (8007f68 <HAL_RCC_OscConfig+0x240>)
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d6a:	d10b      	bne.n	8007d84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d6c:	4b7e      	ldr	r3, [pc, #504]	; (8007f68 <HAL_RCC_OscConfig+0x240>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d05b      	beq.n	8007e30 <HAL_RCC_OscConfig+0x108>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d157      	bne.n	8007e30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	e242      	b.n	800820a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d8c:	d106      	bne.n	8007d9c <HAL_RCC_OscConfig+0x74>
 8007d8e:	4b76      	ldr	r3, [pc, #472]	; (8007f68 <HAL_RCC_OscConfig+0x240>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a75      	ldr	r2, [pc, #468]	; (8007f68 <HAL_RCC_OscConfig+0x240>)
 8007d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d98:	6013      	str	r3, [r2, #0]
 8007d9a:	e01d      	b.n	8007dd8 <HAL_RCC_OscConfig+0xb0>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007da4:	d10c      	bne.n	8007dc0 <HAL_RCC_OscConfig+0x98>
 8007da6:	4b70      	ldr	r3, [pc, #448]	; (8007f68 <HAL_RCC_OscConfig+0x240>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a6f      	ldr	r2, [pc, #444]	; (8007f68 <HAL_RCC_OscConfig+0x240>)
 8007dac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007db0:	6013      	str	r3, [r2, #0]
 8007db2:	4b6d      	ldr	r3, [pc, #436]	; (8007f68 <HAL_RCC_OscConfig+0x240>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a6c      	ldr	r2, [pc, #432]	; (8007f68 <HAL_RCC_OscConfig+0x240>)
 8007db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007dbc:	6013      	str	r3, [r2, #0]
 8007dbe:	e00b      	b.n	8007dd8 <HAL_RCC_OscConfig+0xb0>
 8007dc0:	4b69      	ldr	r3, [pc, #420]	; (8007f68 <HAL_RCC_OscConfig+0x240>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a68      	ldr	r2, [pc, #416]	; (8007f68 <HAL_RCC_OscConfig+0x240>)
 8007dc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007dca:	6013      	str	r3, [r2, #0]
 8007dcc:	4b66      	ldr	r3, [pc, #408]	; (8007f68 <HAL_RCC_OscConfig+0x240>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a65      	ldr	r2, [pc, #404]	; (8007f68 <HAL_RCC_OscConfig+0x240>)
 8007dd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007dd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d013      	beq.n	8007e08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007de0:	f7ff fc46 	bl	8007670 <HAL_GetTick>
 8007de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007de6:	e008      	b.n	8007dfa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007de8:	f7ff fc42 	bl	8007670 <HAL_GetTick>
 8007dec:	4602      	mov	r2, r0
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	1ad3      	subs	r3, r2, r3
 8007df2:	2b64      	cmp	r3, #100	; 0x64
 8007df4:	d901      	bls.n	8007dfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007df6:	2303      	movs	r3, #3
 8007df8:	e207      	b.n	800820a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007dfa:	4b5b      	ldr	r3, [pc, #364]	; (8007f68 <HAL_RCC_OscConfig+0x240>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d0f0      	beq.n	8007de8 <HAL_RCC_OscConfig+0xc0>
 8007e06:	e014      	b.n	8007e32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e08:	f7ff fc32 	bl	8007670 <HAL_GetTick>
 8007e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e0e:	e008      	b.n	8007e22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007e10:	f7ff fc2e 	bl	8007670 <HAL_GetTick>
 8007e14:	4602      	mov	r2, r0
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	1ad3      	subs	r3, r2, r3
 8007e1a:	2b64      	cmp	r3, #100	; 0x64
 8007e1c:	d901      	bls.n	8007e22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007e1e:	2303      	movs	r3, #3
 8007e20:	e1f3      	b.n	800820a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e22:	4b51      	ldr	r3, [pc, #324]	; (8007f68 <HAL_RCC_OscConfig+0x240>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d1f0      	bne.n	8007e10 <HAL_RCC_OscConfig+0xe8>
 8007e2e:	e000      	b.n	8007e32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f003 0302 	and.w	r3, r3, #2
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d063      	beq.n	8007f06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007e3e:	4b4a      	ldr	r3, [pc, #296]	; (8007f68 <HAL_RCC_OscConfig+0x240>)
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	f003 030c 	and.w	r3, r3, #12
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d00b      	beq.n	8007e62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e4a:	4b47      	ldr	r3, [pc, #284]	; (8007f68 <HAL_RCC_OscConfig+0x240>)
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007e52:	2b08      	cmp	r3, #8
 8007e54:	d11c      	bne.n	8007e90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e56:	4b44      	ldr	r3, [pc, #272]	; (8007f68 <HAL_RCC_OscConfig+0x240>)
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d116      	bne.n	8007e90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e62:	4b41      	ldr	r3, [pc, #260]	; (8007f68 <HAL_RCC_OscConfig+0x240>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f003 0302 	and.w	r3, r3, #2
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d005      	beq.n	8007e7a <HAL_RCC_OscConfig+0x152>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	68db      	ldr	r3, [r3, #12]
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d001      	beq.n	8007e7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007e76:	2301      	movs	r3, #1
 8007e78:	e1c7      	b.n	800820a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e7a:	4b3b      	ldr	r3, [pc, #236]	; (8007f68 <HAL_RCC_OscConfig+0x240>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	691b      	ldr	r3, [r3, #16]
 8007e86:	00db      	lsls	r3, r3, #3
 8007e88:	4937      	ldr	r1, [pc, #220]	; (8007f68 <HAL_RCC_OscConfig+0x240>)
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e8e:	e03a      	b.n	8007f06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d020      	beq.n	8007eda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e98:	4b34      	ldr	r3, [pc, #208]	; (8007f6c <HAL_RCC_OscConfig+0x244>)
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e9e:	f7ff fbe7 	bl	8007670 <HAL_GetTick>
 8007ea2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ea4:	e008      	b.n	8007eb8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007ea6:	f7ff fbe3 	bl	8007670 <HAL_GetTick>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	1ad3      	subs	r3, r2, r3
 8007eb0:	2b02      	cmp	r3, #2
 8007eb2:	d901      	bls.n	8007eb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007eb4:	2303      	movs	r3, #3
 8007eb6:	e1a8      	b.n	800820a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007eb8:	4b2b      	ldr	r3, [pc, #172]	; (8007f68 <HAL_RCC_OscConfig+0x240>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f003 0302 	and.w	r3, r3, #2
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d0f0      	beq.n	8007ea6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ec4:	4b28      	ldr	r3, [pc, #160]	; (8007f68 <HAL_RCC_OscConfig+0x240>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	691b      	ldr	r3, [r3, #16]
 8007ed0:	00db      	lsls	r3, r3, #3
 8007ed2:	4925      	ldr	r1, [pc, #148]	; (8007f68 <HAL_RCC_OscConfig+0x240>)
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	600b      	str	r3, [r1, #0]
 8007ed8:	e015      	b.n	8007f06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007eda:	4b24      	ldr	r3, [pc, #144]	; (8007f6c <HAL_RCC_OscConfig+0x244>)
 8007edc:	2200      	movs	r2, #0
 8007ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ee0:	f7ff fbc6 	bl	8007670 <HAL_GetTick>
 8007ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ee6:	e008      	b.n	8007efa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007ee8:	f7ff fbc2 	bl	8007670 <HAL_GetTick>
 8007eec:	4602      	mov	r2, r0
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	1ad3      	subs	r3, r2, r3
 8007ef2:	2b02      	cmp	r3, #2
 8007ef4:	d901      	bls.n	8007efa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	e187      	b.n	800820a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007efa:	4b1b      	ldr	r3, [pc, #108]	; (8007f68 <HAL_RCC_OscConfig+0x240>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f003 0302 	and.w	r3, r3, #2
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d1f0      	bne.n	8007ee8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f003 0308 	and.w	r3, r3, #8
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d036      	beq.n	8007f80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	695b      	ldr	r3, [r3, #20]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d016      	beq.n	8007f48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f1a:	4b15      	ldr	r3, [pc, #84]	; (8007f70 <HAL_RCC_OscConfig+0x248>)
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f20:	f7ff fba6 	bl	8007670 <HAL_GetTick>
 8007f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f26:	e008      	b.n	8007f3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f28:	f7ff fba2 	bl	8007670 <HAL_GetTick>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	1ad3      	subs	r3, r2, r3
 8007f32:	2b02      	cmp	r3, #2
 8007f34:	d901      	bls.n	8007f3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007f36:	2303      	movs	r3, #3
 8007f38:	e167      	b.n	800820a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f3a:	4b0b      	ldr	r3, [pc, #44]	; (8007f68 <HAL_RCC_OscConfig+0x240>)
 8007f3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f3e:	f003 0302 	and.w	r3, r3, #2
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d0f0      	beq.n	8007f28 <HAL_RCC_OscConfig+0x200>
 8007f46:	e01b      	b.n	8007f80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f48:	4b09      	ldr	r3, [pc, #36]	; (8007f70 <HAL_RCC_OscConfig+0x248>)
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f4e:	f7ff fb8f 	bl	8007670 <HAL_GetTick>
 8007f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f54:	e00e      	b.n	8007f74 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f56:	f7ff fb8b 	bl	8007670 <HAL_GetTick>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	1ad3      	subs	r3, r2, r3
 8007f60:	2b02      	cmp	r3, #2
 8007f62:	d907      	bls.n	8007f74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007f64:	2303      	movs	r3, #3
 8007f66:	e150      	b.n	800820a <HAL_RCC_OscConfig+0x4e2>
 8007f68:	40023800 	.word	0x40023800
 8007f6c:	42470000 	.word	0x42470000
 8007f70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f74:	4b88      	ldr	r3, [pc, #544]	; (8008198 <HAL_RCC_OscConfig+0x470>)
 8007f76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f78:	f003 0302 	and.w	r3, r3, #2
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d1ea      	bne.n	8007f56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f003 0304 	and.w	r3, r3, #4
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	f000 8097 	beq.w	80080bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f92:	4b81      	ldr	r3, [pc, #516]	; (8008198 <HAL_RCC_OscConfig+0x470>)
 8007f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d10f      	bne.n	8007fbe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	60bb      	str	r3, [r7, #8]
 8007fa2:	4b7d      	ldr	r3, [pc, #500]	; (8008198 <HAL_RCC_OscConfig+0x470>)
 8007fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa6:	4a7c      	ldr	r2, [pc, #496]	; (8008198 <HAL_RCC_OscConfig+0x470>)
 8007fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fac:	6413      	str	r3, [r2, #64]	; 0x40
 8007fae:	4b7a      	ldr	r3, [pc, #488]	; (8008198 <HAL_RCC_OscConfig+0x470>)
 8007fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fb6:	60bb      	str	r3, [r7, #8]
 8007fb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007fbe:	4b77      	ldr	r3, [pc, #476]	; (800819c <HAL_RCC_OscConfig+0x474>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d118      	bne.n	8007ffc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007fca:	4b74      	ldr	r3, [pc, #464]	; (800819c <HAL_RCC_OscConfig+0x474>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a73      	ldr	r2, [pc, #460]	; (800819c <HAL_RCC_OscConfig+0x474>)
 8007fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007fd6:	f7ff fb4b 	bl	8007670 <HAL_GetTick>
 8007fda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007fdc:	e008      	b.n	8007ff0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007fde:	f7ff fb47 	bl	8007670 <HAL_GetTick>
 8007fe2:	4602      	mov	r2, r0
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	1ad3      	subs	r3, r2, r3
 8007fe8:	2b02      	cmp	r3, #2
 8007fea:	d901      	bls.n	8007ff0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007fec:	2303      	movs	r3, #3
 8007fee:	e10c      	b.n	800820a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ff0:	4b6a      	ldr	r3, [pc, #424]	; (800819c <HAL_RCC_OscConfig+0x474>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d0f0      	beq.n	8007fde <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	2b01      	cmp	r3, #1
 8008002:	d106      	bne.n	8008012 <HAL_RCC_OscConfig+0x2ea>
 8008004:	4b64      	ldr	r3, [pc, #400]	; (8008198 <HAL_RCC_OscConfig+0x470>)
 8008006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008008:	4a63      	ldr	r2, [pc, #396]	; (8008198 <HAL_RCC_OscConfig+0x470>)
 800800a:	f043 0301 	orr.w	r3, r3, #1
 800800e:	6713      	str	r3, [r2, #112]	; 0x70
 8008010:	e01c      	b.n	800804c <HAL_RCC_OscConfig+0x324>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	2b05      	cmp	r3, #5
 8008018:	d10c      	bne.n	8008034 <HAL_RCC_OscConfig+0x30c>
 800801a:	4b5f      	ldr	r3, [pc, #380]	; (8008198 <HAL_RCC_OscConfig+0x470>)
 800801c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800801e:	4a5e      	ldr	r2, [pc, #376]	; (8008198 <HAL_RCC_OscConfig+0x470>)
 8008020:	f043 0304 	orr.w	r3, r3, #4
 8008024:	6713      	str	r3, [r2, #112]	; 0x70
 8008026:	4b5c      	ldr	r3, [pc, #368]	; (8008198 <HAL_RCC_OscConfig+0x470>)
 8008028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800802a:	4a5b      	ldr	r2, [pc, #364]	; (8008198 <HAL_RCC_OscConfig+0x470>)
 800802c:	f043 0301 	orr.w	r3, r3, #1
 8008030:	6713      	str	r3, [r2, #112]	; 0x70
 8008032:	e00b      	b.n	800804c <HAL_RCC_OscConfig+0x324>
 8008034:	4b58      	ldr	r3, [pc, #352]	; (8008198 <HAL_RCC_OscConfig+0x470>)
 8008036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008038:	4a57      	ldr	r2, [pc, #348]	; (8008198 <HAL_RCC_OscConfig+0x470>)
 800803a:	f023 0301 	bic.w	r3, r3, #1
 800803e:	6713      	str	r3, [r2, #112]	; 0x70
 8008040:	4b55      	ldr	r3, [pc, #340]	; (8008198 <HAL_RCC_OscConfig+0x470>)
 8008042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008044:	4a54      	ldr	r2, [pc, #336]	; (8008198 <HAL_RCC_OscConfig+0x470>)
 8008046:	f023 0304 	bic.w	r3, r3, #4
 800804a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	689b      	ldr	r3, [r3, #8]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d015      	beq.n	8008080 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008054:	f7ff fb0c 	bl	8007670 <HAL_GetTick>
 8008058:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800805a:	e00a      	b.n	8008072 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800805c:	f7ff fb08 	bl	8007670 <HAL_GetTick>
 8008060:	4602      	mov	r2, r0
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	1ad3      	subs	r3, r2, r3
 8008066:	f241 3288 	movw	r2, #5000	; 0x1388
 800806a:	4293      	cmp	r3, r2
 800806c:	d901      	bls.n	8008072 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800806e:	2303      	movs	r3, #3
 8008070:	e0cb      	b.n	800820a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008072:	4b49      	ldr	r3, [pc, #292]	; (8008198 <HAL_RCC_OscConfig+0x470>)
 8008074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008076:	f003 0302 	and.w	r3, r3, #2
 800807a:	2b00      	cmp	r3, #0
 800807c:	d0ee      	beq.n	800805c <HAL_RCC_OscConfig+0x334>
 800807e:	e014      	b.n	80080aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008080:	f7ff faf6 	bl	8007670 <HAL_GetTick>
 8008084:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008086:	e00a      	b.n	800809e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008088:	f7ff faf2 	bl	8007670 <HAL_GetTick>
 800808c:	4602      	mov	r2, r0
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	1ad3      	subs	r3, r2, r3
 8008092:	f241 3288 	movw	r2, #5000	; 0x1388
 8008096:	4293      	cmp	r3, r2
 8008098:	d901      	bls.n	800809e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800809a:	2303      	movs	r3, #3
 800809c:	e0b5      	b.n	800820a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800809e:	4b3e      	ldr	r3, [pc, #248]	; (8008198 <HAL_RCC_OscConfig+0x470>)
 80080a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080a2:	f003 0302 	and.w	r3, r3, #2
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d1ee      	bne.n	8008088 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80080aa:	7dfb      	ldrb	r3, [r7, #23]
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d105      	bne.n	80080bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80080b0:	4b39      	ldr	r3, [pc, #228]	; (8008198 <HAL_RCC_OscConfig+0x470>)
 80080b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b4:	4a38      	ldr	r2, [pc, #224]	; (8008198 <HAL_RCC_OscConfig+0x470>)
 80080b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	699b      	ldr	r3, [r3, #24]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	f000 80a1 	beq.w	8008208 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80080c6:	4b34      	ldr	r3, [pc, #208]	; (8008198 <HAL_RCC_OscConfig+0x470>)
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	f003 030c 	and.w	r3, r3, #12
 80080ce:	2b08      	cmp	r3, #8
 80080d0:	d05c      	beq.n	800818c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	699b      	ldr	r3, [r3, #24]
 80080d6:	2b02      	cmp	r3, #2
 80080d8:	d141      	bne.n	800815e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080da:	4b31      	ldr	r3, [pc, #196]	; (80081a0 <HAL_RCC_OscConfig+0x478>)
 80080dc:	2200      	movs	r2, #0
 80080de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080e0:	f7ff fac6 	bl	8007670 <HAL_GetTick>
 80080e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080e6:	e008      	b.n	80080fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080e8:	f7ff fac2 	bl	8007670 <HAL_GetTick>
 80080ec:	4602      	mov	r2, r0
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	1ad3      	subs	r3, r2, r3
 80080f2:	2b02      	cmp	r3, #2
 80080f4:	d901      	bls.n	80080fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80080f6:	2303      	movs	r3, #3
 80080f8:	e087      	b.n	800820a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080fa:	4b27      	ldr	r3, [pc, #156]	; (8008198 <HAL_RCC_OscConfig+0x470>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008102:	2b00      	cmp	r3, #0
 8008104:	d1f0      	bne.n	80080e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	69da      	ldr	r2, [r3, #28]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6a1b      	ldr	r3, [r3, #32]
 800810e:	431a      	orrs	r2, r3
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008114:	019b      	lsls	r3, r3, #6
 8008116:	431a      	orrs	r2, r3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800811c:	085b      	lsrs	r3, r3, #1
 800811e:	3b01      	subs	r3, #1
 8008120:	041b      	lsls	r3, r3, #16
 8008122:	431a      	orrs	r2, r3
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008128:	061b      	lsls	r3, r3, #24
 800812a:	491b      	ldr	r1, [pc, #108]	; (8008198 <HAL_RCC_OscConfig+0x470>)
 800812c:	4313      	orrs	r3, r2
 800812e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008130:	4b1b      	ldr	r3, [pc, #108]	; (80081a0 <HAL_RCC_OscConfig+0x478>)
 8008132:	2201      	movs	r2, #1
 8008134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008136:	f7ff fa9b 	bl	8007670 <HAL_GetTick>
 800813a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800813c:	e008      	b.n	8008150 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800813e:	f7ff fa97 	bl	8007670 <HAL_GetTick>
 8008142:	4602      	mov	r2, r0
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	1ad3      	subs	r3, r2, r3
 8008148:	2b02      	cmp	r3, #2
 800814a:	d901      	bls.n	8008150 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800814c:	2303      	movs	r3, #3
 800814e:	e05c      	b.n	800820a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008150:	4b11      	ldr	r3, [pc, #68]	; (8008198 <HAL_RCC_OscConfig+0x470>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008158:	2b00      	cmp	r3, #0
 800815a:	d0f0      	beq.n	800813e <HAL_RCC_OscConfig+0x416>
 800815c:	e054      	b.n	8008208 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800815e:	4b10      	ldr	r3, [pc, #64]	; (80081a0 <HAL_RCC_OscConfig+0x478>)
 8008160:	2200      	movs	r2, #0
 8008162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008164:	f7ff fa84 	bl	8007670 <HAL_GetTick>
 8008168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800816a:	e008      	b.n	800817e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800816c:	f7ff fa80 	bl	8007670 <HAL_GetTick>
 8008170:	4602      	mov	r2, r0
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	1ad3      	subs	r3, r2, r3
 8008176:	2b02      	cmp	r3, #2
 8008178:	d901      	bls.n	800817e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800817a:	2303      	movs	r3, #3
 800817c:	e045      	b.n	800820a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800817e:	4b06      	ldr	r3, [pc, #24]	; (8008198 <HAL_RCC_OscConfig+0x470>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008186:	2b00      	cmp	r3, #0
 8008188:	d1f0      	bne.n	800816c <HAL_RCC_OscConfig+0x444>
 800818a:	e03d      	b.n	8008208 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	699b      	ldr	r3, [r3, #24]
 8008190:	2b01      	cmp	r3, #1
 8008192:	d107      	bne.n	80081a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008194:	2301      	movs	r3, #1
 8008196:	e038      	b.n	800820a <HAL_RCC_OscConfig+0x4e2>
 8008198:	40023800 	.word	0x40023800
 800819c:	40007000 	.word	0x40007000
 80081a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80081a4:	4b1b      	ldr	r3, [pc, #108]	; (8008214 <HAL_RCC_OscConfig+0x4ec>)
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	699b      	ldr	r3, [r3, #24]
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d028      	beq.n	8008204 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80081bc:	429a      	cmp	r2, r3
 80081be:	d121      	bne.n	8008204 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d11a      	bne.n	8008204 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80081ce:	68fa      	ldr	r2, [r7, #12]
 80081d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80081d4:	4013      	ands	r3, r2
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80081da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80081dc:	4293      	cmp	r3, r2
 80081de:	d111      	bne.n	8008204 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ea:	085b      	lsrs	r3, r3, #1
 80081ec:	3b01      	subs	r3, #1
 80081ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d107      	bne.n	8008204 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008200:	429a      	cmp	r2, r3
 8008202:	d001      	beq.n	8008208 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008204:	2301      	movs	r3, #1
 8008206:	e000      	b.n	800820a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3718      	adds	r7, #24
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	40023800 	.word	0x40023800

08008218 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d101      	bne.n	800822c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008228:	2301      	movs	r3, #1
 800822a:	e0cc      	b.n	80083c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800822c:	4b68      	ldr	r3, [pc, #416]	; (80083d0 <HAL_RCC_ClockConfig+0x1b8>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f003 030f 	and.w	r3, r3, #15
 8008234:	683a      	ldr	r2, [r7, #0]
 8008236:	429a      	cmp	r2, r3
 8008238:	d90c      	bls.n	8008254 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800823a:	4b65      	ldr	r3, [pc, #404]	; (80083d0 <HAL_RCC_ClockConfig+0x1b8>)
 800823c:	683a      	ldr	r2, [r7, #0]
 800823e:	b2d2      	uxtb	r2, r2
 8008240:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008242:	4b63      	ldr	r3, [pc, #396]	; (80083d0 <HAL_RCC_ClockConfig+0x1b8>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f003 030f 	and.w	r3, r3, #15
 800824a:	683a      	ldr	r2, [r7, #0]
 800824c:	429a      	cmp	r2, r3
 800824e:	d001      	beq.n	8008254 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008250:	2301      	movs	r3, #1
 8008252:	e0b8      	b.n	80083c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f003 0302 	and.w	r3, r3, #2
 800825c:	2b00      	cmp	r3, #0
 800825e:	d020      	beq.n	80082a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f003 0304 	and.w	r3, r3, #4
 8008268:	2b00      	cmp	r3, #0
 800826a:	d005      	beq.n	8008278 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800826c:	4b59      	ldr	r3, [pc, #356]	; (80083d4 <HAL_RCC_ClockConfig+0x1bc>)
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	4a58      	ldr	r2, [pc, #352]	; (80083d4 <HAL_RCC_ClockConfig+0x1bc>)
 8008272:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008276:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f003 0308 	and.w	r3, r3, #8
 8008280:	2b00      	cmp	r3, #0
 8008282:	d005      	beq.n	8008290 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008284:	4b53      	ldr	r3, [pc, #332]	; (80083d4 <HAL_RCC_ClockConfig+0x1bc>)
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	4a52      	ldr	r2, [pc, #328]	; (80083d4 <HAL_RCC_ClockConfig+0x1bc>)
 800828a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800828e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008290:	4b50      	ldr	r3, [pc, #320]	; (80083d4 <HAL_RCC_ClockConfig+0x1bc>)
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	494d      	ldr	r1, [pc, #308]	; (80083d4 <HAL_RCC_ClockConfig+0x1bc>)
 800829e:	4313      	orrs	r3, r2
 80082a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f003 0301 	and.w	r3, r3, #1
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d044      	beq.n	8008338 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d107      	bne.n	80082c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80082b6:	4b47      	ldr	r3, [pc, #284]	; (80083d4 <HAL_RCC_ClockConfig+0x1bc>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d119      	bne.n	80082f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80082c2:	2301      	movs	r3, #1
 80082c4:	e07f      	b.n	80083c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	2b02      	cmp	r3, #2
 80082cc:	d003      	beq.n	80082d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80082d2:	2b03      	cmp	r3, #3
 80082d4:	d107      	bne.n	80082e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80082d6:	4b3f      	ldr	r3, [pc, #252]	; (80083d4 <HAL_RCC_ClockConfig+0x1bc>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d109      	bne.n	80082f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	e06f      	b.n	80083c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082e6:	4b3b      	ldr	r3, [pc, #236]	; (80083d4 <HAL_RCC_ClockConfig+0x1bc>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f003 0302 	and.w	r3, r3, #2
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d101      	bne.n	80082f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80082f2:	2301      	movs	r3, #1
 80082f4:	e067      	b.n	80083c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80082f6:	4b37      	ldr	r3, [pc, #220]	; (80083d4 <HAL_RCC_ClockConfig+0x1bc>)
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	f023 0203 	bic.w	r2, r3, #3
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	4934      	ldr	r1, [pc, #208]	; (80083d4 <HAL_RCC_ClockConfig+0x1bc>)
 8008304:	4313      	orrs	r3, r2
 8008306:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008308:	f7ff f9b2 	bl	8007670 <HAL_GetTick>
 800830c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800830e:	e00a      	b.n	8008326 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008310:	f7ff f9ae 	bl	8007670 <HAL_GetTick>
 8008314:	4602      	mov	r2, r0
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	1ad3      	subs	r3, r2, r3
 800831a:	f241 3288 	movw	r2, #5000	; 0x1388
 800831e:	4293      	cmp	r3, r2
 8008320:	d901      	bls.n	8008326 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008322:	2303      	movs	r3, #3
 8008324:	e04f      	b.n	80083c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008326:	4b2b      	ldr	r3, [pc, #172]	; (80083d4 <HAL_RCC_ClockConfig+0x1bc>)
 8008328:	689b      	ldr	r3, [r3, #8]
 800832a:	f003 020c 	and.w	r2, r3, #12
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	429a      	cmp	r2, r3
 8008336:	d1eb      	bne.n	8008310 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008338:	4b25      	ldr	r3, [pc, #148]	; (80083d0 <HAL_RCC_ClockConfig+0x1b8>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f003 030f 	and.w	r3, r3, #15
 8008340:	683a      	ldr	r2, [r7, #0]
 8008342:	429a      	cmp	r2, r3
 8008344:	d20c      	bcs.n	8008360 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008346:	4b22      	ldr	r3, [pc, #136]	; (80083d0 <HAL_RCC_ClockConfig+0x1b8>)
 8008348:	683a      	ldr	r2, [r7, #0]
 800834a:	b2d2      	uxtb	r2, r2
 800834c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800834e:	4b20      	ldr	r3, [pc, #128]	; (80083d0 <HAL_RCC_ClockConfig+0x1b8>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f003 030f 	and.w	r3, r3, #15
 8008356:	683a      	ldr	r2, [r7, #0]
 8008358:	429a      	cmp	r2, r3
 800835a:	d001      	beq.n	8008360 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	e032      	b.n	80083c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f003 0304 	and.w	r3, r3, #4
 8008368:	2b00      	cmp	r3, #0
 800836a:	d008      	beq.n	800837e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800836c:	4b19      	ldr	r3, [pc, #100]	; (80083d4 <HAL_RCC_ClockConfig+0x1bc>)
 800836e:	689b      	ldr	r3, [r3, #8]
 8008370:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	68db      	ldr	r3, [r3, #12]
 8008378:	4916      	ldr	r1, [pc, #88]	; (80083d4 <HAL_RCC_ClockConfig+0x1bc>)
 800837a:	4313      	orrs	r3, r2
 800837c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f003 0308 	and.w	r3, r3, #8
 8008386:	2b00      	cmp	r3, #0
 8008388:	d009      	beq.n	800839e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800838a:	4b12      	ldr	r3, [pc, #72]	; (80083d4 <HAL_RCC_ClockConfig+0x1bc>)
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	691b      	ldr	r3, [r3, #16]
 8008396:	00db      	lsls	r3, r3, #3
 8008398:	490e      	ldr	r1, [pc, #56]	; (80083d4 <HAL_RCC_ClockConfig+0x1bc>)
 800839a:	4313      	orrs	r3, r2
 800839c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800839e:	f000 f821 	bl	80083e4 <HAL_RCC_GetSysClockFreq>
 80083a2:	4602      	mov	r2, r0
 80083a4:	4b0b      	ldr	r3, [pc, #44]	; (80083d4 <HAL_RCC_ClockConfig+0x1bc>)
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	091b      	lsrs	r3, r3, #4
 80083aa:	f003 030f 	and.w	r3, r3, #15
 80083ae:	490a      	ldr	r1, [pc, #40]	; (80083d8 <HAL_RCC_ClockConfig+0x1c0>)
 80083b0:	5ccb      	ldrb	r3, [r1, r3]
 80083b2:	fa22 f303 	lsr.w	r3, r2, r3
 80083b6:	4a09      	ldr	r2, [pc, #36]	; (80083dc <HAL_RCC_ClockConfig+0x1c4>)
 80083b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80083ba:	4b09      	ldr	r3, [pc, #36]	; (80083e0 <HAL_RCC_ClockConfig+0x1c8>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4618      	mov	r0, r3
 80083c0:	f7fe fd4e 	bl	8006e60 <HAL_InitTick>

  return HAL_OK;
 80083c4:	2300      	movs	r3, #0
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3710      	adds	r7, #16
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}
 80083ce:	bf00      	nop
 80083d0:	40023c00 	.word	0x40023c00
 80083d4:	40023800 	.word	0x40023800
 80083d8:	0800d244 	.word	0x0800d244
 80083dc:	20000038 	.word	0x20000038
 80083e0:	2000003c 	.word	0x2000003c

080083e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80083e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80083e8:	b094      	sub	sp, #80	; 0x50
 80083ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80083ec:	2300      	movs	r3, #0
 80083ee:	647b      	str	r3, [r7, #68]	; 0x44
 80083f0:	2300      	movs	r3, #0
 80083f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083f4:	2300      	movs	r3, #0
 80083f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80083f8:	2300      	movs	r3, #0
 80083fa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80083fc:	4b79      	ldr	r3, [pc, #484]	; (80085e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	f003 030c 	and.w	r3, r3, #12
 8008404:	2b08      	cmp	r3, #8
 8008406:	d00d      	beq.n	8008424 <HAL_RCC_GetSysClockFreq+0x40>
 8008408:	2b08      	cmp	r3, #8
 800840a:	f200 80e1 	bhi.w	80085d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800840e:	2b00      	cmp	r3, #0
 8008410:	d002      	beq.n	8008418 <HAL_RCC_GetSysClockFreq+0x34>
 8008412:	2b04      	cmp	r3, #4
 8008414:	d003      	beq.n	800841e <HAL_RCC_GetSysClockFreq+0x3a>
 8008416:	e0db      	b.n	80085d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008418:	4b73      	ldr	r3, [pc, #460]	; (80085e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800841a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800841c:	e0db      	b.n	80085d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800841e:	4b73      	ldr	r3, [pc, #460]	; (80085ec <HAL_RCC_GetSysClockFreq+0x208>)
 8008420:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008422:	e0d8      	b.n	80085d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008424:	4b6f      	ldr	r3, [pc, #444]	; (80085e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800842c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800842e:	4b6d      	ldr	r3, [pc, #436]	; (80085e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008436:	2b00      	cmp	r3, #0
 8008438:	d063      	beq.n	8008502 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800843a:	4b6a      	ldr	r3, [pc, #424]	; (80085e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	099b      	lsrs	r3, r3, #6
 8008440:	2200      	movs	r2, #0
 8008442:	63bb      	str	r3, [r7, #56]	; 0x38
 8008444:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008448:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800844c:	633b      	str	r3, [r7, #48]	; 0x30
 800844e:	2300      	movs	r3, #0
 8008450:	637b      	str	r3, [r7, #52]	; 0x34
 8008452:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008456:	4622      	mov	r2, r4
 8008458:	462b      	mov	r3, r5
 800845a:	f04f 0000 	mov.w	r0, #0
 800845e:	f04f 0100 	mov.w	r1, #0
 8008462:	0159      	lsls	r1, r3, #5
 8008464:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008468:	0150      	lsls	r0, r2, #5
 800846a:	4602      	mov	r2, r0
 800846c:	460b      	mov	r3, r1
 800846e:	4621      	mov	r1, r4
 8008470:	1a51      	subs	r1, r2, r1
 8008472:	6139      	str	r1, [r7, #16]
 8008474:	4629      	mov	r1, r5
 8008476:	eb63 0301 	sbc.w	r3, r3, r1
 800847a:	617b      	str	r3, [r7, #20]
 800847c:	f04f 0200 	mov.w	r2, #0
 8008480:	f04f 0300 	mov.w	r3, #0
 8008484:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008488:	4659      	mov	r1, fp
 800848a:	018b      	lsls	r3, r1, #6
 800848c:	4651      	mov	r1, sl
 800848e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008492:	4651      	mov	r1, sl
 8008494:	018a      	lsls	r2, r1, #6
 8008496:	4651      	mov	r1, sl
 8008498:	ebb2 0801 	subs.w	r8, r2, r1
 800849c:	4659      	mov	r1, fp
 800849e:	eb63 0901 	sbc.w	r9, r3, r1
 80084a2:	f04f 0200 	mov.w	r2, #0
 80084a6:	f04f 0300 	mov.w	r3, #0
 80084aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80084ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80084b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80084b6:	4690      	mov	r8, r2
 80084b8:	4699      	mov	r9, r3
 80084ba:	4623      	mov	r3, r4
 80084bc:	eb18 0303 	adds.w	r3, r8, r3
 80084c0:	60bb      	str	r3, [r7, #8]
 80084c2:	462b      	mov	r3, r5
 80084c4:	eb49 0303 	adc.w	r3, r9, r3
 80084c8:	60fb      	str	r3, [r7, #12]
 80084ca:	f04f 0200 	mov.w	r2, #0
 80084ce:	f04f 0300 	mov.w	r3, #0
 80084d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80084d6:	4629      	mov	r1, r5
 80084d8:	024b      	lsls	r3, r1, #9
 80084da:	4621      	mov	r1, r4
 80084dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80084e0:	4621      	mov	r1, r4
 80084e2:	024a      	lsls	r2, r1, #9
 80084e4:	4610      	mov	r0, r2
 80084e6:	4619      	mov	r1, r3
 80084e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084ea:	2200      	movs	r2, #0
 80084ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80084ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80084f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80084f4:	f7f8 fd36 	bl	8000f64 <__aeabi_uldivmod>
 80084f8:	4602      	mov	r2, r0
 80084fa:	460b      	mov	r3, r1
 80084fc:	4613      	mov	r3, r2
 80084fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008500:	e058      	b.n	80085b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008502:	4b38      	ldr	r3, [pc, #224]	; (80085e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	099b      	lsrs	r3, r3, #6
 8008508:	2200      	movs	r2, #0
 800850a:	4618      	mov	r0, r3
 800850c:	4611      	mov	r1, r2
 800850e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008512:	623b      	str	r3, [r7, #32]
 8008514:	2300      	movs	r3, #0
 8008516:	627b      	str	r3, [r7, #36]	; 0x24
 8008518:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800851c:	4642      	mov	r2, r8
 800851e:	464b      	mov	r3, r9
 8008520:	f04f 0000 	mov.w	r0, #0
 8008524:	f04f 0100 	mov.w	r1, #0
 8008528:	0159      	lsls	r1, r3, #5
 800852a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800852e:	0150      	lsls	r0, r2, #5
 8008530:	4602      	mov	r2, r0
 8008532:	460b      	mov	r3, r1
 8008534:	4641      	mov	r1, r8
 8008536:	ebb2 0a01 	subs.w	sl, r2, r1
 800853a:	4649      	mov	r1, r9
 800853c:	eb63 0b01 	sbc.w	fp, r3, r1
 8008540:	f04f 0200 	mov.w	r2, #0
 8008544:	f04f 0300 	mov.w	r3, #0
 8008548:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800854c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008550:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008554:	ebb2 040a 	subs.w	r4, r2, sl
 8008558:	eb63 050b 	sbc.w	r5, r3, fp
 800855c:	f04f 0200 	mov.w	r2, #0
 8008560:	f04f 0300 	mov.w	r3, #0
 8008564:	00eb      	lsls	r3, r5, #3
 8008566:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800856a:	00e2      	lsls	r2, r4, #3
 800856c:	4614      	mov	r4, r2
 800856e:	461d      	mov	r5, r3
 8008570:	4643      	mov	r3, r8
 8008572:	18e3      	adds	r3, r4, r3
 8008574:	603b      	str	r3, [r7, #0]
 8008576:	464b      	mov	r3, r9
 8008578:	eb45 0303 	adc.w	r3, r5, r3
 800857c:	607b      	str	r3, [r7, #4]
 800857e:	f04f 0200 	mov.w	r2, #0
 8008582:	f04f 0300 	mov.w	r3, #0
 8008586:	e9d7 4500 	ldrd	r4, r5, [r7]
 800858a:	4629      	mov	r1, r5
 800858c:	028b      	lsls	r3, r1, #10
 800858e:	4621      	mov	r1, r4
 8008590:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008594:	4621      	mov	r1, r4
 8008596:	028a      	lsls	r2, r1, #10
 8008598:	4610      	mov	r0, r2
 800859a:	4619      	mov	r1, r3
 800859c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800859e:	2200      	movs	r2, #0
 80085a0:	61bb      	str	r3, [r7, #24]
 80085a2:	61fa      	str	r2, [r7, #28]
 80085a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80085a8:	f7f8 fcdc 	bl	8000f64 <__aeabi_uldivmod>
 80085ac:	4602      	mov	r2, r0
 80085ae:	460b      	mov	r3, r1
 80085b0:	4613      	mov	r3, r2
 80085b2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80085b4:	4b0b      	ldr	r3, [pc, #44]	; (80085e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	0c1b      	lsrs	r3, r3, #16
 80085ba:	f003 0303 	and.w	r3, r3, #3
 80085be:	3301      	adds	r3, #1
 80085c0:	005b      	lsls	r3, r3, #1
 80085c2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80085c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80085c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80085cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80085ce:	e002      	b.n	80085d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80085d0:	4b05      	ldr	r3, [pc, #20]	; (80085e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80085d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80085d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80085d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3750      	adds	r7, #80	; 0x50
 80085dc:	46bd      	mov	sp, r7
 80085de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085e2:	bf00      	nop
 80085e4:	40023800 	.word	0x40023800
 80085e8:	00f42400 	.word	0x00f42400
 80085ec:	007a1200 	.word	0x007a1200

080085f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80085f0:	b480      	push	{r7}
 80085f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80085f4:	4b03      	ldr	r3, [pc, #12]	; (8008604 <HAL_RCC_GetHCLKFreq+0x14>)
 80085f6:	681b      	ldr	r3, [r3, #0]
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	46bd      	mov	sp, r7
 80085fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008600:	4770      	bx	lr
 8008602:	bf00      	nop
 8008604:	20000038 	.word	0x20000038

08008608 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800860c:	f7ff fff0 	bl	80085f0 <HAL_RCC_GetHCLKFreq>
 8008610:	4602      	mov	r2, r0
 8008612:	4b05      	ldr	r3, [pc, #20]	; (8008628 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	0a9b      	lsrs	r3, r3, #10
 8008618:	f003 0307 	and.w	r3, r3, #7
 800861c:	4903      	ldr	r1, [pc, #12]	; (800862c <HAL_RCC_GetPCLK1Freq+0x24>)
 800861e:	5ccb      	ldrb	r3, [r1, r3]
 8008620:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008624:	4618      	mov	r0, r3
 8008626:	bd80      	pop	{r7, pc}
 8008628:	40023800 	.word	0x40023800
 800862c:	0800d254 	.word	0x0800d254

08008630 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008634:	f7ff ffdc 	bl	80085f0 <HAL_RCC_GetHCLKFreq>
 8008638:	4602      	mov	r2, r0
 800863a:	4b05      	ldr	r3, [pc, #20]	; (8008650 <HAL_RCC_GetPCLK2Freq+0x20>)
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	0b5b      	lsrs	r3, r3, #13
 8008640:	f003 0307 	and.w	r3, r3, #7
 8008644:	4903      	ldr	r1, [pc, #12]	; (8008654 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008646:	5ccb      	ldrb	r3, [r1, r3]
 8008648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800864c:	4618      	mov	r0, r3
 800864e:	bd80      	pop	{r7, pc}
 8008650:	40023800 	.word	0x40023800
 8008654:	0800d254 	.word	0x0800d254

08008658 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008658:	b480      	push	{r7}
 800865a:	b083      	sub	sp, #12
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	220f      	movs	r2, #15
 8008666:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008668:	4b12      	ldr	r3, [pc, #72]	; (80086b4 <HAL_RCC_GetClockConfig+0x5c>)
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	f003 0203 	and.w	r2, r3, #3
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008674:	4b0f      	ldr	r3, [pc, #60]	; (80086b4 <HAL_RCC_GetClockConfig+0x5c>)
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008680:	4b0c      	ldr	r3, [pc, #48]	; (80086b4 <HAL_RCC_GetClockConfig+0x5c>)
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800868c:	4b09      	ldr	r3, [pc, #36]	; (80086b4 <HAL_RCC_GetClockConfig+0x5c>)
 800868e:	689b      	ldr	r3, [r3, #8]
 8008690:	08db      	lsrs	r3, r3, #3
 8008692:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800869a:	4b07      	ldr	r3, [pc, #28]	; (80086b8 <HAL_RCC_GetClockConfig+0x60>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f003 020f 	and.w	r2, r3, #15
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	601a      	str	r2, [r3, #0]
}
 80086a6:	bf00      	nop
 80086a8:	370c      	adds	r7, #12
 80086aa:	46bd      	mov	sp, r7
 80086ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b0:	4770      	bx	lr
 80086b2:	bf00      	nop
 80086b4:	40023800 	.word	0x40023800
 80086b8:	40023c00 	.word	0x40023c00

080086bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b082      	sub	sp, #8
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d101      	bne.n	80086ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80086ca:	2301      	movs	r3, #1
 80086cc:	e07b      	b.n	80087c6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d108      	bne.n	80086e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	685b      	ldr	r3, [r3, #4]
 80086da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086de:	d009      	beq.n	80086f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2200      	movs	r2, #0
 80086e4:	61da      	str	r2, [r3, #28]
 80086e6:	e005      	b.n	80086f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2200      	movs	r2, #0
 80086f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2200      	movs	r2, #0
 80086f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008700:	b2db      	uxtb	r3, r3
 8008702:	2b00      	cmp	r3, #0
 8008704:	d106      	bne.n	8008714 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2200      	movs	r2, #0
 800870a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f7fe fb0e 	bl	8006d30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2202      	movs	r2, #2
 8008718:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800872a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	689b      	ldr	r3, [r3, #8]
 8008738:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800873c:	431a      	orrs	r2, r3
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	68db      	ldr	r3, [r3, #12]
 8008742:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008746:	431a      	orrs	r2, r3
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	691b      	ldr	r3, [r3, #16]
 800874c:	f003 0302 	and.w	r3, r3, #2
 8008750:	431a      	orrs	r2, r3
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	695b      	ldr	r3, [r3, #20]
 8008756:	f003 0301 	and.w	r3, r3, #1
 800875a:	431a      	orrs	r2, r3
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	699b      	ldr	r3, [r3, #24]
 8008760:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008764:	431a      	orrs	r2, r3
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	69db      	ldr	r3, [r3, #28]
 800876a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800876e:	431a      	orrs	r2, r3
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6a1b      	ldr	r3, [r3, #32]
 8008774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008778:	ea42 0103 	orr.w	r1, r2, r3
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008780:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	430a      	orrs	r2, r1
 800878a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	699b      	ldr	r3, [r3, #24]
 8008790:	0c1b      	lsrs	r3, r3, #16
 8008792:	f003 0104 	and.w	r1, r3, #4
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800879a:	f003 0210 	and.w	r2, r3, #16
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	430a      	orrs	r2, r1
 80087a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	69da      	ldr	r2, [r3, #28]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80087b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2200      	movs	r2, #0
 80087ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2201      	movs	r2, #1
 80087c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80087c4:	2300      	movs	r3, #0
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3708      	adds	r7, #8
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}

080087ce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087ce:	b580      	push	{r7, lr}
 80087d0:	b088      	sub	sp, #32
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	60f8      	str	r0, [r7, #12]
 80087d6:	60b9      	str	r1, [r7, #8]
 80087d8:	603b      	str	r3, [r7, #0]
 80087da:	4613      	mov	r3, r2
 80087dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80087de:	2300      	movs	r3, #0
 80087e0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	d101      	bne.n	80087f0 <HAL_SPI_Transmit+0x22>
 80087ec:	2302      	movs	r3, #2
 80087ee:	e126      	b.n	8008a3e <HAL_SPI_Transmit+0x270>
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2201      	movs	r2, #1
 80087f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80087f8:	f7fe ff3a 	bl	8007670 <HAL_GetTick>
 80087fc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80087fe:	88fb      	ldrh	r3, [r7, #6]
 8008800:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008808:	b2db      	uxtb	r3, r3
 800880a:	2b01      	cmp	r3, #1
 800880c:	d002      	beq.n	8008814 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800880e:	2302      	movs	r3, #2
 8008810:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008812:	e10b      	b.n	8008a2c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d002      	beq.n	8008820 <HAL_SPI_Transmit+0x52>
 800881a:	88fb      	ldrh	r3, [r7, #6]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d102      	bne.n	8008826 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008820:	2301      	movs	r3, #1
 8008822:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008824:	e102      	b.n	8008a2c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2203      	movs	r2, #3
 800882a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2200      	movs	r2, #0
 8008832:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	68ba      	ldr	r2, [r7, #8]
 8008838:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	88fa      	ldrh	r2, [r7, #6]
 800883e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	88fa      	ldrh	r2, [r7, #6]
 8008844:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2200      	movs	r2, #0
 800884a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2200      	movs	r2, #0
 8008850:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2200      	movs	r2, #0
 8008856:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2200      	movs	r2, #0
 800885c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2200      	movs	r2, #0
 8008862:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	689b      	ldr	r3, [r3, #8]
 8008868:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800886c:	d10f      	bne.n	800888e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800887c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800888c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008898:	2b40      	cmp	r3, #64	; 0x40
 800889a:	d007      	beq.n	80088ac <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	681a      	ldr	r2, [r3, #0]
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	68db      	ldr	r3, [r3, #12]
 80088b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088b4:	d14b      	bne.n	800894e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d002      	beq.n	80088c4 <HAL_SPI_Transmit+0xf6>
 80088be:	8afb      	ldrh	r3, [r7, #22]
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d13e      	bne.n	8008942 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088c8:	881a      	ldrh	r2, [r3, #0]
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088d4:	1c9a      	adds	r2, r3, #2
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088de:	b29b      	uxth	r3, r3
 80088e0:	3b01      	subs	r3, #1
 80088e2:	b29a      	uxth	r2, r3
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80088e8:	e02b      	b.n	8008942 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	f003 0302 	and.w	r3, r3, #2
 80088f4:	2b02      	cmp	r3, #2
 80088f6:	d112      	bne.n	800891e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088fc:	881a      	ldrh	r2, [r3, #0]
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008908:	1c9a      	adds	r2, r3, #2
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008912:	b29b      	uxth	r3, r3
 8008914:	3b01      	subs	r3, #1
 8008916:	b29a      	uxth	r2, r3
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	86da      	strh	r2, [r3, #54]	; 0x36
 800891c:	e011      	b.n	8008942 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800891e:	f7fe fea7 	bl	8007670 <HAL_GetTick>
 8008922:	4602      	mov	r2, r0
 8008924:	69bb      	ldr	r3, [r7, #24]
 8008926:	1ad3      	subs	r3, r2, r3
 8008928:	683a      	ldr	r2, [r7, #0]
 800892a:	429a      	cmp	r2, r3
 800892c:	d803      	bhi.n	8008936 <HAL_SPI_Transmit+0x168>
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008934:	d102      	bne.n	800893c <HAL_SPI_Transmit+0x16e>
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d102      	bne.n	8008942 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800893c:	2303      	movs	r3, #3
 800893e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008940:	e074      	b.n	8008a2c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008946:	b29b      	uxth	r3, r3
 8008948:	2b00      	cmp	r3, #0
 800894a:	d1ce      	bne.n	80088ea <HAL_SPI_Transmit+0x11c>
 800894c:	e04c      	b.n	80089e8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d002      	beq.n	800895c <HAL_SPI_Transmit+0x18e>
 8008956:	8afb      	ldrh	r3, [r7, #22]
 8008958:	2b01      	cmp	r3, #1
 800895a:	d140      	bne.n	80089de <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	330c      	adds	r3, #12
 8008966:	7812      	ldrb	r2, [r2, #0]
 8008968:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800896e:	1c5a      	adds	r2, r3, #1
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008978:	b29b      	uxth	r3, r3
 800897a:	3b01      	subs	r3, #1
 800897c:	b29a      	uxth	r2, r3
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008982:	e02c      	b.n	80089de <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	f003 0302 	and.w	r3, r3, #2
 800898e:	2b02      	cmp	r3, #2
 8008990:	d113      	bne.n	80089ba <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	330c      	adds	r3, #12
 800899c:	7812      	ldrb	r2, [r2, #0]
 800899e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a4:	1c5a      	adds	r2, r3, #1
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	3b01      	subs	r3, #1
 80089b2:	b29a      	uxth	r2, r3
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80089b8:	e011      	b.n	80089de <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80089ba:	f7fe fe59 	bl	8007670 <HAL_GetTick>
 80089be:	4602      	mov	r2, r0
 80089c0:	69bb      	ldr	r3, [r7, #24]
 80089c2:	1ad3      	subs	r3, r2, r3
 80089c4:	683a      	ldr	r2, [r7, #0]
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d803      	bhi.n	80089d2 <HAL_SPI_Transmit+0x204>
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089d0:	d102      	bne.n	80089d8 <HAL_SPI_Transmit+0x20a>
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d102      	bne.n	80089de <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80089d8:	2303      	movs	r3, #3
 80089da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80089dc:	e026      	b.n	8008a2c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d1cd      	bne.n	8008984 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80089e8:	69ba      	ldr	r2, [r7, #24]
 80089ea:	6839      	ldr	r1, [r7, #0]
 80089ec:	68f8      	ldr	r0, [r7, #12]
 80089ee:	f000 fb81 	bl	80090f4 <SPI_EndRxTxTransaction>
 80089f2:	4603      	mov	r3, r0
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d002      	beq.n	80089fe <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2220      	movs	r2, #32
 80089fc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d10a      	bne.n	8008a1c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008a06:	2300      	movs	r3, #0
 8008a08:	613b      	str	r3, [r7, #16]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	68db      	ldr	r3, [r3, #12]
 8008a10:	613b      	str	r3, [r7, #16]
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	689b      	ldr	r3, [r3, #8]
 8008a18:	613b      	str	r3, [r7, #16]
 8008a1a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d002      	beq.n	8008a2a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008a24:	2301      	movs	r3, #1
 8008a26:	77fb      	strb	r3, [r7, #31]
 8008a28:	e000      	b.n	8008a2c <HAL_SPI_Transmit+0x25e>
  }

error:
 8008a2a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2200      	movs	r2, #0
 8008a38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008a3c:	7ffb      	ldrb	r3, [r7, #31]
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3720      	adds	r7, #32
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}

08008a46 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008a46:	b580      	push	{r7, lr}
 8008a48:	b08c      	sub	sp, #48	; 0x30
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	60f8      	str	r0, [r7, #12]
 8008a4e:	60b9      	str	r1, [r7, #8]
 8008a50:	607a      	str	r2, [r7, #4]
 8008a52:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008a54:	2301      	movs	r3, #1
 8008a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	d101      	bne.n	8008a6c <HAL_SPI_TransmitReceive+0x26>
 8008a68:	2302      	movs	r3, #2
 8008a6a:	e18a      	b.n	8008d82 <HAL_SPI_TransmitReceive+0x33c>
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2201      	movs	r2, #1
 8008a70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008a74:	f7fe fdfc 	bl	8007670 <HAL_GetTick>
 8008a78:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008a8a:	887b      	ldrh	r3, [r7, #2]
 8008a8c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008a8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d00f      	beq.n	8008ab6 <HAL_SPI_TransmitReceive+0x70>
 8008a96:	69fb      	ldr	r3, [r7, #28]
 8008a98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a9c:	d107      	bne.n	8008aae <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d103      	bne.n	8008aae <HAL_SPI_TransmitReceive+0x68>
 8008aa6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008aaa:	2b04      	cmp	r3, #4
 8008aac:	d003      	beq.n	8008ab6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008aae:	2302      	movs	r3, #2
 8008ab0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008ab4:	e15b      	b.n	8008d6e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d005      	beq.n	8008ac8 <HAL_SPI_TransmitReceive+0x82>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d002      	beq.n	8008ac8 <HAL_SPI_TransmitReceive+0x82>
 8008ac2:	887b      	ldrh	r3, [r7, #2]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d103      	bne.n	8008ad0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008ac8:	2301      	movs	r3, #1
 8008aca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008ace:	e14e      	b.n	8008d6e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ad6:	b2db      	uxtb	r3, r3
 8008ad8:	2b04      	cmp	r3, #4
 8008ada:	d003      	beq.n	8008ae4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2205      	movs	r2, #5
 8008ae0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	687a      	ldr	r2, [r7, #4]
 8008aee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	887a      	ldrh	r2, [r7, #2]
 8008af4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	887a      	ldrh	r2, [r7, #2]
 8008afa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	68ba      	ldr	r2, [r7, #8]
 8008b00:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	887a      	ldrh	r2, [r7, #2]
 8008b06:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	887a      	ldrh	r2, [r7, #2]
 8008b0c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2200      	movs	r2, #0
 8008b12:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2200      	movs	r2, #0
 8008b18:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b24:	2b40      	cmp	r3, #64	; 0x40
 8008b26:	d007      	beq.n	8008b38 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	68db      	ldr	r3, [r3, #12]
 8008b3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b40:	d178      	bne.n	8008c34 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d002      	beq.n	8008b50 <HAL_SPI_TransmitReceive+0x10a>
 8008b4a:	8b7b      	ldrh	r3, [r7, #26]
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d166      	bne.n	8008c1e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b54:	881a      	ldrh	r2, [r3, #0]
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b60:	1c9a      	adds	r2, r3, #2
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	3b01      	subs	r3, #1
 8008b6e:	b29a      	uxth	r2, r3
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b74:	e053      	b.n	8008c1e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	f003 0302 	and.w	r3, r3, #2
 8008b80:	2b02      	cmp	r3, #2
 8008b82:	d11b      	bne.n	8008bbc <HAL_SPI_TransmitReceive+0x176>
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d016      	beq.n	8008bbc <HAL_SPI_TransmitReceive+0x176>
 8008b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d113      	bne.n	8008bbc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b98:	881a      	ldrh	r2, [r3, #0]
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba4:	1c9a      	adds	r2, r3, #2
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	3b01      	subs	r3, #1
 8008bb2:	b29a      	uxth	r2, r3
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	689b      	ldr	r3, [r3, #8]
 8008bc2:	f003 0301 	and.w	r3, r3, #1
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	d119      	bne.n	8008bfe <HAL_SPI_TransmitReceive+0x1b8>
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d014      	beq.n	8008bfe <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	68da      	ldr	r2, [r3, #12]
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bde:	b292      	uxth	r2, r2
 8008be0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be6:	1c9a      	adds	r2, r3, #2
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bf0:	b29b      	uxth	r3, r3
 8008bf2:	3b01      	subs	r3, #1
 8008bf4:	b29a      	uxth	r2, r3
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008bfe:	f7fe fd37 	bl	8007670 <HAL_GetTick>
 8008c02:	4602      	mov	r2, r0
 8008c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c06:	1ad3      	subs	r3, r2, r3
 8008c08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d807      	bhi.n	8008c1e <HAL_SPI_TransmitReceive+0x1d8>
 8008c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c14:	d003      	beq.n	8008c1e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008c16:	2303      	movs	r3, #3
 8008c18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008c1c:	e0a7      	b.n	8008d6e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c22:	b29b      	uxth	r3, r3
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d1a6      	bne.n	8008b76 <HAL_SPI_TransmitReceive+0x130>
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d1a1      	bne.n	8008b76 <HAL_SPI_TransmitReceive+0x130>
 8008c32:	e07c      	b.n	8008d2e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d002      	beq.n	8008c42 <HAL_SPI_TransmitReceive+0x1fc>
 8008c3c:	8b7b      	ldrh	r3, [r7, #26]
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d16b      	bne.n	8008d1a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	330c      	adds	r3, #12
 8008c4c:	7812      	ldrb	r2, [r2, #0]
 8008c4e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c54:	1c5a      	adds	r2, r3, #1
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c5e:	b29b      	uxth	r3, r3
 8008c60:	3b01      	subs	r3, #1
 8008c62:	b29a      	uxth	r2, r3
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c68:	e057      	b.n	8008d1a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	689b      	ldr	r3, [r3, #8]
 8008c70:	f003 0302 	and.w	r3, r3, #2
 8008c74:	2b02      	cmp	r3, #2
 8008c76:	d11c      	bne.n	8008cb2 <HAL_SPI_TransmitReceive+0x26c>
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d017      	beq.n	8008cb2 <HAL_SPI_TransmitReceive+0x26c>
 8008c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d114      	bne.n	8008cb2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	330c      	adds	r3, #12
 8008c92:	7812      	ldrb	r2, [r2, #0]
 8008c94:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c9a:	1c5a      	adds	r2, r3, #1
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ca4:	b29b      	uxth	r3, r3
 8008ca6:	3b01      	subs	r3, #1
 8008ca8:	b29a      	uxth	r2, r3
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	689b      	ldr	r3, [r3, #8]
 8008cb8:	f003 0301 	and.w	r3, r3, #1
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d119      	bne.n	8008cf4 <HAL_SPI_TransmitReceive+0x2ae>
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d014      	beq.n	8008cf4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	68da      	ldr	r2, [r3, #12]
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cd4:	b2d2      	uxtb	r2, r2
 8008cd6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cdc:	1c5a      	adds	r2, r3, #1
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	3b01      	subs	r3, #1
 8008cea:	b29a      	uxth	r2, r3
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008cf4:	f7fe fcbc 	bl	8007670 <HAL_GetTick>
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfc:	1ad3      	subs	r3, r2, r3
 8008cfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d803      	bhi.n	8008d0c <HAL_SPI_TransmitReceive+0x2c6>
 8008d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d0a:	d102      	bne.n	8008d12 <HAL_SPI_TransmitReceive+0x2cc>
 8008d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d103      	bne.n	8008d1a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008d12:	2303      	movs	r3, #3
 8008d14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008d18:	e029      	b.n	8008d6e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d1e:	b29b      	uxth	r3, r3
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d1a2      	bne.n	8008c6a <HAL_SPI_TransmitReceive+0x224>
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d28:	b29b      	uxth	r3, r3
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d19d      	bne.n	8008c6a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008d32:	68f8      	ldr	r0, [r7, #12]
 8008d34:	f000 f9de 	bl	80090f4 <SPI_EndRxTxTransaction>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d006      	beq.n	8008d4c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2220      	movs	r2, #32
 8008d48:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008d4a:	e010      	b.n	8008d6e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	689b      	ldr	r3, [r3, #8]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d10b      	bne.n	8008d6c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008d54:	2300      	movs	r3, #0
 8008d56:	617b      	str	r3, [r7, #20]
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	68db      	ldr	r3, [r3, #12]
 8008d5e:	617b      	str	r3, [r7, #20]
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	689b      	ldr	r3, [r3, #8]
 8008d66:	617b      	str	r3, [r7, #20]
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	e000      	b.n	8008d6e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008d6c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	2201      	movs	r2, #1
 8008d72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008d7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3730      	adds	r7, #48	; 0x30
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
	...

08008d8c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b088      	sub	sp, #32
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	689b      	ldr	r3, [r3, #8]
 8008da2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008da4:	69bb      	ldr	r3, [r7, #24]
 8008da6:	099b      	lsrs	r3, r3, #6
 8008da8:	f003 0301 	and.w	r3, r3, #1
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d10f      	bne.n	8008dd0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008db0:	69bb      	ldr	r3, [r7, #24]
 8008db2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d00a      	beq.n	8008dd0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008dba:	69fb      	ldr	r3, [r7, #28]
 8008dbc:	099b      	lsrs	r3, r3, #6
 8008dbe:	f003 0301 	and.w	r3, r3, #1
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d004      	beq.n	8008dd0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	4798      	blx	r3
    return;
 8008dce:	e0d7      	b.n	8008f80 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008dd0:	69bb      	ldr	r3, [r7, #24]
 8008dd2:	085b      	lsrs	r3, r3, #1
 8008dd4:	f003 0301 	and.w	r3, r3, #1
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d00a      	beq.n	8008df2 <HAL_SPI_IRQHandler+0x66>
 8008ddc:	69fb      	ldr	r3, [r7, #28]
 8008dde:	09db      	lsrs	r3, r3, #7
 8008de0:	f003 0301 	and.w	r3, r3, #1
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d004      	beq.n	8008df2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	4798      	blx	r3
    return;
 8008df0:	e0c6      	b.n	8008f80 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008df2:	69bb      	ldr	r3, [r7, #24]
 8008df4:	095b      	lsrs	r3, r3, #5
 8008df6:	f003 0301 	and.w	r3, r3, #1
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d10c      	bne.n	8008e18 <HAL_SPI_IRQHandler+0x8c>
 8008dfe:	69bb      	ldr	r3, [r7, #24]
 8008e00:	099b      	lsrs	r3, r3, #6
 8008e02:	f003 0301 	and.w	r3, r3, #1
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d106      	bne.n	8008e18 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008e0a:	69bb      	ldr	r3, [r7, #24]
 8008e0c:	0a1b      	lsrs	r3, r3, #8
 8008e0e:	f003 0301 	and.w	r3, r3, #1
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	f000 80b4 	beq.w	8008f80 <HAL_SPI_IRQHandler+0x1f4>
 8008e18:	69fb      	ldr	r3, [r7, #28]
 8008e1a:	095b      	lsrs	r3, r3, #5
 8008e1c:	f003 0301 	and.w	r3, r3, #1
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	f000 80ad 	beq.w	8008f80 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008e26:	69bb      	ldr	r3, [r7, #24]
 8008e28:	099b      	lsrs	r3, r3, #6
 8008e2a:	f003 0301 	and.w	r3, r3, #1
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d023      	beq.n	8008e7a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	2b03      	cmp	r3, #3
 8008e3c:	d011      	beq.n	8008e62 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e42:	f043 0204 	orr.w	r2, r3, #4
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	617b      	str	r3, [r7, #20]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	68db      	ldr	r3, [r3, #12]
 8008e54:	617b      	str	r3, [r7, #20]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	689b      	ldr	r3, [r3, #8]
 8008e5c:	617b      	str	r3, [r7, #20]
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	e00b      	b.n	8008e7a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008e62:	2300      	movs	r3, #0
 8008e64:	613b      	str	r3, [r7, #16]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	68db      	ldr	r3, [r3, #12]
 8008e6c:	613b      	str	r3, [r7, #16]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	689b      	ldr	r3, [r3, #8]
 8008e74:	613b      	str	r3, [r7, #16]
 8008e76:	693b      	ldr	r3, [r7, #16]
        return;
 8008e78:	e082      	b.n	8008f80 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008e7a:	69bb      	ldr	r3, [r7, #24]
 8008e7c:	095b      	lsrs	r3, r3, #5
 8008e7e:	f003 0301 	and.w	r3, r3, #1
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d014      	beq.n	8008eb0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e8a:	f043 0201 	orr.w	r2, r3, #1
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008e92:	2300      	movs	r3, #0
 8008e94:	60fb      	str	r3, [r7, #12]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	689b      	ldr	r3, [r3, #8]
 8008e9c:	60fb      	str	r3, [r7, #12]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	681a      	ldr	r2, [r3, #0]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008eac:	601a      	str	r2, [r3, #0]
 8008eae:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008eb0:	69bb      	ldr	r3, [r7, #24]
 8008eb2:	0a1b      	lsrs	r3, r3, #8
 8008eb4:	f003 0301 	and.w	r3, r3, #1
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d00c      	beq.n	8008ed6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ec0:	f043 0208 	orr.w	r2, r3, #8
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008ec8:	2300      	movs	r3, #0
 8008eca:	60bb      	str	r3, [r7, #8]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	689b      	ldr	r3, [r3, #8]
 8008ed2:	60bb      	str	r3, [r7, #8]
 8008ed4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d04f      	beq.n	8008f7e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	685a      	ldr	r2, [r3, #4]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008eec:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2201      	movs	r2, #1
 8008ef2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008ef6:	69fb      	ldr	r3, [r7, #28]
 8008ef8:	f003 0302 	and.w	r3, r3, #2
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d104      	bne.n	8008f0a <HAL_SPI_IRQHandler+0x17e>
 8008f00:	69fb      	ldr	r3, [r7, #28]
 8008f02:	f003 0301 	and.w	r3, r3, #1
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d034      	beq.n	8008f74 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	685a      	ldr	r2, [r3, #4]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f022 0203 	bic.w	r2, r2, #3
 8008f18:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d011      	beq.n	8008f46 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f26:	4a18      	ldr	r2, [pc, #96]	; (8008f88 <HAL_SPI_IRQHandler+0x1fc>)
 8008f28:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f7fe fce2 	bl	80078f8 <HAL_DMA_Abort_IT>
 8008f34:	4603      	mov	r3, r0
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d005      	beq.n	8008f46 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d016      	beq.n	8008f7c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f52:	4a0d      	ldr	r2, [pc, #52]	; (8008f88 <HAL_SPI_IRQHandler+0x1fc>)
 8008f54:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f7fe fccc 	bl	80078f8 <HAL_DMA_Abort_IT>
 8008f60:	4603      	mov	r3, r0
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d00a      	beq.n	8008f7c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8008f72:	e003      	b.n	8008f7c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f000 f809 	bl	8008f8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008f7a:	e000      	b.n	8008f7e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8008f7c:	bf00      	nop
    return;
 8008f7e:	bf00      	nop
  }
}
 8008f80:	3720      	adds	r7, #32
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	08008fbd 	.word	0x08008fbd

08008f8c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b083      	sub	sp, #12
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008f94:	bf00      	nop
 8008f96:	370c      	adds	r7, #12
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr

08008fa0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b083      	sub	sp, #12
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008fae:	b2db      	uxtb	r3, r3
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	370c      	adds	r7, #12
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr

08008fbc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b084      	sub	sp, #16
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fc8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008fd6:	68f8      	ldr	r0, [r7, #12]
 8008fd8:	f7ff ffd8 	bl	8008f8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008fdc:	bf00      	nop
 8008fde:	3710      	adds	r7, #16
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b088      	sub	sp, #32
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	60f8      	str	r0, [r7, #12]
 8008fec:	60b9      	str	r1, [r7, #8]
 8008fee:	603b      	str	r3, [r7, #0]
 8008ff0:	4613      	mov	r3, r2
 8008ff2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008ff4:	f7fe fb3c 	bl	8007670 <HAL_GetTick>
 8008ff8:	4602      	mov	r2, r0
 8008ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ffc:	1a9b      	subs	r3, r3, r2
 8008ffe:	683a      	ldr	r2, [r7, #0]
 8009000:	4413      	add	r3, r2
 8009002:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009004:	f7fe fb34 	bl	8007670 <HAL_GetTick>
 8009008:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800900a:	4b39      	ldr	r3, [pc, #228]	; (80090f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	015b      	lsls	r3, r3, #5
 8009010:	0d1b      	lsrs	r3, r3, #20
 8009012:	69fa      	ldr	r2, [r7, #28]
 8009014:	fb02 f303 	mul.w	r3, r2, r3
 8009018:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800901a:	e054      	b.n	80090c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009022:	d050      	beq.n	80090c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009024:	f7fe fb24 	bl	8007670 <HAL_GetTick>
 8009028:	4602      	mov	r2, r0
 800902a:	69bb      	ldr	r3, [r7, #24]
 800902c:	1ad3      	subs	r3, r2, r3
 800902e:	69fa      	ldr	r2, [r7, #28]
 8009030:	429a      	cmp	r2, r3
 8009032:	d902      	bls.n	800903a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009034:	69fb      	ldr	r3, [r7, #28]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d13d      	bne.n	80090b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	685a      	ldr	r2, [r3, #4]
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009048:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009052:	d111      	bne.n	8009078 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800905c:	d004      	beq.n	8009068 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	689b      	ldr	r3, [r3, #8]
 8009062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009066:	d107      	bne.n	8009078 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	681a      	ldr	r2, [r3, #0]
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009076:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800907c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009080:	d10f      	bne.n	80090a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	681a      	ldr	r2, [r3, #0]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009090:	601a      	str	r2, [r3, #0]
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	681a      	ldr	r2, [r3, #0]
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80090a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2201      	movs	r2, #1
 80090a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2200      	movs	r2, #0
 80090ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80090b2:	2303      	movs	r3, #3
 80090b4:	e017      	b.n	80090e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d101      	bne.n	80090c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80090bc:	2300      	movs	r3, #0
 80090be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	3b01      	subs	r3, #1
 80090c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	689a      	ldr	r2, [r3, #8]
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	4013      	ands	r3, r2
 80090d0:	68ba      	ldr	r2, [r7, #8]
 80090d2:	429a      	cmp	r2, r3
 80090d4:	bf0c      	ite	eq
 80090d6:	2301      	moveq	r3, #1
 80090d8:	2300      	movne	r3, #0
 80090da:	b2db      	uxtb	r3, r3
 80090dc:	461a      	mov	r2, r3
 80090de:	79fb      	ldrb	r3, [r7, #7]
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d19b      	bne.n	800901c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80090e4:	2300      	movs	r3, #0
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3720      	adds	r7, #32
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	20000038 	.word	0x20000038

080090f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b088      	sub	sp, #32
 80090f8:	af02      	add	r7, sp, #8
 80090fa:	60f8      	str	r0, [r7, #12]
 80090fc:	60b9      	str	r1, [r7, #8]
 80090fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009100:	4b1b      	ldr	r3, [pc, #108]	; (8009170 <SPI_EndRxTxTransaction+0x7c>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a1b      	ldr	r2, [pc, #108]	; (8009174 <SPI_EndRxTxTransaction+0x80>)
 8009106:	fba2 2303 	umull	r2, r3, r2, r3
 800910a:	0d5b      	lsrs	r3, r3, #21
 800910c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009110:	fb02 f303 	mul.w	r3, r2, r3
 8009114:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	685b      	ldr	r3, [r3, #4]
 800911a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800911e:	d112      	bne.n	8009146 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	9300      	str	r3, [sp, #0]
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	2200      	movs	r2, #0
 8009128:	2180      	movs	r1, #128	; 0x80
 800912a:	68f8      	ldr	r0, [r7, #12]
 800912c:	f7ff ff5a 	bl	8008fe4 <SPI_WaitFlagStateUntilTimeout>
 8009130:	4603      	mov	r3, r0
 8009132:	2b00      	cmp	r3, #0
 8009134:	d016      	beq.n	8009164 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800913a:	f043 0220 	orr.w	r2, r3, #32
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009142:	2303      	movs	r3, #3
 8009144:	e00f      	b.n	8009166 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d00a      	beq.n	8009162 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	3b01      	subs	r3, #1
 8009150:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	689b      	ldr	r3, [r3, #8]
 8009158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800915c:	2b80      	cmp	r3, #128	; 0x80
 800915e:	d0f2      	beq.n	8009146 <SPI_EndRxTxTransaction+0x52>
 8009160:	e000      	b.n	8009164 <SPI_EndRxTxTransaction+0x70>
        break;
 8009162:	bf00      	nop
  }

  return HAL_OK;
 8009164:	2300      	movs	r3, #0
}
 8009166:	4618      	mov	r0, r3
 8009168:	3718      	adds	r7, #24
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
 800916e:	bf00      	nop
 8009170:	20000038 	.word	0x20000038
 8009174:	165e9f81 	.word	0x165e9f81

08009178 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d101      	bne.n	800918a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009186:	2301      	movs	r3, #1
 8009188:	e041      	b.n	800920e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009190:	b2db      	uxtb	r3, r3
 8009192:	2b00      	cmp	r3, #0
 8009194:	d106      	bne.n	80091a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2200      	movs	r2, #0
 800919a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f000 f839 	bl	8009216 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2202      	movs	r2, #2
 80091a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681a      	ldr	r2, [r3, #0]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	3304      	adds	r3, #4
 80091b4:	4619      	mov	r1, r3
 80091b6:	4610      	mov	r0, r2
 80091b8:	f000 f9d8 	bl	800956c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2201      	movs	r2, #1
 80091c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2201      	movs	r2, #1
 80091c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2201      	movs	r2, #1
 80091d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2201      	movs	r2, #1
 80091d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2201      	movs	r2, #1
 80091e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2201      	movs	r2, #1
 80091e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2201      	movs	r2, #1
 80091f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2201      	movs	r2, #1
 80091f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2201      	movs	r2, #1
 8009200:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2201      	movs	r2, #1
 8009208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800920c:	2300      	movs	r3, #0
}
 800920e:	4618      	mov	r0, r3
 8009210:	3708      	adds	r7, #8
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}

08009216 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009216:	b480      	push	{r7}
 8009218:	b083      	sub	sp, #12
 800921a:	af00      	add	r7, sp, #0
 800921c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800921e:	bf00      	nop
 8009220:	370c      	adds	r7, #12
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr
	...

0800922c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800922c:	b480      	push	{r7}
 800922e:	b085      	sub	sp, #20
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800923a:	b2db      	uxtb	r3, r3
 800923c:	2b01      	cmp	r3, #1
 800923e:	d001      	beq.n	8009244 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009240:	2301      	movs	r3, #1
 8009242:	e04e      	b.n	80092e2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2202      	movs	r2, #2
 8009248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	68da      	ldr	r2, [r3, #12]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f042 0201 	orr.w	r2, r2, #1
 800925a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a23      	ldr	r2, [pc, #140]	; (80092f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d022      	beq.n	80092ac <HAL_TIM_Base_Start_IT+0x80>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800926e:	d01d      	beq.n	80092ac <HAL_TIM_Base_Start_IT+0x80>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4a1f      	ldr	r2, [pc, #124]	; (80092f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d018      	beq.n	80092ac <HAL_TIM_Base_Start_IT+0x80>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4a1e      	ldr	r2, [pc, #120]	; (80092f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d013      	beq.n	80092ac <HAL_TIM_Base_Start_IT+0x80>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a1c      	ldr	r2, [pc, #112]	; (80092fc <HAL_TIM_Base_Start_IT+0xd0>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d00e      	beq.n	80092ac <HAL_TIM_Base_Start_IT+0x80>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4a1b      	ldr	r2, [pc, #108]	; (8009300 <HAL_TIM_Base_Start_IT+0xd4>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d009      	beq.n	80092ac <HAL_TIM_Base_Start_IT+0x80>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4a19      	ldr	r2, [pc, #100]	; (8009304 <HAL_TIM_Base_Start_IT+0xd8>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d004      	beq.n	80092ac <HAL_TIM_Base_Start_IT+0x80>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4a18      	ldr	r2, [pc, #96]	; (8009308 <HAL_TIM_Base_Start_IT+0xdc>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d111      	bne.n	80092d0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	f003 0307 	and.w	r3, r3, #7
 80092b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	2b06      	cmp	r3, #6
 80092bc:	d010      	beq.n	80092e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	681a      	ldr	r2, [r3, #0]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f042 0201 	orr.w	r2, r2, #1
 80092cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092ce:	e007      	b.n	80092e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	681a      	ldr	r2, [r3, #0]
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f042 0201 	orr.w	r2, r2, #1
 80092de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80092e0:	2300      	movs	r3, #0
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3714      	adds	r7, #20
 80092e6:	46bd      	mov	sp, r7
 80092e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ec:	4770      	bx	lr
 80092ee:	bf00      	nop
 80092f0:	40010000 	.word	0x40010000
 80092f4:	40000400 	.word	0x40000400
 80092f8:	40000800 	.word	0x40000800
 80092fc:	40000c00 	.word	0x40000c00
 8009300:	40010400 	.word	0x40010400
 8009304:	40014000 	.word	0x40014000
 8009308:	40001800 	.word	0x40001800

0800930c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b082      	sub	sp, #8
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	691b      	ldr	r3, [r3, #16]
 800931a:	f003 0302 	and.w	r3, r3, #2
 800931e:	2b02      	cmp	r3, #2
 8009320:	d122      	bne.n	8009368 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	68db      	ldr	r3, [r3, #12]
 8009328:	f003 0302 	and.w	r3, r3, #2
 800932c:	2b02      	cmp	r3, #2
 800932e:	d11b      	bne.n	8009368 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f06f 0202 	mvn.w	r2, #2
 8009338:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2201      	movs	r2, #1
 800933e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	699b      	ldr	r3, [r3, #24]
 8009346:	f003 0303 	and.w	r3, r3, #3
 800934a:	2b00      	cmp	r3, #0
 800934c:	d003      	beq.n	8009356 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f000 f8ee 	bl	8009530 <HAL_TIM_IC_CaptureCallback>
 8009354:	e005      	b.n	8009362 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 f8e0 	bl	800951c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 f8f1 	bl	8009544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2200      	movs	r2, #0
 8009366:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	691b      	ldr	r3, [r3, #16]
 800936e:	f003 0304 	and.w	r3, r3, #4
 8009372:	2b04      	cmp	r3, #4
 8009374:	d122      	bne.n	80093bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	68db      	ldr	r3, [r3, #12]
 800937c:	f003 0304 	and.w	r3, r3, #4
 8009380:	2b04      	cmp	r3, #4
 8009382:	d11b      	bne.n	80093bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f06f 0204 	mvn.w	r2, #4
 800938c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2202      	movs	r2, #2
 8009392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	699b      	ldr	r3, [r3, #24]
 800939a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d003      	beq.n	80093aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 f8c4 	bl	8009530 <HAL_TIM_IC_CaptureCallback>
 80093a8:	e005      	b.n	80093b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f000 f8b6 	bl	800951c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f000 f8c7 	bl	8009544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2200      	movs	r2, #0
 80093ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	691b      	ldr	r3, [r3, #16]
 80093c2:	f003 0308 	and.w	r3, r3, #8
 80093c6:	2b08      	cmp	r3, #8
 80093c8:	d122      	bne.n	8009410 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	68db      	ldr	r3, [r3, #12]
 80093d0:	f003 0308 	and.w	r3, r3, #8
 80093d4:	2b08      	cmp	r3, #8
 80093d6:	d11b      	bne.n	8009410 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f06f 0208 	mvn.w	r2, #8
 80093e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2204      	movs	r2, #4
 80093e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	69db      	ldr	r3, [r3, #28]
 80093ee:	f003 0303 	and.w	r3, r3, #3
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d003      	beq.n	80093fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 f89a 	bl	8009530 <HAL_TIM_IC_CaptureCallback>
 80093fc:	e005      	b.n	800940a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 f88c 	bl	800951c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f000 f89d 	bl	8009544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2200      	movs	r2, #0
 800940e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	691b      	ldr	r3, [r3, #16]
 8009416:	f003 0310 	and.w	r3, r3, #16
 800941a:	2b10      	cmp	r3, #16
 800941c:	d122      	bne.n	8009464 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	68db      	ldr	r3, [r3, #12]
 8009424:	f003 0310 	and.w	r3, r3, #16
 8009428:	2b10      	cmp	r3, #16
 800942a:	d11b      	bne.n	8009464 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f06f 0210 	mvn.w	r2, #16
 8009434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2208      	movs	r2, #8
 800943a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	69db      	ldr	r3, [r3, #28]
 8009442:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009446:	2b00      	cmp	r3, #0
 8009448:	d003      	beq.n	8009452 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 f870 	bl	8009530 <HAL_TIM_IC_CaptureCallback>
 8009450:	e005      	b.n	800945e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f000 f862 	bl	800951c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f000 f873 	bl	8009544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2200      	movs	r2, #0
 8009462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	691b      	ldr	r3, [r3, #16]
 800946a:	f003 0301 	and.w	r3, r3, #1
 800946e:	2b01      	cmp	r3, #1
 8009470:	d10e      	bne.n	8009490 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	68db      	ldr	r3, [r3, #12]
 8009478:	f003 0301 	and.w	r3, r3, #1
 800947c:	2b01      	cmp	r3, #1
 800947e:	d107      	bne.n	8009490 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f06f 0201 	mvn.w	r2, #1
 8009488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f7fd fc10 	bl	8006cb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	691b      	ldr	r3, [r3, #16]
 8009496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800949a:	2b80      	cmp	r3, #128	; 0x80
 800949c:	d10e      	bne.n	80094bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	68db      	ldr	r3, [r3, #12]
 80094a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094a8:	2b80      	cmp	r3, #128	; 0x80
 80094aa:	d107      	bne.n	80094bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80094b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 f902 	bl	80096c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	691b      	ldr	r3, [r3, #16]
 80094c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094c6:	2b40      	cmp	r3, #64	; 0x40
 80094c8:	d10e      	bne.n	80094e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	68db      	ldr	r3, [r3, #12]
 80094d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094d4:	2b40      	cmp	r3, #64	; 0x40
 80094d6:	d107      	bne.n	80094e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80094e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f000 f838 	bl	8009558 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	691b      	ldr	r3, [r3, #16]
 80094ee:	f003 0320 	and.w	r3, r3, #32
 80094f2:	2b20      	cmp	r3, #32
 80094f4:	d10e      	bne.n	8009514 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	68db      	ldr	r3, [r3, #12]
 80094fc:	f003 0320 	and.w	r3, r3, #32
 8009500:	2b20      	cmp	r3, #32
 8009502:	d107      	bne.n	8009514 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f06f 0220 	mvn.w	r2, #32
 800950c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 f8cc 	bl	80096ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009514:	bf00      	nop
 8009516:	3708      	adds	r7, #8
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}

0800951c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800951c:	b480      	push	{r7}
 800951e:	b083      	sub	sp, #12
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009524:	bf00      	nop
 8009526:	370c      	adds	r7, #12
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr

08009530 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009538:	bf00      	nop
 800953a:	370c      	adds	r7, #12
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr

08009544 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800954c:	bf00      	nop
 800954e:	370c      	adds	r7, #12
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr

08009558 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009558:	b480      	push	{r7}
 800955a:	b083      	sub	sp, #12
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009560:	bf00      	nop
 8009562:	370c      	adds	r7, #12
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr

0800956c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800956c:	b480      	push	{r7}
 800956e:	b085      	sub	sp, #20
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	4a40      	ldr	r2, [pc, #256]	; (8009680 <TIM_Base_SetConfig+0x114>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d013      	beq.n	80095ac <TIM_Base_SetConfig+0x40>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800958a:	d00f      	beq.n	80095ac <TIM_Base_SetConfig+0x40>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	4a3d      	ldr	r2, [pc, #244]	; (8009684 <TIM_Base_SetConfig+0x118>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d00b      	beq.n	80095ac <TIM_Base_SetConfig+0x40>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	4a3c      	ldr	r2, [pc, #240]	; (8009688 <TIM_Base_SetConfig+0x11c>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d007      	beq.n	80095ac <TIM_Base_SetConfig+0x40>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	4a3b      	ldr	r2, [pc, #236]	; (800968c <TIM_Base_SetConfig+0x120>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d003      	beq.n	80095ac <TIM_Base_SetConfig+0x40>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	4a3a      	ldr	r2, [pc, #232]	; (8009690 <TIM_Base_SetConfig+0x124>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d108      	bne.n	80095be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	685b      	ldr	r3, [r3, #4]
 80095b8:	68fa      	ldr	r2, [r7, #12]
 80095ba:	4313      	orrs	r3, r2
 80095bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	4a2f      	ldr	r2, [pc, #188]	; (8009680 <TIM_Base_SetConfig+0x114>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d02b      	beq.n	800961e <TIM_Base_SetConfig+0xb2>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095cc:	d027      	beq.n	800961e <TIM_Base_SetConfig+0xb2>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	4a2c      	ldr	r2, [pc, #176]	; (8009684 <TIM_Base_SetConfig+0x118>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d023      	beq.n	800961e <TIM_Base_SetConfig+0xb2>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	4a2b      	ldr	r2, [pc, #172]	; (8009688 <TIM_Base_SetConfig+0x11c>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d01f      	beq.n	800961e <TIM_Base_SetConfig+0xb2>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	4a2a      	ldr	r2, [pc, #168]	; (800968c <TIM_Base_SetConfig+0x120>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d01b      	beq.n	800961e <TIM_Base_SetConfig+0xb2>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	4a29      	ldr	r2, [pc, #164]	; (8009690 <TIM_Base_SetConfig+0x124>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d017      	beq.n	800961e <TIM_Base_SetConfig+0xb2>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	4a28      	ldr	r2, [pc, #160]	; (8009694 <TIM_Base_SetConfig+0x128>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d013      	beq.n	800961e <TIM_Base_SetConfig+0xb2>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	4a27      	ldr	r2, [pc, #156]	; (8009698 <TIM_Base_SetConfig+0x12c>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d00f      	beq.n	800961e <TIM_Base_SetConfig+0xb2>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	4a26      	ldr	r2, [pc, #152]	; (800969c <TIM_Base_SetConfig+0x130>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d00b      	beq.n	800961e <TIM_Base_SetConfig+0xb2>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	4a25      	ldr	r2, [pc, #148]	; (80096a0 <TIM_Base_SetConfig+0x134>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d007      	beq.n	800961e <TIM_Base_SetConfig+0xb2>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	4a24      	ldr	r2, [pc, #144]	; (80096a4 <TIM_Base_SetConfig+0x138>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d003      	beq.n	800961e <TIM_Base_SetConfig+0xb2>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	4a23      	ldr	r2, [pc, #140]	; (80096a8 <TIM_Base_SetConfig+0x13c>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d108      	bne.n	8009630 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009624:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	68db      	ldr	r3, [r3, #12]
 800962a:	68fa      	ldr	r2, [r7, #12]
 800962c:	4313      	orrs	r3, r2
 800962e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	695b      	ldr	r3, [r3, #20]
 800963a:	4313      	orrs	r3, r2
 800963c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	68fa      	ldr	r2, [r7, #12]
 8009642:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	689a      	ldr	r2, [r3, #8]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	681a      	ldr	r2, [r3, #0]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	4a0a      	ldr	r2, [pc, #40]	; (8009680 <TIM_Base_SetConfig+0x114>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d003      	beq.n	8009664 <TIM_Base_SetConfig+0xf8>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	4a0c      	ldr	r2, [pc, #48]	; (8009690 <TIM_Base_SetConfig+0x124>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d103      	bne.n	800966c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	691a      	ldr	r2, [r3, #16]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2201      	movs	r2, #1
 8009670:	615a      	str	r2, [r3, #20]
}
 8009672:	bf00      	nop
 8009674:	3714      	adds	r7, #20
 8009676:	46bd      	mov	sp, r7
 8009678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967c:	4770      	bx	lr
 800967e:	bf00      	nop
 8009680:	40010000 	.word	0x40010000
 8009684:	40000400 	.word	0x40000400
 8009688:	40000800 	.word	0x40000800
 800968c:	40000c00 	.word	0x40000c00
 8009690:	40010400 	.word	0x40010400
 8009694:	40014000 	.word	0x40014000
 8009698:	40014400 	.word	0x40014400
 800969c:	40014800 	.word	0x40014800
 80096a0:	40001800 	.word	0x40001800
 80096a4:	40001c00 	.word	0x40001c00
 80096a8:	40002000 	.word	0x40002000

080096ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b083      	sub	sp, #12
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80096b4:	bf00      	nop
 80096b6:	370c      	adds	r7, #12
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr

080096c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b083      	sub	sp, #12
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80096c8:	bf00      	nop
 80096ca:	370c      	adds	r7, #12
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr

080096d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d101      	bne.n	80096e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80096e2:	2301      	movs	r3, #1
 80096e4:	e03f      	b.n	8009766 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096ec:	b2db      	uxtb	r3, r3
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d106      	bne.n	8009700 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2200      	movs	r2, #0
 80096f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f7fd fb68 	bl	8006dd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2224      	movs	r2, #36	; 0x24
 8009704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	68da      	ldr	r2, [r3, #12]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009716:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f000 f929 	bl	8009970 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	691a      	ldr	r2, [r3, #16]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800972c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	695a      	ldr	r2, [r3, #20]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800973c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	68da      	ldr	r2, [r3, #12]
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800974c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2200      	movs	r2, #0
 8009752:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2220      	movs	r2, #32
 8009758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2220      	movs	r2, #32
 8009760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009764:	2300      	movs	r3, #0
}
 8009766:	4618      	mov	r0, r3
 8009768:	3708      	adds	r7, #8
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}

0800976e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800976e:	b580      	push	{r7, lr}
 8009770:	b08a      	sub	sp, #40	; 0x28
 8009772:	af02      	add	r7, sp, #8
 8009774:	60f8      	str	r0, [r7, #12]
 8009776:	60b9      	str	r1, [r7, #8]
 8009778:	603b      	str	r3, [r7, #0]
 800977a:	4613      	mov	r3, r2
 800977c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800977e:	2300      	movs	r3, #0
 8009780:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009788:	b2db      	uxtb	r3, r3
 800978a:	2b20      	cmp	r3, #32
 800978c:	d17c      	bne.n	8009888 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d002      	beq.n	800979a <HAL_UART_Transmit+0x2c>
 8009794:	88fb      	ldrh	r3, [r7, #6]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d101      	bne.n	800979e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800979a:	2301      	movs	r3, #1
 800979c:	e075      	b.n	800988a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097a4:	2b01      	cmp	r3, #1
 80097a6:	d101      	bne.n	80097ac <HAL_UART_Transmit+0x3e>
 80097a8:	2302      	movs	r3, #2
 80097aa:	e06e      	b.n	800988a <HAL_UART_Transmit+0x11c>
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2201      	movs	r2, #1
 80097b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2200      	movs	r2, #0
 80097b8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	2221      	movs	r2, #33	; 0x21
 80097be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80097c2:	f7fd ff55 	bl	8007670 <HAL_GetTick>
 80097c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	88fa      	ldrh	r2, [r7, #6]
 80097cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	88fa      	ldrh	r2, [r7, #6]
 80097d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	689b      	ldr	r3, [r3, #8]
 80097d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097dc:	d108      	bne.n	80097f0 <HAL_UART_Transmit+0x82>
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	691b      	ldr	r3, [r3, #16]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d104      	bne.n	80097f0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80097e6:	2300      	movs	r3, #0
 80097e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	61bb      	str	r3, [r7, #24]
 80097ee:	e003      	b.n	80097f8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80097f4:	2300      	movs	r3, #0
 80097f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2200      	movs	r2, #0
 80097fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009800:	e02a      	b.n	8009858 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	9300      	str	r3, [sp, #0]
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	2200      	movs	r2, #0
 800980a:	2180      	movs	r1, #128	; 0x80
 800980c:	68f8      	ldr	r0, [r7, #12]
 800980e:	f000 f840 	bl	8009892 <UART_WaitOnFlagUntilTimeout>
 8009812:	4603      	mov	r3, r0
 8009814:	2b00      	cmp	r3, #0
 8009816:	d001      	beq.n	800981c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009818:	2303      	movs	r3, #3
 800981a:	e036      	b.n	800988a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800981c:	69fb      	ldr	r3, [r7, #28]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d10b      	bne.n	800983a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009822:	69bb      	ldr	r3, [r7, #24]
 8009824:	881b      	ldrh	r3, [r3, #0]
 8009826:	461a      	mov	r2, r3
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009830:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009832:	69bb      	ldr	r3, [r7, #24]
 8009834:	3302      	adds	r3, #2
 8009836:	61bb      	str	r3, [r7, #24]
 8009838:	e007      	b.n	800984a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800983a:	69fb      	ldr	r3, [r7, #28]
 800983c:	781a      	ldrb	r2, [r3, #0]
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009844:	69fb      	ldr	r3, [r7, #28]
 8009846:	3301      	adds	r3, #1
 8009848:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800984e:	b29b      	uxth	r3, r3
 8009850:	3b01      	subs	r3, #1
 8009852:	b29a      	uxth	r2, r3
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800985c:	b29b      	uxth	r3, r3
 800985e:	2b00      	cmp	r3, #0
 8009860:	d1cf      	bne.n	8009802 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	9300      	str	r3, [sp, #0]
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	2200      	movs	r2, #0
 800986a:	2140      	movs	r1, #64	; 0x40
 800986c:	68f8      	ldr	r0, [r7, #12]
 800986e:	f000 f810 	bl	8009892 <UART_WaitOnFlagUntilTimeout>
 8009872:	4603      	mov	r3, r0
 8009874:	2b00      	cmp	r3, #0
 8009876:	d001      	beq.n	800987c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009878:	2303      	movs	r3, #3
 800987a:	e006      	b.n	800988a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2220      	movs	r2, #32
 8009880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009884:	2300      	movs	r3, #0
 8009886:	e000      	b.n	800988a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009888:	2302      	movs	r3, #2
  }
}
 800988a:	4618      	mov	r0, r3
 800988c:	3720      	adds	r7, #32
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}

08009892 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009892:	b580      	push	{r7, lr}
 8009894:	b090      	sub	sp, #64	; 0x40
 8009896:	af00      	add	r7, sp, #0
 8009898:	60f8      	str	r0, [r7, #12]
 800989a:	60b9      	str	r1, [r7, #8]
 800989c:	603b      	str	r3, [r7, #0]
 800989e:	4613      	mov	r3, r2
 80098a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098a2:	e050      	b.n	8009946 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098aa:	d04c      	beq.n	8009946 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80098ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d007      	beq.n	80098c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80098b2:	f7fd fedd 	bl	8007670 <HAL_GetTick>
 80098b6:	4602      	mov	r2, r0
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	1ad3      	subs	r3, r2, r3
 80098bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80098be:	429a      	cmp	r2, r3
 80098c0:	d241      	bcs.n	8009946 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	330c      	adds	r3, #12
 80098c8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098cc:	e853 3f00 	ldrex	r3, [r3]
 80098d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80098d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80098d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	330c      	adds	r3, #12
 80098e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80098e2:	637a      	str	r2, [r7, #52]	; 0x34
 80098e4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80098e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80098ea:	e841 2300 	strex	r3, r2, [r1]
 80098ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80098f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d1e5      	bne.n	80098c2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	3314      	adds	r3, #20
 80098fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	e853 3f00 	ldrex	r3, [r3]
 8009904:	613b      	str	r3, [r7, #16]
   return(result);
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	f023 0301 	bic.w	r3, r3, #1
 800990c:	63bb      	str	r3, [r7, #56]	; 0x38
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	3314      	adds	r3, #20
 8009914:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009916:	623a      	str	r2, [r7, #32]
 8009918:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800991a:	69f9      	ldr	r1, [r7, #28]
 800991c:	6a3a      	ldr	r2, [r7, #32]
 800991e:	e841 2300 	strex	r3, r2, [r1]
 8009922:	61bb      	str	r3, [r7, #24]
   return(result);
 8009924:	69bb      	ldr	r3, [r7, #24]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d1e5      	bne.n	80098f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2220      	movs	r2, #32
 800992e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2220      	movs	r2, #32
 8009936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	2200      	movs	r2, #0
 800993e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009942:	2303      	movs	r3, #3
 8009944:	e00f      	b.n	8009966 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	681a      	ldr	r2, [r3, #0]
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	4013      	ands	r3, r2
 8009950:	68ba      	ldr	r2, [r7, #8]
 8009952:	429a      	cmp	r2, r3
 8009954:	bf0c      	ite	eq
 8009956:	2301      	moveq	r3, #1
 8009958:	2300      	movne	r3, #0
 800995a:	b2db      	uxtb	r3, r3
 800995c:	461a      	mov	r2, r3
 800995e:	79fb      	ldrb	r3, [r7, #7]
 8009960:	429a      	cmp	r2, r3
 8009962:	d09f      	beq.n	80098a4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009964:	2300      	movs	r3, #0
}
 8009966:	4618      	mov	r0, r3
 8009968:	3740      	adds	r7, #64	; 0x40
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}
	...

08009970 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009970:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009974:	b0c0      	sub	sp, #256	; 0x100
 8009976:	af00      	add	r7, sp, #0
 8009978:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800997c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	691b      	ldr	r3, [r3, #16]
 8009984:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800998c:	68d9      	ldr	r1, [r3, #12]
 800998e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009992:	681a      	ldr	r2, [r3, #0]
 8009994:	ea40 0301 	orr.w	r3, r0, r1
 8009998:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800999a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800999e:	689a      	ldr	r2, [r3, #8]
 80099a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099a4:	691b      	ldr	r3, [r3, #16]
 80099a6:	431a      	orrs	r2, r3
 80099a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099ac:	695b      	ldr	r3, [r3, #20]
 80099ae:	431a      	orrs	r2, r3
 80099b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099b4:	69db      	ldr	r3, [r3, #28]
 80099b6:	4313      	orrs	r3, r2
 80099b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80099bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	68db      	ldr	r3, [r3, #12]
 80099c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80099c8:	f021 010c 	bic.w	r1, r1, #12
 80099cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099d0:	681a      	ldr	r2, [r3, #0]
 80099d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80099d6:	430b      	orrs	r3, r1
 80099d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80099da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	695b      	ldr	r3, [r3, #20]
 80099e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80099e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099ea:	6999      	ldr	r1, [r3, #24]
 80099ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099f0:	681a      	ldr	r2, [r3, #0]
 80099f2:	ea40 0301 	orr.w	r3, r0, r1
 80099f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80099f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099fc:	681a      	ldr	r2, [r3, #0]
 80099fe:	4b8f      	ldr	r3, [pc, #572]	; (8009c3c <UART_SetConfig+0x2cc>)
 8009a00:	429a      	cmp	r2, r3
 8009a02:	d005      	beq.n	8009a10 <UART_SetConfig+0xa0>
 8009a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a08:	681a      	ldr	r2, [r3, #0]
 8009a0a:	4b8d      	ldr	r3, [pc, #564]	; (8009c40 <UART_SetConfig+0x2d0>)
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	d104      	bne.n	8009a1a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009a10:	f7fe fe0e 	bl	8008630 <HAL_RCC_GetPCLK2Freq>
 8009a14:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009a18:	e003      	b.n	8009a22 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009a1a:	f7fe fdf5 	bl	8008608 <HAL_RCC_GetPCLK1Freq>
 8009a1e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a26:	69db      	ldr	r3, [r3, #28]
 8009a28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a2c:	f040 810c 	bne.w	8009c48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009a30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a34:	2200      	movs	r2, #0
 8009a36:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009a3a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009a3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009a42:	4622      	mov	r2, r4
 8009a44:	462b      	mov	r3, r5
 8009a46:	1891      	adds	r1, r2, r2
 8009a48:	65b9      	str	r1, [r7, #88]	; 0x58
 8009a4a:	415b      	adcs	r3, r3
 8009a4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009a52:	4621      	mov	r1, r4
 8009a54:	eb12 0801 	adds.w	r8, r2, r1
 8009a58:	4629      	mov	r1, r5
 8009a5a:	eb43 0901 	adc.w	r9, r3, r1
 8009a5e:	f04f 0200 	mov.w	r2, #0
 8009a62:	f04f 0300 	mov.w	r3, #0
 8009a66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009a6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009a6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009a72:	4690      	mov	r8, r2
 8009a74:	4699      	mov	r9, r3
 8009a76:	4623      	mov	r3, r4
 8009a78:	eb18 0303 	adds.w	r3, r8, r3
 8009a7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009a80:	462b      	mov	r3, r5
 8009a82:	eb49 0303 	adc.w	r3, r9, r3
 8009a86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a8e:	685b      	ldr	r3, [r3, #4]
 8009a90:	2200      	movs	r2, #0
 8009a92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009a96:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009a9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009a9e:	460b      	mov	r3, r1
 8009aa0:	18db      	adds	r3, r3, r3
 8009aa2:	653b      	str	r3, [r7, #80]	; 0x50
 8009aa4:	4613      	mov	r3, r2
 8009aa6:	eb42 0303 	adc.w	r3, r2, r3
 8009aaa:	657b      	str	r3, [r7, #84]	; 0x54
 8009aac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009ab0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009ab4:	f7f7 fa56 	bl	8000f64 <__aeabi_uldivmod>
 8009ab8:	4602      	mov	r2, r0
 8009aba:	460b      	mov	r3, r1
 8009abc:	4b61      	ldr	r3, [pc, #388]	; (8009c44 <UART_SetConfig+0x2d4>)
 8009abe:	fba3 2302 	umull	r2, r3, r3, r2
 8009ac2:	095b      	lsrs	r3, r3, #5
 8009ac4:	011c      	lsls	r4, r3, #4
 8009ac6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009aca:	2200      	movs	r2, #0
 8009acc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009ad0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009ad4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009ad8:	4642      	mov	r2, r8
 8009ada:	464b      	mov	r3, r9
 8009adc:	1891      	adds	r1, r2, r2
 8009ade:	64b9      	str	r1, [r7, #72]	; 0x48
 8009ae0:	415b      	adcs	r3, r3
 8009ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ae4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009ae8:	4641      	mov	r1, r8
 8009aea:	eb12 0a01 	adds.w	sl, r2, r1
 8009aee:	4649      	mov	r1, r9
 8009af0:	eb43 0b01 	adc.w	fp, r3, r1
 8009af4:	f04f 0200 	mov.w	r2, #0
 8009af8:	f04f 0300 	mov.w	r3, #0
 8009afc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009b00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009b04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009b08:	4692      	mov	sl, r2
 8009b0a:	469b      	mov	fp, r3
 8009b0c:	4643      	mov	r3, r8
 8009b0e:	eb1a 0303 	adds.w	r3, sl, r3
 8009b12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009b16:	464b      	mov	r3, r9
 8009b18:	eb4b 0303 	adc.w	r3, fp, r3
 8009b1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	2200      	movs	r2, #0
 8009b28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009b2c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009b30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009b34:	460b      	mov	r3, r1
 8009b36:	18db      	adds	r3, r3, r3
 8009b38:	643b      	str	r3, [r7, #64]	; 0x40
 8009b3a:	4613      	mov	r3, r2
 8009b3c:	eb42 0303 	adc.w	r3, r2, r3
 8009b40:	647b      	str	r3, [r7, #68]	; 0x44
 8009b42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009b46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009b4a:	f7f7 fa0b 	bl	8000f64 <__aeabi_uldivmod>
 8009b4e:	4602      	mov	r2, r0
 8009b50:	460b      	mov	r3, r1
 8009b52:	4611      	mov	r1, r2
 8009b54:	4b3b      	ldr	r3, [pc, #236]	; (8009c44 <UART_SetConfig+0x2d4>)
 8009b56:	fba3 2301 	umull	r2, r3, r3, r1
 8009b5a:	095b      	lsrs	r3, r3, #5
 8009b5c:	2264      	movs	r2, #100	; 0x64
 8009b5e:	fb02 f303 	mul.w	r3, r2, r3
 8009b62:	1acb      	subs	r3, r1, r3
 8009b64:	00db      	lsls	r3, r3, #3
 8009b66:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009b6a:	4b36      	ldr	r3, [pc, #216]	; (8009c44 <UART_SetConfig+0x2d4>)
 8009b6c:	fba3 2302 	umull	r2, r3, r3, r2
 8009b70:	095b      	lsrs	r3, r3, #5
 8009b72:	005b      	lsls	r3, r3, #1
 8009b74:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009b78:	441c      	add	r4, r3
 8009b7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b7e:	2200      	movs	r2, #0
 8009b80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009b84:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009b88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009b8c:	4642      	mov	r2, r8
 8009b8e:	464b      	mov	r3, r9
 8009b90:	1891      	adds	r1, r2, r2
 8009b92:	63b9      	str	r1, [r7, #56]	; 0x38
 8009b94:	415b      	adcs	r3, r3
 8009b96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009b9c:	4641      	mov	r1, r8
 8009b9e:	1851      	adds	r1, r2, r1
 8009ba0:	6339      	str	r1, [r7, #48]	; 0x30
 8009ba2:	4649      	mov	r1, r9
 8009ba4:	414b      	adcs	r3, r1
 8009ba6:	637b      	str	r3, [r7, #52]	; 0x34
 8009ba8:	f04f 0200 	mov.w	r2, #0
 8009bac:	f04f 0300 	mov.w	r3, #0
 8009bb0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009bb4:	4659      	mov	r1, fp
 8009bb6:	00cb      	lsls	r3, r1, #3
 8009bb8:	4651      	mov	r1, sl
 8009bba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009bbe:	4651      	mov	r1, sl
 8009bc0:	00ca      	lsls	r2, r1, #3
 8009bc2:	4610      	mov	r0, r2
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	4642      	mov	r2, r8
 8009bca:	189b      	adds	r3, r3, r2
 8009bcc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009bd0:	464b      	mov	r3, r9
 8009bd2:	460a      	mov	r2, r1
 8009bd4:	eb42 0303 	adc.w	r3, r2, r3
 8009bd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009be0:	685b      	ldr	r3, [r3, #4]
 8009be2:	2200      	movs	r2, #0
 8009be4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009be8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009bec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009bf0:	460b      	mov	r3, r1
 8009bf2:	18db      	adds	r3, r3, r3
 8009bf4:	62bb      	str	r3, [r7, #40]	; 0x28
 8009bf6:	4613      	mov	r3, r2
 8009bf8:	eb42 0303 	adc.w	r3, r2, r3
 8009bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009bfe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009c02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009c06:	f7f7 f9ad 	bl	8000f64 <__aeabi_uldivmod>
 8009c0a:	4602      	mov	r2, r0
 8009c0c:	460b      	mov	r3, r1
 8009c0e:	4b0d      	ldr	r3, [pc, #52]	; (8009c44 <UART_SetConfig+0x2d4>)
 8009c10:	fba3 1302 	umull	r1, r3, r3, r2
 8009c14:	095b      	lsrs	r3, r3, #5
 8009c16:	2164      	movs	r1, #100	; 0x64
 8009c18:	fb01 f303 	mul.w	r3, r1, r3
 8009c1c:	1ad3      	subs	r3, r2, r3
 8009c1e:	00db      	lsls	r3, r3, #3
 8009c20:	3332      	adds	r3, #50	; 0x32
 8009c22:	4a08      	ldr	r2, [pc, #32]	; (8009c44 <UART_SetConfig+0x2d4>)
 8009c24:	fba2 2303 	umull	r2, r3, r2, r3
 8009c28:	095b      	lsrs	r3, r3, #5
 8009c2a:	f003 0207 	and.w	r2, r3, #7
 8009c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4422      	add	r2, r4
 8009c36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009c38:	e105      	b.n	8009e46 <UART_SetConfig+0x4d6>
 8009c3a:	bf00      	nop
 8009c3c:	40011000 	.word	0x40011000
 8009c40:	40011400 	.word	0x40011400
 8009c44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009c48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009c52:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009c56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009c5a:	4642      	mov	r2, r8
 8009c5c:	464b      	mov	r3, r9
 8009c5e:	1891      	adds	r1, r2, r2
 8009c60:	6239      	str	r1, [r7, #32]
 8009c62:	415b      	adcs	r3, r3
 8009c64:	627b      	str	r3, [r7, #36]	; 0x24
 8009c66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009c6a:	4641      	mov	r1, r8
 8009c6c:	1854      	adds	r4, r2, r1
 8009c6e:	4649      	mov	r1, r9
 8009c70:	eb43 0501 	adc.w	r5, r3, r1
 8009c74:	f04f 0200 	mov.w	r2, #0
 8009c78:	f04f 0300 	mov.w	r3, #0
 8009c7c:	00eb      	lsls	r3, r5, #3
 8009c7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009c82:	00e2      	lsls	r2, r4, #3
 8009c84:	4614      	mov	r4, r2
 8009c86:	461d      	mov	r5, r3
 8009c88:	4643      	mov	r3, r8
 8009c8a:	18e3      	adds	r3, r4, r3
 8009c8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009c90:	464b      	mov	r3, r9
 8009c92:	eb45 0303 	adc.w	r3, r5, r3
 8009c96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009ca6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009caa:	f04f 0200 	mov.w	r2, #0
 8009cae:	f04f 0300 	mov.w	r3, #0
 8009cb2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009cb6:	4629      	mov	r1, r5
 8009cb8:	008b      	lsls	r3, r1, #2
 8009cba:	4621      	mov	r1, r4
 8009cbc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009cc0:	4621      	mov	r1, r4
 8009cc2:	008a      	lsls	r2, r1, #2
 8009cc4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009cc8:	f7f7 f94c 	bl	8000f64 <__aeabi_uldivmod>
 8009ccc:	4602      	mov	r2, r0
 8009cce:	460b      	mov	r3, r1
 8009cd0:	4b60      	ldr	r3, [pc, #384]	; (8009e54 <UART_SetConfig+0x4e4>)
 8009cd2:	fba3 2302 	umull	r2, r3, r3, r2
 8009cd6:	095b      	lsrs	r3, r3, #5
 8009cd8:	011c      	lsls	r4, r3, #4
 8009cda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009cde:	2200      	movs	r2, #0
 8009ce0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009ce4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009ce8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009cec:	4642      	mov	r2, r8
 8009cee:	464b      	mov	r3, r9
 8009cf0:	1891      	adds	r1, r2, r2
 8009cf2:	61b9      	str	r1, [r7, #24]
 8009cf4:	415b      	adcs	r3, r3
 8009cf6:	61fb      	str	r3, [r7, #28]
 8009cf8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009cfc:	4641      	mov	r1, r8
 8009cfe:	1851      	adds	r1, r2, r1
 8009d00:	6139      	str	r1, [r7, #16]
 8009d02:	4649      	mov	r1, r9
 8009d04:	414b      	adcs	r3, r1
 8009d06:	617b      	str	r3, [r7, #20]
 8009d08:	f04f 0200 	mov.w	r2, #0
 8009d0c:	f04f 0300 	mov.w	r3, #0
 8009d10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009d14:	4659      	mov	r1, fp
 8009d16:	00cb      	lsls	r3, r1, #3
 8009d18:	4651      	mov	r1, sl
 8009d1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009d1e:	4651      	mov	r1, sl
 8009d20:	00ca      	lsls	r2, r1, #3
 8009d22:	4610      	mov	r0, r2
 8009d24:	4619      	mov	r1, r3
 8009d26:	4603      	mov	r3, r0
 8009d28:	4642      	mov	r2, r8
 8009d2a:	189b      	adds	r3, r3, r2
 8009d2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009d30:	464b      	mov	r3, r9
 8009d32:	460a      	mov	r2, r1
 8009d34:	eb42 0303 	adc.w	r3, r2, r3
 8009d38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	2200      	movs	r2, #0
 8009d44:	67bb      	str	r3, [r7, #120]	; 0x78
 8009d46:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009d48:	f04f 0200 	mov.w	r2, #0
 8009d4c:	f04f 0300 	mov.w	r3, #0
 8009d50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009d54:	4649      	mov	r1, r9
 8009d56:	008b      	lsls	r3, r1, #2
 8009d58:	4641      	mov	r1, r8
 8009d5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009d5e:	4641      	mov	r1, r8
 8009d60:	008a      	lsls	r2, r1, #2
 8009d62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009d66:	f7f7 f8fd 	bl	8000f64 <__aeabi_uldivmod>
 8009d6a:	4602      	mov	r2, r0
 8009d6c:	460b      	mov	r3, r1
 8009d6e:	4b39      	ldr	r3, [pc, #228]	; (8009e54 <UART_SetConfig+0x4e4>)
 8009d70:	fba3 1302 	umull	r1, r3, r3, r2
 8009d74:	095b      	lsrs	r3, r3, #5
 8009d76:	2164      	movs	r1, #100	; 0x64
 8009d78:	fb01 f303 	mul.w	r3, r1, r3
 8009d7c:	1ad3      	subs	r3, r2, r3
 8009d7e:	011b      	lsls	r3, r3, #4
 8009d80:	3332      	adds	r3, #50	; 0x32
 8009d82:	4a34      	ldr	r2, [pc, #208]	; (8009e54 <UART_SetConfig+0x4e4>)
 8009d84:	fba2 2303 	umull	r2, r3, r2, r3
 8009d88:	095b      	lsrs	r3, r3, #5
 8009d8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d8e:	441c      	add	r4, r3
 8009d90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009d94:	2200      	movs	r2, #0
 8009d96:	673b      	str	r3, [r7, #112]	; 0x70
 8009d98:	677a      	str	r2, [r7, #116]	; 0x74
 8009d9a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009d9e:	4642      	mov	r2, r8
 8009da0:	464b      	mov	r3, r9
 8009da2:	1891      	adds	r1, r2, r2
 8009da4:	60b9      	str	r1, [r7, #8]
 8009da6:	415b      	adcs	r3, r3
 8009da8:	60fb      	str	r3, [r7, #12]
 8009daa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009dae:	4641      	mov	r1, r8
 8009db0:	1851      	adds	r1, r2, r1
 8009db2:	6039      	str	r1, [r7, #0]
 8009db4:	4649      	mov	r1, r9
 8009db6:	414b      	adcs	r3, r1
 8009db8:	607b      	str	r3, [r7, #4]
 8009dba:	f04f 0200 	mov.w	r2, #0
 8009dbe:	f04f 0300 	mov.w	r3, #0
 8009dc2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009dc6:	4659      	mov	r1, fp
 8009dc8:	00cb      	lsls	r3, r1, #3
 8009dca:	4651      	mov	r1, sl
 8009dcc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009dd0:	4651      	mov	r1, sl
 8009dd2:	00ca      	lsls	r2, r1, #3
 8009dd4:	4610      	mov	r0, r2
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	4603      	mov	r3, r0
 8009dda:	4642      	mov	r2, r8
 8009ddc:	189b      	adds	r3, r3, r2
 8009dde:	66bb      	str	r3, [r7, #104]	; 0x68
 8009de0:	464b      	mov	r3, r9
 8009de2:	460a      	mov	r2, r1
 8009de4:	eb42 0303 	adc.w	r3, r2, r3
 8009de8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dee:	685b      	ldr	r3, [r3, #4]
 8009df0:	2200      	movs	r2, #0
 8009df2:	663b      	str	r3, [r7, #96]	; 0x60
 8009df4:	667a      	str	r2, [r7, #100]	; 0x64
 8009df6:	f04f 0200 	mov.w	r2, #0
 8009dfa:	f04f 0300 	mov.w	r3, #0
 8009dfe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009e02:	4649      	mov	r1, r9
 8009e04:	008b      	lsls	r3, r1, #2
 8009e06:	4641      	mov	r1, r8
 8009e08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009e0c:	4641      	mov	r1, r8
 8009e0e:	008a      	lsls	r2, r1, #2
 8009e10:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009e14:	f7f7 f8a6 	bl	8000f64 <__aeabi_uldivmod>
 8009e18:	4602      	mov	r2, r0
 8009e1a:	460b      	mov	r3, r1
 8009e1c:	4b0d      	ldr	r3, [pc, #52]	; (8009e54 <UART_SetConfig+0x4e4>)
 8009e1e:	fba3 1302 	umull	r1, r3, r3, r2
 8009e22:	095b      	lsrs	r3, r3, #5
 8009e24:	2164      	movs	r1, #100	; 0x64
 8009e26:	fb01 f303 	mul.w	r3, r1, r3
 8009e2a:	1ad3      	subs	r3, r2, r3
 8009e2c:	011b      	lsls	r3, r3, #4
 8009e2e:	3332      	adds	r3, #50	; 0x32
 8009e30:	4a08      	ldr	r2, [pc, #32]	; (8009e54 <UART_SetConfig+0x4e4>)
 8009e32:	fba2 2303 	umull	r2, r3, r2, r3
 8009e36:	095b      	lsrs	r3, r3, #5
 8009e38:	f003 020f 	and.w	r2, r3, #15
 8009e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	4422      	add	r2, r4
 8009e44:	609a      	str	r2, [r3, #8]
}
 8009e46:	bf00      	nop
 8009e48:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e52:	bf00      	nop
 8009e54:	51eb851f 	.word	0x51eb851f

08009e58 <roundf>:
 8009e58:	ee10 0a10 	vmov	r0, s0
 8009e5c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8009e60:	3a7f      	subs	r2, #127	; 0x7f
 8009e62:	2a16      	cmp	r2, #22
 8009e64:	dc15      	bgt.n	8009e92 <roundf+0x3a>
 8009e66:	2a00      	cmp	r2, #0
 8009e68:	da08      	bge.n	8009e7c <roundf+0x24>
 8009e6a:	3201      	adds	r2, #1
 8009e6c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8009e70:	d101      	bne.n	8009e76 <roundf+0x1e>
 8009e72:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8009e76:	ee00 3a10 	vmov	s0, r3
 8009e7a:	4770      	bx	lr
 8009e7c:	4907      	ldr	r1, [pc, #28]	; (8009e9c <roundf+0x44>)
 8009e7e:	4111      	asrs	r1, r2
 8009e80:	4208      	tst	r0, r1
 8009e82:	d0fa      	beq.n	8009e7a <roundf+0x22>
 8009e84:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009e88:	4113      	asrs	r3, r2
 8009e8a:	4403      	add	r3, r0
 8009e8c:	ea23 0301 	bic.w	r3, r3, r1
 8009e90:	e7f1      	b.n	8009e76 <roundf+0x1e>
 8009e92:	2a80      	cmp	r2, #128	; 0x80
 8009e94:	d1f1      	bne.n	8009e7a <roundf+0x22>
 8009e96:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009e9a:	4770      	bx	lr
 8009e9c:	007fffff 	.word	0x007fffff

08009ea0 <log10f>:
 8009ea0:	b508      	push	{r3, lr}
 8009ea2:	ed2d 8b02 	vpush	{d8}
 8009ea6:	eeb0 8a40 	vmov.f32	s16, s0
 8009eaa:	f000 f827 	bl	8009efc <__ieee754_log10f>
 8009eae:	eeb4 8a48 	vcmp.f32	s16, s16
 8009eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009eb6:	d60f      	bvs.n	8009ed8 <log10f+0x38>
 8009eb8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ec0:	d80a      	bhi.n	8009ed8 <log10f+0x38>
 8009ec2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8009ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009eca:	d108      	bne.n	8009ede <log10f+0x3e>
 8009ecc:	f000 f964 	bl	800a198 <__errno>
 8009ed0:	2322      	movs	r3, #34	; 0x22
 8009ed2:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8009ef4 <log10f+0x54>
 8009ed6:	6003      	str	r3, [r0, #0]
 8009ed8:	ecbd 8b02 	vpop	{d8}
 8009edc:	bd08      	pop	{r3, pc}
 8009ede:	f000 f95b 	bl	800a198 <__errno>
 8009ee2:	ecbd 8b02 	vpop	{d8}
 8009ee6:	2321      	movs	r3, #33	; 0x21
 8009ee8:	6003      	str	r3, [r0, #0]
 8009eea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009eee:	4802      	ldr	r0, [pc, #8]	; (8009ef8 <log10f+0x58>)
 8009ef0:	f000 b85c 	b.w	8009fac <nanf>
 8009ef4:	ff800000 	.word	0xff800000
 8009ef8:	0800d341 	.word	0x0800d341

08009efc <__ieee754_log10f>:
 8009efc:	b508      	push	{r3, lr}
 8009efe:	ee10 2a10 	vmov	r2, s0
 8009f02:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8009f06:	ed2d 8b02 	vpush	{d8}
 8009f0a:	d108      	bne.n	8009f1e <__ieee754_log10f+0x22>
 8009f0c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8009f94 <__ieee754_log10f+0x98>
 8009f10:	eddf 7a21 	vldr	s15, [pc, #132]	; 8009f98 <__ieee754_log10f+0x9c>
 8009f14:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8009f18:	ecbd 8b02 	vpop	{d8}
 8009f1c:	bd08      	pop	{r3, pc}
 8009f1e:	2a00      	cmp	r2, #0
 8009f20:	da02      	bge.n	8009f28 <__ieee754_log10f+0x2c>
 8009f22:	ee30 7a40 	vsub.f32	s14, s0, s0
 8009f26:	e7f3      	b.n	8009f10 <__ieee754_log10f+0x14>
 8009f28:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8009f2c:	db02      	blt.n	8009f34 <__ieee754_log10f+0x38>
 8009f2e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009f32:	e7f1      	b.n	8009f18 <__ieee754_log10f+0x1c>
 8009f34:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8009f38:	bfbf      	itttt	lt
 8009f3a:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 8009f9c <__ieee754_log10f+0xa0>
 8009f3e:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8009f42:	f06f 0118 	mvnlt.w	r1, #24
 8009f46:	ee17 2a90 	vmovlt	r2, s15
 8009f4a:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8009f4e:	bfa8      	it	ge
 8009f50:	2100      	movge	r1, #0
 8009f52:	3b7f      	subs	r3, #127	; 0x7f
 8009f54:	440b      	add	r3, r1
 8009f56:	0fd9      	lsrs	r1, r3, #31
 8009f58:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8009f5c:	ee07 3a90 	vmov	s15, r3
 8009f60:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8009f64:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 8009f68:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8009f6c:	ee00 3a10 	vmov	s0, r3
 8009f70:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8009f74:	f000 f820 	bl	8009fb8 <__ieee754_logf>
 8009f78:	eddf 7a09 	vldr	s15, [pc, #36]	; 8009fa0 <__ieee754_log10f+0xa4>
 8009f7c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009f80:	eddf 7a08 	vldr	s15, [pc, #32]	; 8009fa4 <__ieee754_log10f+0xa8>
 8009f84:	eea8 0a27 	vfma.f32	s0, s16, s15
 8009f88:	eddf 7a07 	vldr	s15, [pc, #28]	; 8009fa8 <__ieee754_log10f+0xac>
 8009f8c:	eea8 0a27 	vfma.f32	s0, s16, s15
 8009f90:	e7c2      	b.n	8009f18 <__ieee754_log10f+0x1c>
 8009f92:	bf00      	nop
 8009f94:	cc000000 	.word	0xcc000000
 8009f98:	00000000 	.word	0x00000000
 8009f9c:	4c000000 	.word	0x4c000000
 8009fa0:	3ede5bd9 	.word	0x3ede5bd9
 8009fa4:	355427db 	.word	0x355427db
 8009fa8:	3e9a2080 	.word	0x3e9a2080

08009fac <nanf>:
 8009fac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009fb4 <nanf+0x8>
 8009fb0:	4770      	bx	lr
 8009fb2:	bf00      	nop
 8009fb4:	7fc00000 	.word	0x7fc00000

08009fb8 <__ieee754_logf>:
 8009fb8:	ee10 3a10 	vmov	r3, s0
 8009fbc:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8009fc0:	d106      	bne.n	8009fd0 <__ieee754_logf+0x18>
 8009fc2:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800a158 <__ieee754_logf+0x1a0>
 8009fc6:	eddf 7a65 	vldr	s15, [pc, #404]	; 800a15c <__ieee754_logf+0x1a4>
 8009fca:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8009fce:	4770      	bx	lr
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	da02      	bge.n	8009fda <__ieee754_logf+0x22>
 8009fd4:	ee30 7a40 	vsub.f32	s14, s0, s0
 8009fd8:	e7f5      	b.n	8009fc6 <__ieee754_logf+0xe>
 8009fda:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009fde:	db02      	blt.n	8009fe6 <__ieee754_logf+0x2e>
 8009fe0:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009fe4:	4770      	bx	lr
 8009fe6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009fea:	bfb8      	it	lt
 8009fec:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 800a160 <__ieee754_logf+0x1a8>
 8009ff0:	485c      	ldr	r0, [pc, #368]	; (800a164 <__ieee754_logf+0x1ac>)
 8009ff2:	bfbe      	ittt	lt
 8009ff4:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8009ff8:	f06f 0118 	mvnlt.w	r1, #24
 8009ffc:	ee17 3a90 	vmovlt	r3, s15
 800a000:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800a004:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a008:	4418      	add	r0, r3
 800a00a:	bfa8      	it	ge
 800a00c:	2100      	movge	r1, #0
 800a00e:	3a7f      	subs	r2, #127	; 0x7f
 800a010:	440a      	add	r2, r1
 800a012:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 800a016:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800a01a:	4319      	orrs	r1, r3
 800a01c:	ee00 1a10 	vmov	s0, r1
 800a020:	4951      	ldr	r1, [pc, #324]	; (800a168 <__ieee754_logf+0x1b0>)
 800a022:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 800a026:	f103 000f 	add.w	r0, r3, #15
 800a02a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a02e:	4001      	ands	r1, r0
 800a030:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a034:	bb89      	cbnz	r1, 800a09a <__ieee754_logf+0xe2>
 800a036:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a03a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a03e:	d10f      	bne.n	800a060 <__ieee754_logf+0xa8>
 800a040:	2a00      	cmp	r2, #0
 800a042:	f000 8085 	beq.w	800a150 <__ieee754_logf+0x198>
 800a046:	ee07 2a90 	vmov	s15, r2
 800a04a:	ed9f 0a48 	vldr	s0, [pc, #288]	; 800a16c <__ieee754_logf+0x1b4>
 800a04e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800a170 <__ieee754_logf+0x1b8>
 800a052:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a056:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a05a:	eea7 0a87 	vfma.f32	s0, s15, s14
 800a05e:	4770      	bx	lr
 800a060:	eddf 6a44 	vldr	s13, [pc, #272]	; 800a174 <__ieee754_logf+0x1bc>
 800a064:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a068:	eee0 7a66 	vfms.f32	s15, s0, s13
 800a06c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800a070:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a074:	b912      	cbnz	r2, 800a07c <__ieee754_logf+0xc4>
 800a076:	ee30 0a47 	vsub.f32	s0, s0, s14
 800a07a:	4770      	bx	lr
 800a07c:	ee07 2a90 	vmov	s15, r2
 800a080:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800a16c <__ieee754_logf+0x1b4>
 800a084:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a088:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800a08c:	ee37 0a40 	vsub.f32	s0, s14, s0
 800a090:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800a170 <__ieee754_logf+0x1b8>
 800a094:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800a098:	4770      	bx	lr
 800a09a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800a09e:	ee70 7a27 	vadd.f32	s15, s0, s15
 800a0a2:	eddf 5a35 	vldr	s11, [pc, #212]	; 800a178 <__ieee754_logf+0x1c0>
 800a0a6:	eddf 4a35 	vldr	s9, [pc, #212]	; 800a17c <__ieee754_logf+0x1c4>
 800a0aa:	4935      	ldr	r1, [pc, #212]	; (800a180 <__ieee754_logf+0x1c8>)
 800a0ac:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800a0b0:	4419      	add	r1, r3
 800a0b2:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800a0b6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800a0ba:	430b      	orrs	r3, r1
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	ee07 2a90 	vmov	s15, r2
 800a0c2:	ee26 5a06 	vmul.f32	s10, s12, s12
 800a0c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a0ca:	ee25 7a05 	vmul.f32	s14, s10, s10
 800a0ce:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800a184 <__ieee754_logf+0x1cc>
 800a0d2:	eee7 7a25 	vfma.f32	s15, s14, s11
 800a0d6:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800a188 <__ieee754_logf+0x1d0>
 800a0da:	eee7 5a87 	vfma.f32	s11, s15, s14
 800a0de:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800a18c <__ieee754_logf+0x1d4>
 800a0e2:	eee7 7a24 	vfma.f32	s15, s14, s9
 800a0e6:	eddf 4a2a 	vldr	s9, [pc, #168]	; 800a190 <__ieee754_logf+0x1d8>
 800a0ea:	eee7 4a87 	vfma.f32	s9, s15, s14
 800a0ee:	eddf 7a29 	vldr	s15, [pc, #164]	; 800a194 <__ieee754_logf+0x1dc>
 800a0f2:	eee4 7a87 	vfma.f32	s15, s9, s14
 800a0f6:	ee67 7a85 	vmul.f32	s15, s15, s10
 800a0fa:	eee5 7a87 	vfma.f32	s15, s11, s14
 800a0fe:	dd1c      	ble.n	800a13a <__ieee754_logf+0x182>
 800a100:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a104:	ee20 7a07 	vmul.f32	s14, s0, s14
 800a108:	ee27 7a00 	vmul.f32	s14, s14, s0
 800a10c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a110:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a114:	b922      	cbnz	r2, 800a120 <__ieee754_logf+0x168>
 800a116:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a11a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a11e:	4770      	bx	lr
 800a120:	ed9f 6a12 	vldr	s12, [pc, #72]	; 800a16c <__ieee754_logf+0x1b4>
 800a124:	eee6 7a86 	vfma.f32	s15, s13, s12
 800a128:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a12c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800a130:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800a170 <__ieee754_logf+0x1b8>
 800a134:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800a138:	4770      	bx	lr
 800a13a:	ee70 7a67 	vsub.f32	s15, s0, s15
 800a13e:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a142:	2a00      	cmp	r2, #0
 800a144:	d0e9      	beq.n	800a11a <__ieee754_logf+0x162>
 800a146:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800a16c <__ieee754_logf+0x1b4>
 800a14a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800a14e:	e7ed      	b.n	800a12c <__ieee754_logf+0x174>
 800a150:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800a15c <__ieee754_logf+0x1a4>
 800a154:	4770      	bx	lr
 800a156:	bf00      	nop
 800a158:	cc000000 	.word	0xcc000000
 800a15c:	00000000 	.word	0x00000000
 800a160:	4c000000 	.word	0x4c000000
 800a164:	004afb20 	.word	0x004afb20
 800a168:	007ffff0 	.word	0x007ffff0
 800a16c:	3717f7d1 	.word	0x3717f7d1
 800a170:	3f317180 	.word	0x3f317180
 800a174:	3eaaaaab 	.word	0x3eaaaaab
 800a178:	3e1cd04f 	.word	0x3e1cd04f
 800a17c:	3e178897 	.word	0x3e178897
 800a180:	ffcf5c30 	.word	0xffcf5c30
 800a184:	3e638e29 	.word	0x3e638e29
 800a188:	3ecccccd 	.word	0x3ecccccd
 800a18c:	3e3a3325 	.word	0x3e3a3325
 800a190:	3e924925 	.word	0x3e924925
 800a194:	3f2aaaab 	.word	0x3f2aaaab

0800a198 <__errno>:
 800a198:	4b01      	ldr	r3, [pc, #4]	; (800a1a0 <__errno+0x8>)
 800a19a:	6818      	ldr	r0, [r3, #0]
 800a19c:	4770      	bx	lr
 800a19e:	bf00      	nop
 800a1a0:	20000044 	.word	0x20000044

0800a1a4 <__libc_init_array>:
 800a1a4:	b570      	push	{r4, r5, r6, lr}
 800a1a6:	4d0d      	ldr	r5, [pc, #52]	; (800a1dc <__libc_init_array+0x38>)
 800a1a8:	4c0d      	ldr	r4, [pc, #52]	; (800a1e0 <__libc_init_array+0x3c>)
 800a1aa:	1b64      	subs	r4, r4, r5
 800a1ac:	10a4      	asrs	r4, r4, #2
 800a1ae:	2600      	movs	r6, #0
 800a1b0:	42a6      	cmp	r6, r4
 800a1b2:	d109      	bne.n	800a1c8 <__libc_init_array+0x24>
 800a1b4:	4d0b      	ldr	r5, [pc, #44]	; (800a1e4 <__libc_init_array+0x40>)
 800a1b6:	4c0c      	ldr	r4, [pc, #48]	; (800a1e8 <__libc_init_array+0x44>)
 800a1b8:	f002 ff52 	bl	800d060 <_init>
 800a1bc:	1b64      	subs	r4, r4, r5
 800a1be:	10a4      	asrs	r4, r4, #2
 800a1c0:	2600      	movs	r6, #0
 800a1c2:	42a6      	cmp	r6, r4
 800a1c4:	d105      	bne.n	800a1d2 <__libc_init_array+0x2e>
 800a1c6:	bd70      	pop	{r4, r5, r6, pc}
 800a1c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1cc:	4798      	blx	r3
 800a1ce:	3601      	adds	r6, #1
 800a1d0:	e7ee      	b.n	800a1b0 <__libc_init_array+0xc>
 800a1d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1d6:	4798      	blx	r3
 800a1d8:	3601      	adds	r6, #1
 800a1da:	e7f2      	b.n	800a1c2 <__libc_init_array+0x1e>
 800a1dc:	0800d69c 	.word	0x0800d69c
 800a1e0:	0800d69c 	.word	0x0800d69c
 800a1e4:	0800d69c 	.word	0x0800d69c
 800a1e8:	0800d6a8 	.word	0x0800d6a8

0800a1ec <malloc>:
 800a1ec:	4b02      	ldr	r3, [pc, #8]	; (800a1f8 <malloc+0xc>)
 800a1ee:	4601      	mov	r1, r0
 800a1f0:	6818      	ldr	r0, [r3, #0]
 800a1f2:	f000 b895 	b.w	800a320 <_malloc_r>
 800a1f6:	bf00      	nop
 800a1f8:	20000044 	.word	0x20000044

0800a1fc <memcmp>:
 800a1fc:	b510      	push	{r4, lr}
 800a1fe:	3901      	subs	r1, #1
 800a200:	4402      	add	r2, r0
 800a202:	4290      	cmp	r0, r2
 800a204:	d101      	bne.n	800a20a <memcmp+0xe>
 800a206:	2000      	movs	r0, #0
 800a208:	e005      	b.n	800a216 <memcmp+0x1a>
 800a20a:	7803      	ldrb	r3, [r0, #0]
 800a20c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a210:	42a3      	cmp	r3, r4
 800a212:	d001      	beq.n	800a218 <memcmp+0x1c>
 800a214:	1b18      	subs	r0, r3, r4
 800a216:	bd10      	pop	{r4, pc}
 800a218:	3001      	adds	r0, #1
 800a21a:	e7f2      	b.n	800a202 <memcmp+0x6>

0800a21c <memcpy>:
 800a21c:	440a      	add	r2, r1
 800a21e:	4291      	cmp	r1, r2
 800a220:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a224:	d100      	bne.n	800a228 <memcpy+0xc>
 800a226:	4770      	bx	lr
 800a228:	b510      	push	{r4, lr}
 800a22a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a22e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a232:	4291      	cmp	r1, r2
 800a234:	d1f9      	bne.n	800a22a <memcpy+0xe>
 800a236:	bd10      	pop	{r4, pc}

0800a238 <memset>:
 800a238:	4402      	add	r2, r0
 800a23a:	4603      	mov	r3, r0
 800a23c:	4293      	cmp	r3, r2
 800a23e:	d100      	bne.n	800a242 <memset+0xa>
 800a240:	4770      	bx	lr
 800a242:	f803 1b01 	strb.w	r1, [r3], #1
 800a246:	e7f9      	b.n	800a23c <memset+0x4>

0800a248 <_free_r>:
 800a248:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a24a:	2900      	cmp	r1, #0
 800a24c:	d044      	beq.n	800a2d8 <_free_r+0x90>
 800a24e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a252:	9001      	str	r0, [sp, #4]
 800a254:	2b00      	cmp	r3, #0
 800a256:	f1a1 0404 	sub.w	r4, r1, #4
 800a25a:	bfb8      	it	lt
 800a25c:	18e4      	addlt	r4, r4, r3
 800a25e:	f001 fc5b 	bl	800bb18 <__malloc_lock>
 800a262:	4a1e      	ldr	r2, [pc, #120]	; (800a2dc <_free_r+0x94>)
 800a264:	9801      	ldr	r0, [sp, #4]
 800a266:	6813      	ldr	r3, [r2, #0]
 800a268:	b933      	cbnz	r3, 800a278 <_free_r+0x30>
 800a26a:	6063      	str	r3, [r4, #4]
 800a26c:	6014      	str	r4, [r2, #0]
 800a26e:	b003      	add	sp, #12
 800a270:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a274:	f001 bc56 	b.w	800bb24 <__malloc_unlock>
 800a278:	42a3      	cmp	r3, r4
 800a27a:	d908      	bls.n	800a28e <_free_r+0x46>
 800a27c:	6825      	ldr	r5, [r4, #0]
 800a27e:	1961      	adds	r1, r4, r5
 800a280:	428b      	cmp	r3, r1
 800a282:	bf01      	itttt	eq
 800a284:	6819      	ldreq	r1, [r3, #0]
 800a286:	685b      	ldreq	r3, [r3, #4]
 800a288:	1949      	addeq	r1, r1, r5
 800a28a:	6021      	streq	r1, [r4, #0]
 800a28c:	e7ed      	b.n	800a26a <_free_r+0x22>
 800a28e:	461a      	mov	r2, r3
 800a290:	685b      	ldr	r3, [r3, #4]
 800a292:	b10b      	cbz	r3, 800a298 <_free_r+0x50>
 800a294:	42a3      	cmp	r3, r4
 800a296:	d9fa      	bls.n	800a28e <_free_r+0x46>
 800a298:	6811      	ldr	r1, [r2, #0]
 800a29a:	1855      	adds	r5, r2, r1
 800a29c:	42a5      	cmp	r5, r4
 800a29e:	d10b      	bne.n	800a2b8 <_free_r+0x70>
 800a2a0:	6824      	ldr	r4, [r4, #0]
 800a2a2:	4421      	add	r1, r4
 800a2a4:	1854      	adds	r4, r2, r1
 800a2a6:	42a3      	cmp	r3, r4
 800a2a8:	6011      	str	r1, [r2, #0]
 800a2aa:	d1e0      	bne.n	800a26e <_free_r+0x26>
 800a2ac:	681c      	ldr	r4, [r3, #0]
 800a2ae:	685b      	ldr	r3, [r3, #4]
 800a2b0:	6053      	str	r3, [r2, #4]
 800a2b2:	4421      	add	r1, r4
 800a2b4:	6011      	str	r1, [r2, #0]
 800a2b6:	e7da      	b.n	800a26e <_free_r+0x26>
 800a2b8:	d902      	bls.n	800a2c0 <_free_r+0x78>
 800a2ba:	230c      	movs	r3, #12
 800a2bc:	6003      	str	r3, [r0, #0]
 800a2be:	e7d6      	b.n	800a26e <_free_r+0x26>
 800a2c0:	6825      	ldr	r5, [r4, #0]
 800a2c2:	1961      	adds	r1, r4, r5
 800a2c4:	428b      	cmp	r3, r1
 800a2c6:	bf04      	itt	eq
 800a2c8:	6819      	ldreq	r1, [r3, #0]
 800a2ca:	685b      	ldreq	r3, [r3, #4]
 800a2cc:	6063      	str	r3, [r4, #4]
 800a2ce:	bf04      	itt	eq
 800a2d0:	1949      	addeq	r1, r1, r5
 800a2d2:	6021      	streq	r1, [r4, #0]
 800a2d4:	6054      	str	r4, [r2, #4]
 800a2d6:	e7ca      	b.n	800a26e <_free_r+0x26>
 800a2d8:	b003      	add	sp, #12
 800a2da:	bd30      	pop	{r4, r5, pc}
 800a2dc:	20000598 	.word	0x20000598

0800a2e0 <sbrk_aligned>:
 800a2e0:	b570      	push	{r4, r5, r6, lr}
 800a2e2:	4e0e      	ldr	r6, [pc, #56]	; (800a31c <sbrk_aligned+0x3c>)
 800a2e4:	460c      	mov	r4, r1
 800a2e6:	6831      	ldr	r1, [r6, #0]
 800a2e8:	4605      	mov	r5, r0
 800a2ea:	b911      	cbnz	r1, 800a2f2 <sbrk_aligned+0x12>
 800a2ec:	f000 fd34 	bl	800ad58 <_sbrk_r>
 800a2f0:	6030      	str	r0, [r6, #0]
 800a2f2:	4621      	mov	r1, r4
 800a2f4:	4628      	mov	r0, r5
 800a2f6:	f000 fd2f 	bl	800ad58 <_sbrk_r>
 800a2fa:	1c43      	adds	r3, r0, #1
 800a2fc:	d00a      	beq.n	800a314 <sbrk_aligned+0x34>
 800a2fe:	1cc4      	adds	r4, r0, #3
 800a300:	f024 0403 	bic.w	r4, r4, #3
 800a304:	42a0      	cmp	r0, r4
 800a306:	d007      	beq.n	800a318 <sbrk_aligned+0x38>
 800a308:	1a21      	subs	r1, r4, r0
 800a30a:	4628      	mov	r0, r5
 800a30c:	f000 fd24 	bl	800ad58 <_sbrk_r>
 800a310:	3001      	adds	r0, #1
 800a312:	d101      	bne.n	800a318 <sbrk_aligned+0x38>
 800a314:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a318:	4620      	mov	r0, r4
 800a31a:	bd70      	pop	{r4, r5, r6, pc}
 800a31c:	2000059c 	.word	0x2000059c

0800a320 <_malloc_r>:
 800a320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a324:	1ccd      	adds	r5, r1, #3
 800a326:	f025 0503 	bic.w	r5, r5, #3
 800a32a:	3508      	adds	r5, #8
 800a32c:	2d0c      	cmp	r5, #12
 800a32e:	bf38      	it	cc
 800a330:	250c      	movcc	r5, #12
 800a332:	2d00      	cmp	r5, #0
 800a334:	4607      	mov	r7, r0
 800a336:	db01      	blt.n	800a33c <_malloc_r+0x1c>
 800a338:	42a9      	cmp	r1, r5
 800a33a:	d905      	bls.n	800a348 <_malloc_r+0x28>
 800a33c:	230c      	movs	r3, #12
 800a33e:	603b      	str	r3, [r7, #0]
 800a340:	2600      	movs	r6, #0
 800a342:	4630      	mov	r0, r6
 800a344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a348:	4e2e      	ldr	r6, [pc, #184]	; (800a404 <_malloc_r+0xe4>)
 800a34a:	f001 fbe5 	bl	800bb18 <__malloc_lock>
 800a34e:	6833      	ldr	r3, [r6, #0]
 800a350:	461c      	mov	r4, r3
 800a352:	bb34      	cbnz	r4, 800a3a2 <_malloc_r+0x82>
 800a354:	4629      	mov	r1, r5
 800a356:	4638      	mov	r0, r7
 800a358:	f7ff ffc2 	bl	800a2e0 <sbrk_aligned>
 800a35c:	1c43      	adds	r3, r0, #1
 800a35e:	4604      	mov	r4, r0
 800a360:	d14d      	bne.n	800a3fe <_malloc_r+0xde>
 800a362:	6834      	ldr	r4, [r6, #0]
 800a364:	4626      	mov	r6, r4
 800a366:	2e00      	cmp	r6, #0
 800a368:	d140      	bne.n	800a3ec <_malloc_r+0xcc>
 800a36a:	6823      	ldr	r3, [r4, #0]
 800a36c:	4631      	mov	r1, r6
 800a36e:	4638      	mov	r0, r7
 800a370:	eb04 0803 	add.w	r8, r4, r3
 800a374:	f000 fcf0 	bl	800ad58 <_sbrk_r>
 800a378:	4580      	cmp	r8, r0
 800a37a:	d13a      	bne.n	800a3f2 <_malloc_r+0xd2>
 800a37c:	6821      	ldr	r1, [r4, #0]
 800a37e:	3503      	adds	r5, #3
 800a380:	1a6d      	subs	r5, r5, r1
 800a382:	f025 0503 	bic.w	r5, r5, #3
 800a386:	3508      	adds	r5, #8
 800a388:	2d0c      	cmp	r5, #12
 800a38a:	bf38      	it	cc
 800a38c:	250c      	movcc	r5, #12
 800a38e:	4629      	mov	r1, r5
 800a390:	4638      	mov	r0, r7
 800a392:	f7ff ffa5 	bl	800a2e0 <sbrk_aligned>
 800a396:	3001      	adds	r0, #1
 800a398:	d02b      	beq.n	800a3f2 <_malloc_r+0xd2>
 800a39a:	6823      	ldr	r3, [r4, #0]
 800a39c:	442b      	add	r3, r5
 800a39e:	6023      	str	r3, [r4, #0]
 800a3a0:	e00e      	b.n	800a3c0 <_malloc_r+0xa0>
 800a3a2:	6822      	ldr	r2, [r4, #0]
 800a3a4:	1b52      	subs	r2, r2, r5
 800a3a6:	d41e      	bmi.n	800a3e6 <_malloc_r+0xc6>
 800a3a8:	2a0b      	cmp	r2, #11
 800a3aa:	d916      	bls.n	800a3da <_malloc_r+0xba>
 800a3ac:	1961      	adds	r1, r4, r5
 800a3ae:	42a3      	cmp	r3, r4
 800a3b0:	6025      	str	r5, [r4, #0]
 800a3b2:	bf18      	it	ne
 800a3b4:	6059      	strne	r1, [r3, #4]
 800a3b6:	6863      	ldr	r3, [r4, #4]
 800a3b8:	bf08      	it	eq
 800a3ba:	6031      	streq	r1, [r6, #0]
 800a3bc:	5162      	str	r2, [r4, r5]
 800a3be:	604b      	str	r3, [r1, #4]
 800a3c0:	4638      	mov	r0, r7
 800a3c2:	f104 060b 	add.w	r6, r4, #11
 800a3c6:	f001 fbad 	bl	800bb24 <__malloc_unlock>
 800a3ca:	f026 0607 	bic.w	r6, r6, #7
 800a3ce:	1d23      	adds	r3, r4, #4
 800a3d0:	1af2      	subs	r2, r6, r3
 800a3d2:	d0b6      	beq.n	800a342 <_malloc_r+0x22>
 800a3d4:	1b9b      	subs	r3, r3, r6
 800a3d6:	50a3      	str	r3, [r4, r2]
 800a3d8:	e7b3      	b.n	800a342 <_malloc_r+0x22>
 800a3da:	6862      	ldr	r2, [r4, #4]
 800a3dc:	42a3      	cmp	r3, r4
 800a3de:	bf0c      	ite	eq
 800a3e0:	6032      	streq	r2, [r6, #0]
 800a3e2:	605a      	strne	r2, [r3, #4]
 800a3e4:	e7ec      	b.n	800a3c0 <_malloc_r+0xa0>
 800a3e6:	4623      	mov	r3, r4
 800a3e8:	6864      	ldr	r4, [r4, #4]
 800a3ea:	e7b2      	b.n	800a352 <_malloc_r+0x32>
 800a3ec:	4634      	mov	r4, r6
 800a3ee:	6876      	ldr	r6, [r6, #4]
 800a3f0:	e7b9      	b.n	800a366 <_malloc_r+0x46>
 800a3f2:	230c      	movs	r3, #12
 800a3f4:	603b      	str	r3, [r7, #0]
 800a3f6:	4638      	mov	r0, r7
 800a3f8:	f001 fb94 	bl	800bb24 <__malloc_unlock>
 800a3fc:	e7a1      	b.n	800a342 <_malloc_r+0x22>
 800a3fe:	6025      	str	r5, [r4, #0]
 800a400:	e7de      	b.n	800a3c0 <_malloc_r+0xa0>
 800a402:	bf00      	nop
 800a404:	20000598 	.word	0x20000598

0800a408 <__cvt>:
 800a408:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a40c:	ec55 4b10 	vmov	r4, r5, d0
 800a410:	2d00      	cmp	r5, #0
 800a412:	460e      	mov	r6, r1
 800a414:	4619      	mov	r1, r3
 800a416:	462b      	mov	r3, r5
 800a418:	bfbb      	ittet	lt
 800a41a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a41e:	461d      	movlt	r5, r3
 800a420:	2300      	movge	r3, #0
 800a422:	232d      	movlt	r3, #45	; 0x2d
 800a424:	700b      	strb	r3, [r1, #0]
 800a426:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a428:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a42c:	4691      	mov	r9, r2
 800a42e:	f023 0820 	bic.w	r8, r3, #32
 800a432:	bfbc      	itt	lt
 800a434:	4622      	movlt	r2, r4
 800a436:	4614      	movlt	r4, r2
 800a438:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a43c:	d005      	beq.n	800a44a <__cvt+0x42>
 800a43e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a442:	d100      	bne.n	800a446 <__cvt+0x3e>
 800a444:	3601      	adds	r6, #1
 800a446:	2102      	movs	r1, #2
 800a448:	e000      	b.n	800a44c <__cvt+0x44>
 800a44a:	2103      	movs	r1, #3
 800a44c:	ab03      	add	r3, sp, #12
 800a44e:	9301      	str	r3, [sp, #4]
 800a450:	ab02      	add	r3, sp, #8
 800a452:	9300      	str	r3, [sp, #0]
 800a454:	ec45 4b10 	vmov	d0, r4, r5
 800a458:	4653      	mov	r3, sl
 800a45a:	4632      	mov	r2, r6
 800a45c:	f000 fd58 	bl	800af10 <_dtoa_r>
 800a460:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a464:	4607      	mov	r7, r0
 800a466:	d102      	bne.n	800a46e <__cvt+0x66>
 800a468:	f019 0f01 	tst.w	r9, #1
 800a46c:	d022      	beq.n	800a4b4 <__cvt+0xac>
 800a46e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a472:	eb07 0906 	add.w	r9, r7, r6
 800a476:	d110      	bne.n	800a49a <__cvt+0x92>
 800a478:	783b      	ldrb	r3, [r7, #0]
 800a47a:	2b30      	cmp	r3, #48	; 0x30
 800a47c:	d10a      	bne.n	800a494 <__cvt+0x8c>
 800a47e:	2200      	movs	r2, #0
 800a480:	2300      	movs	r3, #0
 800a482:	4620      	mov	r0, r4
 800a484:	4629      	mov	r1, r5
 800a486:	f7f6 fb2f 	bl	8000ae8 <__aeabi_dcmpeq>
 800a48a:	b918      	cbnz	r0, 800a494 <__cvt+0x8c>
 800a48c:	f1c6 0601 	rsb	r6, r6, #1
 800a490:	f8ca 6000 	str.w	r6, [sl]
 800a494:	f8da 3000 	ldr.w	r3, [sl]
 800a498:	4499      	add	r9, r3
 800a49a:	2200      	movs	r2, #0
 800a49c:	2300      	movs	r3, #0
 800a49e:	4620      	mov	r0, r4
 800a4a0:	4629      	mov	r1, r5
 800a4a2:	f7f6 fb21 	bl	8000ae8 <__aeabi_dcmpeq>
 800a4a6:	b108      	cbz	r0, 800a4ac <__cvt+0xa4>
 800a4a8:	f8cd 900c 	str.w	r9, [sp, #12]
 800a4ac:	2230      	movs	r2, #48	; 0x30
 800a4ae:	9b03      	ldr	r3, [sp, #12]
 800a4b0:	454b      	cmp	r3, r9
 800a4b2:	d307      	bcc.n	800a4c4 <__cvt+0xbc>
 800a4b4:	9b03      	ldr	r3, [sp, #12]
 800a4b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a4b8:	1bdb      	subs	r3, r3, r7
 800a4ba:	4638      	mov	r0, r7
 800a4bc:	6013      	str	r3, [r2, #0]
 800a4be:	b004      	add	sp, #16
 800a4c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4c4:	1c59      	adds	r1, r3, #1
 800a4c6:	9103      	str	r1, [sp, #12]
 800a4c8:	701a      	strb	r2, [r3, #0]
 800a4ca:	e7f0      	b.n	800a4ae <__cvt+0xa6>

0800a4cc <__exponent>:
 800a4cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	2900      	cmp	r1, #0
 800a4d2:	bfb8      	it	lt
 800a4d4:	4249      	neglt	r1, r1
 800a4d6:	f803 2b02 	strb.w	r2, [r3], #2
 800a4da:	bfb4      	ite	lt
 800a4dc:	222d      	movlt	r2, #45	; 0x2d
 800a4de:	222b      	movge	r2, #43	; 0x2b
 800a4e0:	2909      	cmp	r1, #9
 800a4e2:	7042      	strb	r2, [r0, #1]
 800a4e4:	dd2a      	ble.n	800a53c <__exponent+0x70>
 800a4e6:	f10d 0407 	add.w	r4, sp, #7
 800a4ea:	46a4      	mov	ip, r4
 800a4ec:	270a      	movs	r7, #10
 800a4ee:	46a6      	mov	lr, r4
 800a4f0:	460a      	mov	r2, r1
 800a4f2:	fb91 f6f7 	sdiv	r6, r1, r7
 800a4f6:	fb07 1516 	mls	r5, r7, r6, r1
 800a4fa:	3530      	adds	r5, #48	; 0x30
 800a4fc:	2a63      	cmp	r2, #99	; 0x63
 800a4fe:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800a502:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a506:	4631      	mov	r1, r6
 800a508:	dcf1      	bgt.n	800a4ee <__exponent+0x22>
 800a50a:	3130      	adds	r1, #48	; 0x30
 800a50c:	f1ae 0502 	sub.w	r5, lr, #2
 800a510:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a514:	1c44      	adds	r4, r0, #1
 800a516:	4629      	mov	r1, r5
 800a518:	4561      	cmp	r1, ip
 800a51a:	d30a      	bcc.n	800a532 <__exponent+0x66>
 800a51c:	f10d 0209 	add.w	r2, sp, #9
 800a520:	eba2 020e 	sub.w	r2, r2, lr
 800a524:	4565      	cmp	r5, ip
 800a526:	bf88      	it	hi
 800a528:	2200      	movhi	r2, #0
 800a52a:	4413      	add	r3, r2
 800a52c:	1a18      	subs	r0, r3, r0
 800a52e:	b003      	add	sp, #12
 800a530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a532:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a536:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a53a:	e7ed      	b.n	800a518 <__exponent+0x4c>
 800a53c:	2330      	movs	r3, #48	; 0x30
 800a53e:	3130      	adds	r1, #48	; 0x30
 800a540:	7083      	strb	r3, [r0, #2]
 800a542:	70c1      	strb	r1, [r0, #3]
 800a544:	1d03      	adds	r3, r0, #4
 800a546:	e7f1      	b.n	800a52c <__exponent+0x60>

0800a548 <_printf_float>:
 800a548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a54c:	ed2d 8b02 	vpush	{d8}
 800a550:	b08d      	sub	sp, #52	; 0x34
 800a552:	460c      	mov	r4, r1
 800a554:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a558:	4616      	mov	r6, r2
 800a55a:	461f      	mov	r7, r3
 800a55c:	4605      	mov	r5, r0
 800a55e:	f001 fad7 	bl	800bb10 <_localeconv_r>
 800a562:	f8d0 a000 	ldr.w	sl, [r0]
 800a566:	4650      	mov	r0, sl
 800a568:	f7f5 fe42 	bl	80001f0 <strlen>
 800a56c:	2300      	movs	r3, #0
 800a56e:	930a      	str	r3, [sp, #40]	; 0x28
 800a570:	6823      	ldr	r3, [r4, #0]
 800a572:	9305      	str	r3, [sp, #20]
 800a574:	f8d8 3000 	ldr.w	r3, [r8]
 800a578:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a57c:	3307      	adds	r3, #7
 800a57e:	f023 0307 	bic.w	r3, r3, #7
 800a582:	f103 0208 	add.w	r2, r3, #8
 800a586:	f8c8 2000 	str.w	r2, [r8]
 800a58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a58e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a592:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a596:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a59a:	9307      	str	r3, [sp, #28]
 800a59c:	f8cd 8018 	str.w	r8, [sp, #24]
 800a5a0:	ee08 0a10 	vmov	s16, r0
 800a5a4:	4b9f      	ldr	r3, [pc, #636]	; (800a824 <_printf_float+0x2dc>)
 800a5a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a5aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a5ae:	f7f6 facd 	bl	8000b4c <__aeabi_dcmpun>
 800a5b2:	bb88      	cbnz	r0, 800a618 <_printf_float+0xd0>
 800a5b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a5b8:	4b9a      	ldr	r3, [pc, #616]	; (800a824 <_printf_float+0x2dc>)
 800a5ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a5be:	f7f6 faa7 	bl	8000b10 <__aeabi_dcmple>
 800a5c2:	bb48      	cbnz	r0, 800a618 <_printf_float+0xd0>
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	4640      	mov	r0, r8
 800a5ca:	4649      	mov	r1, r9
 800a5cc:	f7f6 fa96 	bl	8000afc <__aeabi_dcmplt>
 800a5d0:	b110      	cbz	r0, 800a5d8 <_printf_float+0x90>
 800a5d2:	232d      	movs	r3, #45	; 0x2d
 800a5d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5d8:	4b93      	ldr	r3, [pc, #588]	; (800a828 <_printf_float+0x2e0>)
 800a5da:	4894      	ldr	r0, [pc, #592]	; (800a82c <_printf_float+0x2e4>)
 800a5dc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a5e0:	bf94      	ite	ls
 800a5e2:	4698      	movls	r8, r3
 800a5e4:	4680      	movhi	r8, r0
 800a5e6:	2303      	movs	r3, #3
 800a5e8:	6123      	str	r3, [r4, #16]
 800a5ea:	9b05      	ldr	r3, [sp, #20]
 800a5ec:	f023 0204 	bic.w	r2, r3, #4
 800a5f0:	6022      	str	r2, [r4, #0]
 800a5f2:	f04f 0900 	mov.w	r9, #0
 800a5f6:	9700      	str	r7, [sp, #0]
 800a5f8:	4633      	mov	r3, r6
 800a5fa:	aa0b      	add	r2, sp, #44	; 0x2c
 800a5fc:	4621      	mov	r1, r4
 800a5fe:	4628      	mov	r0, r5
 800a600:	f000 f9d8 	bl	800a9b4 <_printf_common>
 800a604:	3001      	adds	r0, #1
 800a606:	f040 8090 	bne.w	800a72a <_printf_float+0x1e2>
 800a60a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a60e:	b00d      	add	sp, #52	; 0x34
 800a610:	ecbd 8b02 	vpop	{d8}
 800a614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a618:	4642      	mov	r2, r8
 800a61a:	464b      	mov	r3, r9
 800a61c:	4640      	mov	r0, r8
 800a61e:	4649      	mov	r1, r9
 800a620:	f7f6 fa94 	bl	8000b4c <__aeabi_dcmpun>
 800a624:	b140      	cbz	r0, 800a638 <_printf_float+0xf0>
 800a626:	464b      	mov	r3, r9
 800a628:	2b00      	cmp	r3, #0
 800a62a:	bfbc      	itt	lt
 800a62c:	232d      	movlt	r3, #45	; 0x2d
 800a62e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a632:	487f      	ldr	r0, [pc, #508]	; (800a830 <_printf_float+0x2e8>)
 800a634:	4b7f      	ldr	r3, [pc, #508]	; (800a834 <_printf_float+0x2ec>)
 800a636:	e7d1      	b.n	800a5dc <_printf_float+0x94>
 800a638:	6863      	ldr	r3, [r4, #4]
 800a63a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a63e:	9206      	str	r2, [sp, #24]
 800a640:	1c5a      	adds	r2, r3, #1
 800a642:	d13f      	bne.n	800a6c4 <_printf_float+0x17c>
 800a644:	2306      	movs	r3, #6
 800a646:	6063      	str	r3, [r4, #4]
 800a648:	9b05      	ldr	r3, [sp, #20]
 800a64a:	6861      	ldr	r1, [r4, #4]
 800a64c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a650:	2300      	movs	r3, #0
 800a652:	9303      	str	r3, [sp, #12]
 800a654:	ab0a      	add	r3, sp, #40	; 0x28
 800a656:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a65a:	ab09      	add	r3, sp, #36	; 0x24
 800a65c:	ec49 8b10 	vmov	d0, r8, r9
 800a660:	9300      	str	r3, [sp, #0]
 800a662:	6022      	str	r2, [r4, #0]
 800a664:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a668:	4628      	mov	r0, r5
 800a66a:	f7ff fecd 	bl	800a408 <__cvt>
 800a66e:	9b06      	ldr	r3, [sp, #24]
 800a670:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a672:	2b47      	cmp	r3, #71	; 0x47
 800a674:	4680      	mov	r8, r0
 800a676:	d108      	bne.n	800a68a <_printf_float+0x142>
 800a678:	1cc8      	adds	r0, r1, #3
 800a67a:	db02      	blt.n	800a682 <_printf_float+0x13a>
 800a67c:	6863      	ldr	r3, [r4, #4]
 800a67e:	4299      	cmp	r1, r3
 800a680:	dd41      	ble.n	800a706 <_printf_float+0x1be>
 800a682:	f1ab 0b02 	sub.w	fp, fp, #2
 800a686:	fa5f fb8b 	uxtb.w	fp, fp
 800a68a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a68e:	d820      	bhi.n	800a6d2 <_printf_float+0x18a>
 800a690:	3901      	subs	r1, #1
 800a692:	465a      	mov	r2, fp
 800a694:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a698:	9109      	str	r1, [sp, #36]	; 0x24
 800a69a:	f7ff ff17 	bl	800a4cc <__exponent>
 800a69e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6a0:	1813      	adds	r3, r2, r0
 800a6a2:	2a01      	cmp	r2, #1
 800a6a4:	4681      	mov	r9, r0
 800a6a6:	6123      	str	r3, [r4, #16]
 800a6a8:	dc02      	bgt.n	800a6b0 <_printf_float+0x168>
 800a6aa:	6822      	ldr	r2, [r4, #0]
 800a6ac:	07d2      	lsls	r2, r2, #31
 800a6ae:	d501      	bpl.n	800a6b4 <_printf_float+0x16c>
 800a6b0:	3301      	adds	r3, #1
 800a6b2:	6123      	str	r3, [r4, #16]
 800a6b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d09c      	beq.n	800a5f6 <_printf_float+0xae>
 800a6bc:	232d      	movs	r3, #45	; 0x2d
 800a6be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6c2:	e798      	b.n	800a5f6 <_printf_float+0xae>
 800a6c4:	9a06      	ldr	r2, [sp, #24]
 800a6c6:	2a47      	cmp	r2, #71	; 0x47
 800a6c8:	d1be      	bne.n	800a648 <_printf_float+0x100>
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d1bc      	bne.n	800a648 <_printf_float+0x100>
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	e7b9      	b.n	800a646 <_printf_float+0xfe>
 800a6d2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a6d6:	d118      	bne.n	800a70a <_printf_float+0x1c2>
 800a6d8:	2900      	cmp	r1, #0
 800a6da:	6863      	ldr	r3, [r4, #4]
 800a6dc:	dd0b      	ble.n	800a6f6 <_printf_float+0x1ae>
 800a6de:	6121      	str	r1, [r4, #16]
 800a6e0:	b913      	cbnz	r3, 800a6e8 <_printf_float+0x1a0>
 800a6e2:	6822      	ldr	r2, [r4, #0]
 800a6e4:	07d0      	lsls	r0, r2, #31
 800a6e6:	d502      	bpl.n	800a6ee <_printf_float+0x1a6>
 800a6e8:	3301      	adds	r3, #1
 800a6ea:	440b      	add	r3, r1
 800a6ec:	6123      	str	r3, [r4, #16]
 800a6ee:	65a1      	str	r1, [r4, #88]	; 0x58
 800a6f0:	f04f 0900 	mov.w	r9, #0
 800a6f4:	e7de      	b.n	800a6b4 <_printf_float+0x16c>
 800a6f6:	b913      	cbnz	r3, 800a6fe <_printf_float+0x1b6>
 800a6f8:	6822      	ldr	r2, [r4, #0]
 800a6fa:	07d2      	lsls	r2, r2, #31
 800a6fc:	d501      	bpl.n	800a702 <_printf_float+0x1ba>
 800a6fe:	3302      	adds	r3, #2
 800a700:	e7f4      	b.n	800a6ec <_printf_float+0x1a4>
 800a702:	2301      	movs	r3, #1
 800a704:	e7f2      	b.n	800a6ec <_printf_float+0x1a4>
 800a706:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a70a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a70c:	4299      	cmp	r1, r3
 800a70e:	db05      	blt.n	800a71c <_printf_float+0x1d4>
 800a710:	6823      	ldr	r3, [r4, #0]
 800a712:	6121      	str	r1, [r4, #16]
 800a714:	07d8      	lsls	r0, r3, #31
 800a716:	d5ea      	bpl.n	800a6ee <_printf_float+0x1a6>
 800a718:	1c4b      	adds	r3, r1, #1
 800a71a:	e7e7      	b.n	800a6ec <_printf_float+0x1a4>
 800a71c:	2900      	cmp	r1, #0
 800a71e:	bfd4      	ite	le
 800a720:	f1c1 0202 	rsble	r2, r1, #2
 800a724:	2201      	movgt	r2, #1
 800a726:	4413      	add	r3, r2
 800a728:	e7e0      	b.n	800a6ec <_printf_float+0x1a4>
 800a72a:	6823      	ldr	r3, [r4, #0]
 800a72c:	055a      	lsls	r2, r3, #21
 800a72e:	d407      	bmi.n	800a740 <_printf_float+0x1f8>
 800a730:	6923      	ldr	r3, [r4, #16]
 800a732:	4642      	mov	r2, r8
 800a734:	4631      	mov	r1, r6
 800a736:	4628      	mov	r0, r5
 800a738:	47b8      	blx	r7
 800a73a:	3001      	adds	r0, #1
 800a73c:	d12c      	bne.n	800a798 <_printf_float+0x250>
 800a73e:	e764      	b.n	800a60a <_printf_float+0xc2>
 800a740:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a744:	f240 80e0 	bls.w	800a908 <_printf_float+0x3c0>
 800a748:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a74c:	2200      	movs	r2, #0
 800a74e:	2300      	movs	r3, #0
 800a750:	f7f6 f9ca 	bl	8000ae8 <__aeabi_dcmpeq>
 800a754:	2800      	cmp	r0, #0
 800a756:	d034      	beq.n	800a7c2 <_printf_float+0x27a>
 800a758:	4a37      	ldr	r2, [pc, #220]	; (800a838 <_printf_float+0x2f0>)
 800a75a:	2301      	movs	r3, #1
 800a75c:	4631      	mov	r1, r6
 800a75e:	4628      	mov	r0, r5
 800a760:	47b8      	blx	r7
 800a762:	3001      	adds	r0, #1
 800a764:	f43f af51 	beq.w	800a60a <_printf_float+0xc2>
 800a768:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a76c:	429a      	cmp	r2, r3
 800a76e:	db02      	blt.n	800a776 <_printf_float+0x22e>
 800a770:	6823      	ldr	r3, [r4, #0]
 800a772:	07d8      	lsls	r0, r3, #31
 800a774:	d510      	bpl.n	800a798 <_printf_float+0x250>
 800a776:	ee18 3a10 	vmov	r3, s16
 800a77a:	4652      	mov	r2, sl
 800a77c:	4631      	mov	r1, r6
 800a77e:	4628      	mov	r0, r5
 800a780:	47b8      	blx	r7
 800a782:	3001      	adds	r0, #1
 800a784:	f43f af41 	beq.w	800a60a <_printf_float+0xc2>
 800a788:	f04f 0800 	mov.w	r8, #0
 800a78c:	f104 091a 	add.w	r9, r4, #26
 800a790:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a792:	3b01      	subs	r3, #1
 800a794:	4543      	cmp	r3, r8
 800a796:	dc09      	bgt.n	800a7ac <_printf_float+0x264>
 800a798:	6823      	ldr	r3, [r4, #0]
 800a79a:	079b      	lsls	r3, r3, #30
 800a79c:	f100 8105 	bmi.w	800a9aa <_printf_float+0x462>
 800a7a0:	68e0      	ldr	r0, [r4, #12]
 800a7a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7a4:	4298      	cmp	r0, r3
 800a7a6:	bfb8      	it	lt
 800a7a8:	4618      	movlt	r0, r3
 800a7aa:	e730      	b.n	800a60e <_printf_float+0xc6>
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	464a      	mov	r2, r9
 800a7b0:	4631      	mov	r1, r6
 800a7b2:	4628      	mov	r0, r5
 800a7b4:	47b8      	blx	r7
 800a7b6:	3001      	adds	r0, #1
 800a7b8:	f43f af27 	beq.w	800a60a <_printf_float+0xc2>
 800a7bc:	f108 0801 	add.w	r8, r8, #1
 800a7c0:	e7e6      	b.n	800a790 <_printf_float+0x248>
 800a7c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	dc39      	bgt.n	800a83c <_printf_float+0x2f4>
 800a7c8:	4a1b      	ldr	r2, [pc, #108]	; (800a838 <_printf_float+0x2f0>)
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	4631      	mov	r1, r6
 800a7ce:	4628      	mov	r0, r5
 800a7d0:	47b8      	blx	r7
 800a7d2:	3001      	adds	r0, #1
 800a7d4:	f43f af19 	beq.w	800a60a <_printf_float+0xc2>
 800a7d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a7dc:	4313      	orrs	r3, r2
 800a7de:	d102      	bne.n	800a7e6 <_printf_float+0x29e>
 800a7e0:	6823      	ldr	r3, [r4, #0]
 800a7e2:	07d9      	lsls	r1, r3, #31
 800a7e4:	d5d8      	bpl.n	800a798 <_printf_float+0x250>
 800a7e6:	ee18 3a10 	vmov	r3, s16
 800a7ea:	4652      	mov	r2, sl
 800a7ec:	4631      	mov	r1, r6
 800a7ee:	4628      	mov	r0, r5
 800a7f0:	47b8      	blx	r7
 800a7f2:	3001      	adds	r0, #1
 800a7f4:	f43f af09 	beq.w	800a60a <_printf_float+0xc2>
 800a7f8:	f04f 0900 	mov.w	r9, #0
 800a7fc:	f104 0a1a 	add.w	sl, r4, #26
 800a800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a802:	425b      	negs	r3, r3
 800a804:	454b      	cmp	r3, r9
 800a806:	dc01      	bgt.n	800a80c <_printf_float+0x2c4>
 800a808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a80a:	e792      	b.n	800a732 <_printf_float+0x1ea>
 800a80c:	2301      	movs	r3, #1
 800a80e:	4652      	mov	r2, sl
 800a810:	4631      	mov	r1, r6
 800a812:	4628      	mov	r0, r5
 800a814:	47b8      	blx	r7
 800a816:	3001      	adds	r0, #1
 800a818:	f43f aef7 	beq.w	800a60a <_printf_float+0xc2>
 800a81c:	f109 0901 	add.w	r9, r9, #1
 800a820:	e7ee      	b.n	800a800 <_printf_float+0x2b8>
 800a822:	bf00      	nop
 800a824:	7fefffff 	.word	0x7fefffff
 800a828:	0800d260 	.word	0x0800d260
 800a82c:	0800d264 	.word	0x0800d264
 800a830:	0800d26c 	.word	0x0800d26c
 800a834:	0800d268 	.word	0x0800d268
 800a838:	0800d270 	.word	0x0800d270
 800a83c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a83e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a840:	429a      	cmp	r2, r3
 800a842:	bfa8      	it	ge
 800a844:	461a      	movge	r2, r3
 800a846:	2a00      	cmp	r2, #0
 800a848:	4691      	mov	r9, r2
 800a84a:	dc37      	bgt.n	800a8bc <_printf_float+0x374>
 800a84c:	f04f 0b00 	mov.w	fp, #0
 800a850:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a854:	f104 021a 	add.w	r2, r4, #26
 800a858:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a85a:	9305      	str	r3, [sp, #20]
 800a85c:	eba3 0309 	sub.w	r3, r3, r9
 800a860:	455b      	cmp	r3, fp
 800a862:	dc33      	bgt.n	800a8cc <_printf_float+0x384>
 800a864:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a868:	429a      	cmp	r2, r3
 800a86a:	db3b      	blt.n	800a8e4 <_printf_float+0x39c>
 800a86c:	6823      	ldr	r3, [r4, #0]
 800a86e:	07da      	lsls	r2, r3, #31
 800a870:	d438      	bmi.n	800a8e4 <_printf_float+0x39c>
 800a872:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a874:	9a05      	ldr	r2, [sp, #20]
 800a876:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a878:	1a9a      	subs	r2, r3, r2
 800a87a:	eba3 0901 	sub.w	r9, r3, r1
 800a87e:	4591      	cmp	r9, r2
 800a880:	bfa8      	it	ge
 800a882:	4691      	movge	r9, r2
 800a884:	f1b9 0f00 	cmp.w	r9, #0
 800a888:	dc35      	bgt.n	800a8f6 <_printf_float+0x3ae>
 800a88a:	f04f 0800 	mov.w	r8, #0
 800a88e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a892:	f104 0a1a 	add.w	sl, r4, #26
 800a896:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a89a:	1a9b      	subs	r3, r3, r2
 800a89c:	eba3 0309 	sub.w	r3, r3, r9
 800a8a0:	4543      	cmp	r3, r8
 800a8a2:	f77f af79 	ble.w	800a798 <_printf_float+0x250>
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	4652      	mov	r2, sl
 800a8aa:	4631      	mov	r1, r6
 800a8ac:	4628      	mov	r0, r5
 800a8ae:	47b8      	blx	r7
 800a8b0:	3001      	adds	r0, #1
 800a8b2:	f43f aeaa 	beq.w	800a60a <_printf_float+0xc2>
 800a8b6:	f108 0801 	add.w	r8, r8, #1
 800a8ba:	e7ec      	b.n	800a896 <_printf_float+0x34e>
 800a8bc:	4613      	mov	r3, r2
 800a8be:	4631      	mov	r1, r6
 800a8c0:	4642      	mov	r2, r8
 800a8c2:	4628      	mov	r0, r5
 800a8c4:	47b8      	blx	r7
 800a8c6:	3001      	adds	r0, #1
 800a8c8:	d1c0      	bne.n	800a84c <_printf_float+0x304>
 800a8ca:	e69e      	b.n	800a60a <_printf_float+0xc2>
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	4631      	mov	r1, r6
 800a8d0:	4628      	mov	r0, r5
 800a8d2:	9205      	str	r2, [sp, #20]
 800a8d4:	47b8      	blx	r7
 800a8d6:	3001      	adds	r0, #1
 800a8d8:	f43f ae97 	beq.w	800a60a <_printf_float+0xc2>
 800a8dc:	9a05      	ldr	r2, [sp, #20]
 800a8de:	f10b 0b01 	add.w	fp, fp, #1
 800a8e2:	e7b9      	b.n	800a858 <_printf_float+0x310>
 800a8e4:	ee18 3a10 	vmov	r3, s16
 800a8e8:	4652      	mov	r2, sl
 800a8ea:	4631      	mov	r1, r6
 800a8ec:	4628      	mov	r0, r5
 800a8ee:	47b8      	blx	r7
 800a8f0:	3001      	adds	r0, #1
 800a8f2:	d1be      	bne.n	800a872 <_printf_float+0x32a>
 800a8f4:	e689      	b.n	800a60a <_printf_float+0xc2>
 800a8f6:	9a05      	ldr	r2, [sp, #20]
 800a8f8:	464b      	mov	r3, r9
 800a8fa:	4442      	add	r2, r8
 800a8fc:	4631      	mov	r1, r6
 800a8fe:	4628      	mov	r0, r5
 800a900:	47b8      	blx	r7
 800a902:	3001      	adds	r0, #1
 800a904:	d1c1      	bne.n	800a88a <_printf_float+0x342>
 800a906:	e680      	b.n	800a60a <_printf_float+0xc2>
 800a908:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a90a:	2a01      	cmp	r2, #1
 800a90c:	dc01      	bgt.n	800a912 <_printf_float+0x3ca>
 800a90e:	07db      	lsls	r3, r3, #31
 800a910:	d538      	bpl.n	800a984 <_printf_float+0x43c>
 800a912:	2301      	movs	r3, #1
 800a914:	4642      	mov	r2, r8
 800a916:	4631      	mov	r1, r6
 800a918:	4628      	mov	r0, r5
 800a91a:	47b8      	blx	r7
 800a91c:	3001      	adds	r0, #1
 800a91e:	f43f ae74 	beq.w	800a60a <_printf_float+0xc2>
 800a922:	ee18 3a10 	vmov	r3, s16
 800a926:	4652      	mov	r2, sl
 800a928:	4631      	mov	r1, r6
 800a92a:	4628      	mov	r0, r5
 800a92c:	47b8      	blx	r7
 800a92e:	3001      	adds	r0, #1
 800a930:	f43f ae6b 	beq.w	800a60a <_printf_float+0xc2>
 800a934:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a938:	2200      	movs	r2, #0
 800a93a:	2300      	movs	r3, #0
 800a93c:	f7f6 f8d4 	bl	8000ae8 <__aeabi_dcmpeq>
 800a940:	b9d8      	cbnz	r0, 800a97a <_printf_float+0x432>
 800a942:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a944:	f108 0201 	add.w	r2, r8, #1
 800a948:	3b01      	subs	r3, #1
 800a94a:	4631      	mov	r1, r6
 800a94c:	4628      	mov	r0, r5
 800a94e:	47b8      	blx	r7
 800a950:	3001      	adds	r0, #1
 800a952:	d10e      	bne.n	800a972 <_printf_float+0x42a>
 800a954:	e659      	b.n	800a60a <_printf_float+0xc2>
 800a956:	2301      	movs	r3, #1
 800a958:	4652      	mov	r2, sl
 800a95a:	4631      	mov	r1, r6
 800a95c:	4628      	mov	r0, r5
 800a95e:	47b8      	blx	r7
 800a960:	3001      	adds	r0, #1
 800a962:	f43f ae52 	beq.w	800a60a <_printf_float+0xc2>
 800a966:	f108 0801 	add.w	r8, r8, #1
 800a96a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a96c:	3b01      	subs	r3, #1
 800a96e:	4543      	cmp	r3, r8
 800a970:	dcf1      	bgt.n	800a956 <_printf_float+0x40e>
 800a972:	464b      	mov	r3, r9
 800a974:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a978:	e6dc      	b.n	800a734 <_printf_float+0x1ec>
 800a97a:	f04f 0800 	mov.w	r8, #0
 800a97e:	f104 0a1a 	add.w	sl, r4, #26
 800a982:	e7f2      	b.n	800a96a <_printf_float+0x422>
 800a984:	2301      	movs	r3, #1
 800a986:	4642      	mov	r2, r8
 800a988:	e7df      	b.n	800a94a <_printf_float+0x402>
 800a98a:	2301      	movs	r3, #1
 800a98c:	464a      	mov	r2, r9
 800a98e:	4631      	mov	r1, r6
 800a990:	4628      	mov	r0, r5
 800a992:	47b8      	blx	r7
 800a994:	3001      	adds	r0, #1
 800a996:	f43f ae38 	beq.w	800a60a <_printf_float+0xc2>
 800a99a:	f108 0801 	add.w	r8, r8, #1
 800a99e:	68e3      	ldr	r3, [r4, #12]
 800a9a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a9a2:	1a5b      	subs	r3, r3, r1
 800a9a4:	4543      	cmp	r3, r8
 800a9a6:	dcf0      	bgt.n	800a98a <_printf_float+0x442>
 800a9a8:	e6fa      	b.n	800a7a0 <_printf_float+0x258>
 800a9aa:	f04f 0800 	mov.w	r8, #0
 800a9ae:	f104 0919 	add.w	r9, r4, #25
 800a9b2:	e7f4      	b.n	800a99e <_printf_float+0x456>

0800a9b4 <_printf_common>:
 800a9b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9b8:	4616      	mov	r6, r2
 800a9ba:	4699      	mov	r9, r3
 800a9bc:	688a      	ldr	r2, [r1, #8]
 800a9be:	690b      	ldr	r3, [r1, #16]
 800a9c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	bfb8      	it	lt
 800a9c8:	4613      	movlt	r3, r2
 800a9ca:	6033      	str	r3, [r6, #0]
 800a9cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a9d0:	4607      	mov	r7, r0
 800a9d2:	460c      	mov	r4, r1
 800a9d4:	b10a      	cbz	r2, 800a9da <_printf_common+0x26>
 800a9d6:	3301      	adds	r3, #1
 800a9d8:	6033      	str	r3, [r6, #0]
 800a9da:	6823      	ldr	r3, [r4, #0]
 800a9dc:	0699      	lsls	r1, r3, #26
 800a9de:	bf42      	ittt	mi
 800a9e0:	6833      	ldrmi	r3, [r6, #0]
 800a9e2:	3302      	addmi	r3, #2
 800a9e4:	6033      	strmi	r3, [r6, #0]
 800a9e6:	6825      	ldr	r5, [r4, #0]
 800a9e8:	f015 0506 	ands.w	r5, r5, #6
 800a9ec:	d106      	bne.n	800a9fc <_printf_common+0x48>
 800a9ee:	f104 0a19 	add.w	sl, r4, #25
 800a9f2:	68e3      	ldr	r3, [r4, #12]
 800a9f4:	6832      	ldr	r2, [r6, #0]
 800a9f6:	1a9b      	subs	r3, r3, r2
 800a9f8:	42ab      	cmp	r3, r5
 800a9fa:	dc26      	bgt.n	800aa4a <_printf_common+0x96>
 800a9fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aa00:	1e13      	subs	r3, r2, #0
 800aa02:	6822      	ldr	r2, [r4, #0]
 800aa04:	bf18      	it	ne
 800aa06:	2301      	movne	r3, #1
 800aa08:	0692      	lsls	r2, r2, #26
 800aa0a:	d42b      	bmi.n	800aa64 <_printf_common+0xb0>
 800aa0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa10:	4649      	mov	r1, r9
 800aa12:	4638      	mov	r0, r7
 800aa14:	47c0      	blx	r8
 800aa16:	3001      	adds	r0, #1
 800aa18:	d01e      	beq.n	800aa58 <_printf_common+0xa4>
 800aa1a:	6823      	ldr	r3, [r4, #0]
 800aa1c:	68e5      	ldr	r5, [r4, #12]
 800aa1e:	6832      	ldr	r2, [r6, #0]
 800aa20:	f003 0306 	and.w	r3, r3, #6
 800aa24:	2b04      	cmp	r3, #4
 800aa26:	bf08      	it	eq
 800aa28:	1aad      	subeq	r5, r5, r2
 800aa2a:	68a3      	ldr	r3, [r4, #8]
 800aa2c:	6922      	ldr	r2, [r4, #16]
 800aa2e:	bf0c      	ite	eq
 800aa30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa34:	2500      	movne	r5, #0
 800aa36:	4293      	cmp	r3, r2
 800aa38:	bfc4      	itt	gt
 800aa3a:	1a9b      	subgt	r3, r3, r2
 800aa3c:	18ed      	addgt	r5, r5, r3
 800aa3e:	2600      	movs	r6, #0
 800aa40:	341a      	adds	r4, #26
 800aa42:	42b5      	cmp	r5, r6
 800aa44:	d11a      	bne.n	800aa7c <_printf_common+0xc8>
 800aa46:	2000      	movs	r0, #0
 800aa48:	e008      	b.n	800aa5c <_printf_common+0xa8>
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	4652      	mov	r2, sl
 800aa4e:	4649      	mov	r1, r9
 800aa50:	4638      	mov	r0, r7
 800aa52:	47c0      	blx	r8
 800aa54:	3001      	adds	r0, #1
 800aa56:	d103      	bne.n	800aa60 <_printf_common+0xac>
 800aa58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa60:	3501      	adds	r5, #1
 800aa62:	e7c6      	b.n	800a9f2 <_printf_common+0x3e>
 800aa64:	18e1      	adds	r1, r4, r3
 800aa66:	1c5a      	adds	r2, r3, #1
 800aa68:	2030      	movs	r0, #48	; 0x30
 800aa6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aa6e:	4422      	add	r2, r4
 800aa70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aa74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aa78:	3302      	adds	r3, #2
 800aa7a:	e7c7      	b.n	800aa0c <_printf_common+0x58>
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	4622      	mov	r2, r4
 800aa80:	4649      	mov	r1, r9
 800aa82:	4638      	mov	r0, r7
 800aa84:	47c0      	blx	r8
 800aa86:	3001      	adds	r0, #1
 800aa88:	d0e6      	beq.n	800aa58 <_printf_common+0xa4>
 800aa8a:	3601      	adds	r6, #1
 800aa8c:	e7d9      	b.n	800aa42 <_printf_common+0x8e>
	...

0800aa90 <_printf_i>:
 800aa90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa94:	7e0f      	ldrb	r7, [r1, #24]
 800aa96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aa98:	2f78      	cmp	r7, #120	; 0x78
 800aa9a:	4691      	mov	r9, r2
 800aa9c:	4680      	mov	r8, r0
 800aa9e:	460c      	mov	r4, r1
 800aaa0:	469a      	mov	sl, r3
 800aaa2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aaa6:	d807      	bhi.n	800aab8 <_printf_i+0x28>
 800aaa8:	2f62      	cmp	r7, #98	; 0x62
 800aaaa:	d80a      	bhi.n	800aac2 <_printf_i+0x32>
 800aaac:	2f00      	cmp	r7, #0
 800aaae:	f000 80d8 	beq.w	800ac62 <_printf_i+0x1d2>
 800aab2:	2f58      	cmp	r7, #88	; 0x58
 800aab4:	f000 80a3 	beq.w	800abfe <_printf_i+0x16e>
 800aab8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aabc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aac0:	e03a      	b.n	800ab38 <_printf_i+0xa8>
 800aac2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aac6:	2b15      	cmp	r3, #21
 800aac8:	d8f6      	bhi.n	800aab8 <_printf_i+0x28>
 800aaca:	a101      	add	r1, pc, #4	; (adr r1, 800aad0 <_printf_i+0x40>)
 800aacc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aad0:	0800ab29 	.word	0x0800ab29
 800aad4:	0800ab3d 	.word	0x0800ab3d
 800aad8:	0800aab9 	.word	0x0800aab9
 800aadc:	0800aab9 	.word	0x0800aab9
 800aae0:	0800aab9 	.word	0x0800aab9
 800aae4:	0800aab9 	.word	0x0800aab9
 800aae8:	0800ab3d 	.word	0x0800ab3d
 800aaec:	0800aab9 	.word	0x0800aab9
 800aaf0:	0800aab9 	.word	0x0800aab9
 800aaf4:	0800aab9 	.word	0x0800aab9
 800aaf8:	0800aab9 	.word	0x0800aab9
 800aafc:	0800ac49 	.word	0x0800ac49
 800ab00:	0800ab6d 	.word	0x0800ab6d
 800ab04:	0800ac2b 	.word	0x0800ac2b
 800ab08:	0800aab9 	.word	0x0800aab9
 800ab0c:	0800aab9 	.word	0x0800aab9
 800ab10:	0800ac6b 	.word	0x0800ac6b
 800ab14:	0800aab9 	.word	0x0800aab9
 800ab18:	0800ab6d 	.word	0x0800ab6d
 800ab1c:	0800aab9 	.word	0x0800aab9
 800ab20:	0800aab9 	.word	0x0800aab9
 800ab24:	0800ac33 	.word	0x0800ac33
 800ab28:	682b      	ldr	r3, [r5, #0]
 800ab2a:	1d1a      	adds	r2, r3, #4
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	602a      	str	r2, [r5, #0]
 800ab30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ab38:	2301      	movs	r3, #1
 800ab3a:	e0a3      	b.n	800ac84 <_printf_i+0x1f4>
 800ab3c:	6820      	ldr	r0, [r4, #0]
 800ab3e:	6829      	ldr	r1, [r5, #0]
 800ab40:	0606      	lsls	r6, r0, #24
 800ab42:	f101 0304 	add.w	r3, r1, #4
 800ab46:	d50a      	bpl.n	800ab5e <_printf_i+0xce>
 800ab48:	680e      	ldr	r6, [r1, #0]
 800ab4a:	602b      	str	r3, [r5, #0]
 800ab4c:	2e00      	cmp	r6, #0
 800ab4e:	da03      	bge.n	800ab58 <_printf_i+0xc8>
 800ab50:	232d      	movs	r3, #45	; 0x2d
 800ab52:	4276      	negs	r6, r6
 800ab54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab58:	485e      	ldr	r0, [pc, #376]	; (800acd4 <_printf_i+0x244>)
 800ab5a:	230a      	movs	r3, #10
 800ab5c:	e019      	b.n	800ab92 <_printf_i+0x102>
 800ab5e:	680e      	ldr	r6, [r1, #0]
 800ab60:	602b      	str	r3, [r5, #0]
 800ab62:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ab66:	bf18      	it	ne
 800ab68:	b236      	sxthne	r6, r6
 800ab6a:	e7ef      	b.n	800ab4c <_printf_i+0xbc>
 800ab6c:	682b      	ldr	r3, [r5, #0]
 800ab6e:	6820      	ldr	r0, [r4, #0]
 800ab70:	1d19      	adds	r1, r3, #4
 800ab72:	6029      	str	r1, [r5, #0]
 800ab74:	0601      	lsls	r1, r0, #24
 800ab76:	d501      	bpl.n	800ab7c <_printf_i+0xec>
 800ab78:	681e      	ldr	r6, [r3, #0]
 800ab7a:	e002      	b.n	800ab82 <_printf_i+0xf2>
 800ab7c:	0646      	lsls	r6, r0, #25
 800ab7e:	d5fb      	bpl.n	800ab78 <_printf_i+0xe8>
 800ab80:	881e      	ldrh	r6, [r3, #0]
 800ab82:	4854      	ldr	r0, [pc, #336]	; (800acd4 <_printf_i+0x244>)
 800ab84:	2f6f      	cmp	r7, #111	; 0x6f
 800ab86:	bf0c      	ite	eq
 800ab88:	2308      	moveq	r3, #8
 800ab8a:	230a      	movne	r3, #10
 800ab8c:	2100      	movs	r1, #0
 800ab8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ab92:	6865      	ldr	r5, [r4, #4]
 800ab94:	60a5      	str	r5, [r4, #8]
 800ab96:	2d00      	cmp	r5, #0
 800ab98:	bfa2      	ittt	ge
 800ab9a:	6821      	ldrge	r1, [r4, #0]
 800ab9c:	f021 0104 	bicge.w	r1, r1, #4
 800aba0:	6021      	strge	r1, [r4, #0]
 800aba2:	b90e      	cbnz	r6, 800aba8 <_printf_i+0x118>
 800aba4:	2d00      	cmp	r5, #0
 800aba6:	d04d      	beq.n	800ac44 <_printf_i+0x1b4>
 800aba8:	4615      	mov	r5, r2
 800abaa:	fbb6 f1f3 	udiv	r1, r6, r3
 800abae:	fb03 6711 	mls	r7, r3, r1, r6
 800abb2:	5dc7      	ldrb	r7, [r0, r7]
 800abb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800abb8:	4637      	mov	r7, r6
 800abba:	42bb      	cmp	r3, r7
 800abbc:	460e      	mov	r6, r1
 800abbe:	d9f4      	bls.n	800abaa <_printf_i+0x11a>
 800abc0:	2b08      	cmp	r3, #8
 800abc2:	d10b      	bne.n	800abdc <_printf_i+0x14c>
 800abc4:	6823      	ldr	r3, [r4, #0]
 800abc6:	07de      	lsls	r6, r3, #31
 800abc8:	d508      	bpl.n	800abdc <_printf_i+0x14c>
 800abca:	6923      	ldr	r3, [r4, #16]
 800abcc:	6861      	ldr	r1, [r4, #4]
 800abce:	4299      	cmp	r1, r3
 800abd0:	bfde      	ittt	le
 800abd2:	2330      	movle	r3, #48	; 0x30
 800abd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800abd8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800abdc:	1b52      	subs	r2, r2, r5
 800abde:	6122      	str	r2, [r4, #16]
 800abe0:	f8cd a000 	str.w	sl, [sp]
 800abe4:	464b      	mov	r3, r9
 800abe6:	aa03      	add	r2, sp, #12
 800abe8:	4621      	mov	r1, r4
 800abea:	4640      	mov	r0, r8
 800abec:	f7ff fee2 	bl	800a9b4 <_printf_common>
 800abf0:	3001      	adds	r0, #1
 800abf2:	d14c      	bne.n	800ac8e <_printf_i+0x1fe>
 800abf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800abf8:	b004      	add	sp, #16
 800abfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abfe:	4835      	ldr	r0, [pc, #212]	; (800acd4 <_printf_i+0x244>)
 800ac00:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ac04:	6829      	ldr	r1, [r5, #0]
 800ac06:	6823      	ldr	r3, [r4, #0]
 800ac08:	f851 6b04 	ldr.w	r6, [r1], #4
 800ac0c:	6029      	str	r1, [r5, #0]
 800ac0e:	061d      	lsls	r5, r3, #24
 800ac10:	d514      	bpl.n	800ac3c <_printf_i+0x1ac>
 800ac12:	07df      	lsls	r7, r3, #31
 800ac14:	bf44      	itt	mi
 800ac16:	f043 0320 	orrmi.w	r3, r3, #32
 800ac1a:	6023      	strmi	r3, [r4, #0]
 800ac1c:	b91e      	cbnz	r6, 800ac26 <_printf_i+0x196>
 800ac1e:	6823      	ldr	r3, [r4, #0]
 800ac20:	f023 0320 	bic.w	r3, r3, #32
 800ac24:	6023      	str	r3, [r4, #0]
 800ac26:	2310      	movs	r3, #16
 800ac28:	e7b0      	b.n	800ab8c <_printf_i+0xfc>
 800ac2a:	6823      	ldr	r3, [r4, #0]
 800ac2c:	f043 0320 	orr.w	r3, r3, #32
 800ac30:	6023      	str	r3, [r4, #0]
 800ac32:	2378      	movs	r3, #120	; 0x78
 800ac34:	4828      	ldr	r0, [pc, #160]	; (800acd8 <_printf_i+0x248>)
 800ac36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ac3a:	e7e3      	b.n	800ac04 <_printf_i+0x174>
 800ac3c:	0659      	lsls	r1, r3, #25
 800ac3e:	bf48      	it	mi
 800ac40:	b2b6      	uxthmi	r6, r6
 800ac42:	e7e6      	b.n	800ac12 <_printf_i+0x182>
 800ac44:	4615      	mov	r5, r2
 800ac46:	e7bb      	b.n	800abc0 <_printf_i+0x130>
 800ac48:	682b      	ldr	r3, [r5, #0]
 800ac4a:	6826      	ldr	r6, [r4, #0]
 800ac4c:	6961      	ldr	r1, [r4, #20]
 800ac4e:	1d18      	adds	r0, r3, #4
 800ac50:	6028      	str	r0, [r5, #0]
 800ac52:	0635      	lsls	r5, r6, #24
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	d501      	bpl.n	800ac5c <_printf_i+0x1cc>
 800ac58:	6019      	str	r1, [r3, #0]
 800ac5a:	e002      	b.n	800ac62 <_printf_i+0x1d2>
 800ac5c:	0670      	lsls	r0, r6, #25
 800ac5e:	d5fb      	bpl.n	800ac58 <_printf_i+0x1c8>
 800ac60:	8019      	strh	r1, [r3, #0]
 800ac62:	2300      	movs	r3, #0
 800ac64:	6123      	str	r3, [r4, #16]
 800ac66:	4615      	mov	r5, r2
 800ac68:	e7ba      	b.n	800abe0 <_printf_i+0x150>
 800ac6a:	682b      	ldr	r3, [r5, #0]
 800ac6c:	1d1a      	adds	r2, r3, #4
 800ac6e:	602a      	str	r2, [r5, #0]
 800ac70:	681d      	ldr	r5, [r3, #0]
 800ac72:	6862      	ldr	r2, [r4, #4]
 800ac74:	2100      	movs	r1, #0
 800ac76:	4628      	mov	r0, r5
 800ac78:	f7f5 fac2 	bl	8000200 <memchr>
 800ac7c:	b108      	cbz	r0, 800ac82 <_printf_i+0x1f2>
 800ac7e:	1b40      	subs	r0, r0, r5
 800ac80:	6060      	str	r0, [r4, #4]
 800ac82:	6863      	ldr	r3, [r4, #4]
 800ac84:	6123      	str	r3, [r4, #16]
 800ac86:	2300      	movs	r3, #0
 800ac88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac8c:	e7a8      	b.n	800abe0 <_printf_i+0x150>
 800ac8e:	6923      	ldr	r3, [r4, #16]
 800ac90:	462a      	mov	r2, r5
 800ac92:	4649      	mov	r1, r9
 800ac94:	4640      	mov	r0, r8
 800ac96:	47d0      	blx	sl
 800ac98:	3001      	adds	r0, #1
 800ac9a:	d0ab      	beq.n	800abf4 <_printf_i+0x164>
 800ac9c:	6823      	ldr	r3, [r4, #0]
 800ac9e:	079b      	lsls	r3, r3, #30
 800aca0:	d413      	bmi.n	800acca <_printf_i+0x23a>
 800aca2:	68e0      	ldr	r0, [r4, #12]
 800aca4:	9b03      	ldr	r3, [sp, #12]
 800aca6:	4298      	cmp	r0, r3
 800aca8:	bfb8      	it	lt
 800acaa:	4618      	movlt	r0, r3
 800acac:	e7a4      	b.n	800abf8 <_printf_i+0x168>
 800acae:	2301      	movs	r3, #1
 800acb0:	4632      	mov	r2, r6
 800acb2:	4649      	mov	r1, r9
 800acb4:	4640      	mov	r0, r8
 800acb6:	47d0      	blx	sl
 800acb8:	3001      	adds	r0, #1
 800acba:	d09b      	beq.n	800abf4 <_printf_i+0x164>
 800acbc:	3501      	adds	r5, #1
 800acbe:	68e3      	ldr	r3, [r4, #12]
 800acc0:	9903      	ldr	r1, [sp, #12]
 800acc2:	1a5b      	subs	r3, r3, r1
 800acc4:	42ab      	cmp	r3, r5
 800acc6:	dcf2      	bgt.n	800acae <_printf_i+0x21e>
 800acc8:	e7eb      	b.n	800aca2 <_printf_i+0x212>
 800acca:	2500      	movs	r5, #0
 800accc:	f104 0619 	add.w	r6, r4, #25
 800acd0:	e7f5      	b.n	800acbe <_printf_i+0x22e>
 800acd2:	bf00      	nop
 800acd4:	0800d272 	.word	0x0800d272
 800acd8:	0800d283 	.word	0x0800d283

0800acdc <rand>:
 800acdc:	4b16      	ldr	r3, [pc, #88]	; (800ad38 <rand+0x5c>)
 800acde:	b510      	push	{r4, lr}
 800ace0:	681c      	ldr	r4, [r3, #0]
 800ace2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ace4:	b9b3      	cbnz	r3, 800ad14 <rand+0x38>
 800ace6:	2018      	movs	r0, #24
 800ace8:	f7ff fa80 	bl	800a1ec <malloc>
 800acec:	63a0      	str	r0, [r4, #56]	; 0x38
 800acee:	b928      	cbnz	r0, 800acfc <rand+0x20>
 800acf0:	4602      	mov	r2, r0
 800acf2:	4b12      	ldr	r3, [pc, #72]	; (800ad3c <rand+0x60>)
 800acf4:	4812      	ldr	r0, [pc, #72]	; (800ad40 <rand+0x64>)
 800acf6:	214e      	movs	r1, #78	; 0x4e
 800acf8:	f000 f85e 	bl	800adb8 <__assert_func>
 800acfc:	4a11      	ldr	r2, [pc, #68]	; (800ad44 <rand+0x68>)
 800acfe:	4b12      	ldr	r3, [pc, #72]	; (800ad48 <rand+0x6c>)
 800ad00:	e9c0 2300 	strd	r2, r3, [r0]
 800ad04:	4b11      	ldr	r3, [pc, #68]	; (800ad4c <rand+0x70>)
 800ad06:	6083      	str	r3, [r0, #8]
 800ad08:	230b      	movs	r3, #11
 800ad0a:	8183      	strh	r3, [r0, #12]
 800ad0c:	2201      	movs	r2, #1
 800ad0e:	2300      	movs	r3, #0
 800ad10:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800ad14:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800ad16:	4a0e      	ldr	r2, [pc, #56]	; (800ad50 <rand+0x74>)
 800ad18:	6920      	ldr	r0, [r4, #16]
 800ad1a:	6963      	ldr	r3, [r4, #20]
 800ad1c:	490d      	ldr	r1, [pc, #52]	; (800ad54 <rand+0x78>)
 800ad1e:	4342      	muls	r2, r0
 800ad20:	fb01 2203 	mla	r2, r1, r3, r2
 800ad24:	fba0 0101 	umull	r0, r1, r0, r1
 800ad28:	1c43      	adds	r3, r0, #1
 800ad2a:	eb42 0001 	adc.w	r0, r2, r1
 800ad2e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800ad32:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ad36:	bd10      	pop	{r4, pc}
 800ad38:	20000044 	.word	0x20000044
 800ad3c:	0800d294 	.word	0x0800d294
 800ad40:	0800d2ab 	.word	0x0800d2ab
 800ad44:	abcd330e 	.word	0xabcd330e
 800ad48:	e66d1234 	.word	0xe66d1234
 800ad4c:	0005deec 	.word	0x0005deec
 800ad50:	5851f42d 	.word	0x5851f42d
 800ad54:	4c957f2d 	.word	0x4c957f2d

0800ad58 <_sbrk_r>:
 800ad58:	b538      	push	{r3, r4, r5, lr}
 800ad5a:	4d06      	ldr	r5, [pc, #24]	; (800ad74 <_sbrk_r+0x1c>)
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	4604      	mov	r4, r0
 800ad60:	4608      	mov	r0, r1
 800ad62:	602b      	str	r3, [r5, #0]
 800ad64:	f7fc f9c6 	bl	80070f4 <_sbrk>
 800ad68:	1c43      	adds	r3, r0, #1
 800ad6a:	d102      	bne.n	800ad72 <_sbrk_r+0x1a>
 800ad6c:	682b      	ldr	r3, [r5, #0]
 800ad6e:	b103      	cbz	r3, 800ad72 <_sbrk_r+0x1a>
 800ad70:	6023      	str	r3, [r4, #0]
 800ad72:	bd38      	pop	{r3, r4, r5, pc}
 800ad74:	200005a0 	.word	0x200005a0

0800ad78 <siprintf>:
 800ad78:	b40e      	push	{r1, r2, r3}
 800ad7a:	b500      	push	{lr}
 800ad7c:	b09c      	sub	sp, #112	; 0x70
 800ad7e:	ab1d      	add	r3, sp, #116	; 0x74
 800ad80:	9002      	str	r0, [sp, #8]
 800ad82:	9006      	str	r0, [sp, #24]
 800ad84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ad88:	4809      	ldr	r0, [pc, #36]	; (800adb0 <siprintf+0x38>)
 800ad8a:	9107      	str	r1, [sp, #28]
 800ad8c:	9104      	str	r1, [sp, #16]
 800ad8e:	4909      	ldr	r1, [pc, #36]	; (800adb4 <siprintf+0x3c>)
 800ad90:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad94:	9105      	str	r1, [sp, #20]
 800ad96:	6800      	ldr	r0, [r0, #0]
 800ad98:	9301      	str	r3, [sp, #4]
 800ad9a:	a902      	add	r1, sp, #8
 800ad9c:	f001 fabe 	bl	800c31c <_svfiprintf_r>
 800ada0:	9b02      	ldr	r3, [sp, #8]
 800ada2:	2200      	movs	r2, #0
 800ada4:	701a      	strb	r2, [r3, #0]
 800ada6:	b01c      	add	sp, #112	; 0x70
 800ada8:	f85d eb04 	ldr.w	lr, [sp], #4
 800adac:	b003      	add	sp, #12
 800adae:	4770      	bx	lr
 800adb0:	20000044 	.word	0x20000044
 800adb4:	ffff0208 	.word	0xffff0208

0800adb8 <__assert_func>:
 800adb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800adba:	4614      	mov	r4, r2
 800adbc:	461a      	mov	r2, r3
 800adbe:	4b09      	ldr	r3, [pc, #36]	; (800ade4 <__assert_func+0x2c>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	4605      	mov	r5, r0
 800adc4:	68d8      	ldr	r0, [r3, #12]
 800adc6:	b14c      	cbz	r4, 800addc <__assert_func+0x24>
 800adc8:	4b07      	ldr	r3, [pc, #28]	; (800ade8 <__assert_func+0x30>)
 800adca:	9100      	str	r1, [sp, #0]
 800adcc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800add0:	4906      	ldr	r1, [pc, #24]	; (800adec <__assert_func+0x34>)
 800add2:	462b      	mov	r3, r5
 800add4:	f000 fe8a 	bl	800baec <fiprintf>
 800add8:	f001 fdba 	bl	800c950 <abort>
 800addc:	4b04      	ldr	r3, [pc, #16]	; (800adf0 <__assert_func+0x38>)
 800adde:	461c      	mov	r4, r3
 800ade0:	e7f3      	b.n	800adca <__assert_func+0x12>
 800ade2:	bf00      	nop
 800ade4:	20000044 	.word	0x20000044
 800ade8:	0800d306 	.word	0x0800d306
 800adec:	0800d313 	.word	0x0800d313
 800adf0:	0800d341 	.word	0x0800d341

0800adf4 <quorem>:
 800adf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adf8:	6903      	ldr	r3, [r0, #16]
 800adfa:	690c      	ldr	r4, [r1, #16]
 800adfc:	42a3      	cmp	r3, r4
 800adfe:	4607      	mov	r7, r0
 800ae00:	f2c0 8081 	blt.w	800af06 <quorem+0x112>
 800ae04:	3c01      	subs	r4, #1
 800ae06:	f101 0814 	add.w	r8, r1, #20
 800ae0a:	f100 0514 	add.w	r5, r0, #20
 800ae0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae12:	9301      	str	r3, [sp, #4]
 800ae14:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ae18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae1c:	3301      	adds	r3, #1
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ae24:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ae28:	fbb2 f6f3 	udiv	r6, r2, r3
 800ae2c:	d331      	bcc.n	800ae92 <quorem+0x9e>
 800ae2e:	f04f 0e00 	mov.w	lr, #0
 800ae32:	4640      	mov	r0, r8
 800ae34:	46ac      	mov	ip, r5
 800ae36:	46f2      	mov	sl, lr
 800ae38:	f850 2b04 	ldr.w	r2, [r0], #4
 800ae3c:	b293      	uxth	r3, r2
 800ae3e:	fb06 e303 	mla	r3, r6, r3, lr
 800ae42:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ae46:	b29b      	uxth	r3, r3
 800ae48:	ebaa 0303 	sub.w	r3, sl, r3
 800ae4c:	f8dc a000 	ldr.w	sl, [ip]
 800ae50:	0c12      	lsrs	r2, r2, #16
 800ae52:	fa13 f38a 	uxtah	r3, r3, sl
 800ae56:	fb06 e202 	mla	r2, r6, r2, lr
 800ae5a:	9300      	str	r3, [sp, #0]
 800ae5c:	9b00      	ldr	r3, [sp, #0]
 800ae5e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ae62:	b292      	uxth	r2, r2
 800ae64:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ae68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ae6c:	f8bd 3000 	ldrh.w	r3, [sp]
 800ae70:	4581      	cmp	r9, r0
 800ae72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae76:	f84c 3b04 	str.w	r3, [ip], #4
 800ae7a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ae7e:	d2db      	bcs.n	800ae38 <quorem+0x44>
 800ae80:	f855 300b 	ldr.w	r3, [r5, fp]
 800ae84:	b92b      	cbnz	r3, 800ae92 <quorem+0x9e>
 800ae86:	9b01      	ldr	r3, [sp, #4]
 800ae88:	3b04      	subs	r3, #4
 800ae8a:	429d      	cmp	r5, r3
 800ae8c:	461a      	mov	r2, r3
 800ae8e:	d32e      	bcc.n	800aeee <quorem+0xfa>
 800ae90:	613c      	str	r4, [r7, #16]
 800ae92:	4638      	mov	r0, r7
 800ae94:	f001 f8ce 	bl	800c034 <__mcmp>
 800ae98:	2800      	cmp	r0, #0
 800ae9a:	db24      	blt.n	800aee6 <quorem+0xf2>
 800ae9c:	3601      	adds	r6, #1
 800ae9e:	4628      	mov	r0, r5
 800aea0:	f04f 0c00 	mov.w	ip, #0
 800aea4:	f858 2b04 	ldr.w	r2, [r8], #4
 800aea8:	f8d0 e000 	ldr.w	lr, [r0]
 800aeac:	b293      	uxth	r3, r2
 800aeae:	ebac 0303 	sub.w	r3, ip, r3
 800aeb2:	0c12      	lsrs	r2, r2, #16
 800aeb4:	fa13 f38e 	uxtah	r3, r3, lr
 800aeb8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800aebc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aec0:	b29b      	uxth	r3, r3
 800aec2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aec6:	45c1      	cmp	r9, r8
 800aec8:	f840 3b04 	str.w	r3, [r0], #4
 800aecc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800aed0:	d2e8      	bcs.n	800aea4 <quorem+0xb0>
 800aed2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aed6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aeda:	b922      	cbnz	r2, 800aee6 <quorem+0xf2>
 800aedc:	3b04      	subs	r3, #4
 800aede:	429d      	cmp	r5, r3
 800aee0:	461a      	mov	r2, r3
 800aee2:	d30a      	bcc.n	800aefa <quorem+0x106>
 800aee4:	613c      	str	r4, [r7, #16]
 800aee6:	4630      	mov	r0, r6
 800aee8:	b003      	add	sp, #12
 800aeea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeee:	6812      	ldr	r2, [r2, #0]
 800aef0:	3b04      	subs	r3, #4
 800aef2:	2a00      	cmp	r2, #0
 800aef4:	d1cc      	bne.n	800ae90 <quorem+0x9c>
 800aef6:	3c01      	subs	r4, #1
 800aef8:	e7c7      	b.n	800ae8a <quorem+0x96>
 800aefa:	6812      	ldr	r2, [r2, #0]
 800aefc:	3b04      	subs	r3, #4
 800aefe:	2a00      	cmp	r2, #0
 800af00:	d1f0      	bne.n	800aee4 <quorem+0xf0>
 800af02:	3c01      	subs	r4, #1
 800af04:	e7eb      	b.n	800aede <quorem+0xea>
 800af06:	2000      	movs	r0, #0
 800af08:	e7ee      	b.n	800aee8 <quorem+0xf4>
 800af0a:	0000      	movs	r0, r0
 800af0c:	0000      	movs	r0, r0
	...

0800af10 <_dtoa_r>:
 800af10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af14:	ed2d 8b04 	vpush	{d8-d9}
 800af18:	ec57 6b10 	vmov	r6, r7, d0
 800af1c:	b093      	sub	sp, #76	; 0x4c
 800af1e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800af20:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800af24:	9106      	str	r1, [sp, #24]
 800af26:	ee10 aa10 	vmov	sl, s0
 800af2a:	4604      	mov	r4, r0
 800af2c:	9209      	str	r2, [sp, #36]	; 0x24
 800af2e:	930c      	str	r3, [sp, #48]	; 0x30
 800af30:	46bb      	mov	fp, r7
 800af32:	b975      	cbnz	r5, 800af52 <_dtoa_r+0x42>
 800af34:	2010      	movs	r0, #16
 800af36:	f7ff f959 	bl	800a1ec <malloc>
 800af3a:	4602      	mov	r2, r0
 800af3c:	6260      	str	r0, [r4, #36]	; 0x24
 800af3e:	b920      	cbnz	r0, 800af4a <_dtoa_r+0x3a>
 800af40:	4ba7      	ldr	r3, [pc, #668]	; (800b1e0 <_dtoa_r+0x2d0>)
 800af42:	21ea      	movs	r1, #234	; 0xea
 800af44:	48a7      	ldr	r0, [pc, #668]	; (800b1e4 <_dtoa_r+0x2d4>)
 800af46:	f7ff ff37 	bl	800adb8 <__assert_func>
 800af4a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800af4e:	6005      	str	r5, [r0, #0]
 800af50:	60c5      	str	r5, [r0, #12]
 800af52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af54:	6819      	ldr	r1, [r3, #0]
 800af56:	b151      	cbz	r1, 800af6e <_dtoa_r+0x5e>
 800af58:	685a      	ldr	r2, [r3, #4]
 800af5a:	604a      	str	r2, [r1, #4]
 800af5c:	2301      	movs	r3, #1
 800af5e:	4093      	lsls	r3, r2
 800af60:	608b      	str	r3, [r1, #8]
 800af62:	4620      	mov	r0, r4
 800af64:	f000 fe24 	bl	800bbb0 <_Bfree>
 800af68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af6a:	2200      	movs	r2, #0
 800af6c:	601a      	str	r2, [r3, #0]
 800af6e:	1e3b      	subs	r3, r7, #0
 800af70:	bfaa      	itet	ge
 800af72:	2300      	movge	r3, #0
 800af74:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800af78:	f8c8 3000 	strge.w	r3, [r8]
 800af7c:	4b9a      	ldr	r3, [pc, #616]	; (800b1e8 <_dtoa_r+0x2d8>)
 800af7e:	bfbc      	itt	lt
 800af80:	2201      	movlt	r2, #1
 800af82:	f8c8 2000 	strlt.w	r2, [r8]
 800af86:	ea33 030b 	bics.w	r3, r3, fp
 800af8a:	d11b      	bne.n	800afc4 <_dtoa_r+0xb4>
 800af8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af8e:	f242 730f 	movw	r3, #9999	; 0x270f
 800af92:	6013      	str	r3, [r2, #0]
 800af94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800af98:	4333      	orrs	r3, r6
 800af9a:	f000 8592 	beq.w	800bac2 <_dtoa_r+0xbb2>
 800af9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800afa0:	b963      	cbnz	r3, 800afbc <_dtoa_r+0xac>
 800afa2:	4b92      	ldr	r3, [pc, #584]	; (800b1ec <_dtoa_r+0x2dc>)
 800afa4:	e022      	b.n	800afec <_dtoa_r+0xdc>
 800afa6:	4b92      	ldr	r3, [pc, #584]	; (800b1f0 <_dtoa_r+0x2e0>)
 800afa8:	9301      	str	r3, [sp, #4]
 800afaa:	3308      	adds	r3, #8
 800afac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800afae:	6013      	str	r3, [r2, #0]
 800afb0:	9801      	ldr	r0, [sp, #4]
 800afb2:	b013      	add	sp, #76	; 0x4c
 800afb4:	ecbd 8b04 	vpop	{d8-d9}
 800afb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afbc:	4b8b      	ldr	r3, [pc, #556]	; (800b1ec <_dtoa_r+0x2dc>)
 800afbe:	9301      	str	r3, [sp, #4]
 800afc0:	3303      	adds	r3, #3
 800afc2:	e7f3      	b.n	800afac <_dtoa_r+0x9c>
 800afc4:	2200      	movs	r2, #0
 800afc6:	2300      	movs	r3, #0
 800afc8:	4650      	mov	r0, sl
 800afca:	4659      	mov	r1, fp
 800afcc:	f7f5 fd8c 	bl	8000ae8 <__aeabi_dcmpeq>
 800afd0:	ec4b ab19 	vmov	d9, sl, fp
 800afd4:	4680      	mov	r8, r0
 800afd6:	b158      	cbz	r0, 800aff0 <_dtoa_r+0xe0>
 800afd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800afda:	2301      	movs	r3, #1
 800afdc:	6013      	str	r3, [r2, #0]
 800afde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	f000 856b 	beq.w	800babc <_dtoa_r+0xbac>
 800afe6:	4883      	ldr	r0, [pc, #524]	; (800b1f4 <_dtoa_r+0x2e4>)
 800afe8:	6018      	str	r0, [r3, #0]
 800afea:	1e43      	subs	r3, r0, #1
 800afec:	9301      	str	r3, [sp, #4]
 800afee:	e7df      	b.n	800afb0 <_dtoa_r+0xa0>
 800aff0:	ec4b ab10 	vmov	d0, sl, fp
 800aff4:	aa10      	add	r2, sp, #64	; 0x40
 800aff6:	a911      	add	r1, sp, #68	; 0x44
 800aff8:	4620      	mov	r0, r4
 800affa:	f001 f8c1 	bl	800c180 <__d2b>
 800affe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b002:	ee08 0a10 	vmov	s16, r0
 800b006:	2d00      	cmp	r5, #0
 800b008:	f000 8084 	beq.w	800b114 <_dtoa_r+0x204>
 800b00c:	ee19 3a90 	vmov	r3, s19
 800b010:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b014:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b018:	4656      	mov	r6, sl
 800b01a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b01e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b022:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b026:	4b74      	ldr	r3, [pc, #464]	; (800b1f8 <_dtoa_r+0x2e8>)
 800b028:	2200      	movs	r2, #0
 800b02a:	4630      	mov	r0, r6
 800b02c:	4639      	mov	r1, r7
 800b02e:	f7f5 f93b 	bl	80002a8 <__aeabi_dsub>
 800b032:	a365      	add	r3, pc, #404	; (adr r3, 800b1c8 <_dtoa_r+0x2b8>)
 800b034:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b038:	f7f5 faee 	bl	8000618 <__aeabi_dmul>
 800b03c:	a364      	add	r3, pc, #400	; (adr r3, 800b1d0 <_dtoa_r+0x2c0>)
 800b03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b042:	f7f5 f933 	bl	80002ac <__adddf3>
 800b046:	4606      	mov	r6, r0
 800b048:	4628      	mov	r0, r5
 800b04a:	460f      	mov	r7, r1
 800b04c:	f7f5 fa7a 	bl	8000544 <__aeabi_i2d>
 800b050:	a361      	add	r3, pc, #388	; (adr r3, 800b1d8 <_dtoa_r+0x2c8>)
 800b052:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b056:	f7f5 fadf 	bl	8000618 <__aeabi_dmul>
 800b05a:	4602      	mov	r2, r0
 800b05c:	460b      	mov	r3, r1
 800b05e:	4630      	mov	r0, r6
 800b060:	4639      	mov	r1, r7
 800b062:	f7f5 f923 	bl	80002ac <__adddf3>
 800b066:	4606      	mov	r6, r0
 800b068:	460f      	mov	r7, r1
 800b06a:	f7f5 fd85 	bl	8000b78 <__aeabi_d2iz>
 800b06e:	2200      	movs	r2, #0
 800b070:	9000      	str	r0, [sp, #0]
 800b072:	2300      	movs	r3, #0
 800b074:	4630      	mov	r0, r6
 800b076:	4639      	mov	r1, r7
 800b078:	f7f5 fd40 	bl	8000afc <__aeabi_dcmplt>
 800b07c:	b150      	cbz	r0, 800b094 <_dtoa_r+0x184>
 800b07e:	9800      	ldr	r0, [sp, #0]
 800b080:	f7f5 fa60 	bl	8000544 <__aeabi_i2d>
 800b084:	4632      	mov	r2, r6
 800b086:	463b      	mov	r3, r7
 800b088:	f7f5 fd2e 	bl	8000ae8 <__aeabi_dcmpeq>
 800b08c:	b910      	cbnz	r0, 800b094 <_dtoa_r+0x184>
 800b08e:	9b00      	ldr	r3, [sp, #0]
 800b090:	3b01      	subs	r3, #1
 800b092:	9300      	str	r3, [sp, #0]
 800b094:	9b00      	ldr	r3, [sp, #0]
 800b096:	2b16      	cmp	r3, #22
 800b098:	d85a      	bhi.n	800b150 <_dtoa_r+0x240>
 800b09a:	9a00      	ldr	r2, [sp, #0]
 800b09c:	4b57      	ldr	r3, [pc, #348]	; (800b1fc <_dtoa_r+0x2ec>)
 800b09e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a6:	ec51 0b19 	vmov	r0, r1, d9
 800b0aa:	f7f5 fd27 	bl	8000afc <__aeabi_dcmplt>
 800b0ae:	2800      	cmp	r0, #0
 800b0b0:	d050      	beq.n	800b154 <_dtoa_r+0x244>
 800b0b2:	9b00      	ldr	r3, [sp, #0]
 800b0b4:	3b01      	subs	r3, #1
 800b0b6:	9300      	str	r3, [sp, #0]
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800b0bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b0be:	1b5d      	subs	r5, r3, r5
 800b0c0:	1e6b      	subs	r3, r5, #1
 800b0c2:	9305      	str	r3, [sp, #20]
 800b0c4:	bf45      	ittet	mi
 800b0c6:	f1c5 0301 	rsbmi	r3, r5, #1
 800b0ca:	9304      	strmi	r3, [sp, #16]
 800b0cc:	2300      	movpl	r3, #0
 800b0ce:	2300      	movmi	r3, #0
 800b0d0:	bf4c      	ite	mi
 800b0d2:	9305      	strmi	r3, [sp, #20]
 800b0d4:	9304      	strpl	r3, [sp, #16]
 800b0d6:	9b00      	ldr	r3, [sp, #0]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	db3d      	blt.n	800b158 <_dtoa_r+0x248>
 800b0dc:	9b05      	ldr	r3, [sp, #20]
 800b0de:	9a00      	ldr	r2, [sp, #0]
 800b0e0:	920a      	str	r2, [sp, #40]	; 0x28
 800b0e2:	4413      	add	r3, r2
 800b0e4:	9305      	str	r3, [sp, #20]
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	9307      	str	r3, [sp, #28]
 800b0ea:	9b06      	ldr	r3, [sp, #24]
 800b0ec:	2b09      	cmp	r3, #9
 800b0ee:	f200 8089 	bhi.w	800b204 <_dtoa_r+0x2f4>
 800b0f2:	2b05      	cmp	r3, #5
 800b0f4:	bfc4      	itt	gt
 800b0f6:	3b04      	subgt	r3, #4
 800b0f8:	9306      	strgt	r3, [sp, #24]
 800b0fa:	9b06      	ldr	r3, [sp, #24]
 800b0fc:	f1a3 0302 	sub.w	r3, r3, #2
 800b100:	bfcc      	ite	gt
 800b102:	2500      	movgt	r5, #0
 800b104:	2501      	movle	r5, #1
 800b106:	2b03      	cmp	r3, #3
 800b108:	f200 8087 	bhi.w	800b21a <_dtoa_r+0x30a>
 800b10c:	e8df f003 	tbb	[pc, r3]
 800b110:	59383a2d 	.word	0x59383a2d
 800b114:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b118:	441d      	add	r5, r3
 800b11a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b11e:	2b20      	cmp	r3, #32
 800b120:	bfc1      	itttt	gt
 800b122:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b126:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b12a:	fa0b f303 	lslgt.w	r3, fp, r3
 800b12e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b132:	bfda      	itte	le
 800b134:	f1c3 0320 	rsble	r3, r3, #32
 800b138:	fa06 f003 	lslle.w	r0, r6, r3
 800b13c:	4318      	orrgt	r0, r3
 800b13e:	f7f5 f9f1 	bl	8000524 <__aeabi_ui2d>
 800b142:	2301      	movs	r3, #1
 800b144:	4606      	mov	r6, r0
 800b146:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b14a:	3d01      	subs	r5, #1
 800b14c:	930e      	str	r3, [sp, #56]	; 0x38
 800b14e:	e76a      	b.n	800b026 <_dtoa_r+0x116>
 800b150:	2301      	movs	r3, #1
 800b152:	e7b2      	b.n	800b0ba <_dtoa_r+0x1aa>
 800b154:	900b      	str	r0, [sp, #44]	; 0x2c
 800b156:	e7b1      	b.n	800b0bc <_dtoa_r+0x1ac>
 800b158:	9b04      	ldr	r3, [sp, #16]
 800b15a:	9a00      	ldr	r2, [sp, #0]
 800b15c:	1a9b      	subs	r3, r3, r2
 800b15e:	9304      	str	r3, [sp, #16]
 800b160:	4253      	negs	r3, r2
 800b162:	9307      	str	r3, [sp, #28]
 800b164:	2300      	movs	r3, #0
 800b166:	930a      	str	r3, [sp, #40]	; 0x28
 800b168:	e7bf      	b.n	800b0ea <_dtoa_r+0x1da>
 800b16a:	2300      	movs	r3, #0
 800b16c:	9308      	str	r3, [sp, #32]
 800b16e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b170:	2b00      	cmp	r3, #0
 800b172:	dc55      	bgt.n	800b220 <_dtoa_r+0x310>
 800b174:	2301      	movs	r3, #1
 800b176:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b17a:	461a      	mov	r2, r3
 800b17c:	9209      	str	r2, [sp, #36]	; 0x24
 800b17e:	e00c      	b.n	800b19a <_dtoa_r+0x28a>
 800b180:	2301      	movs	r3, #1
 800b182:	e7f3      	b.n	800b16c <_dtoa_r+0x25c>
 800b184:	2300      	movs	r3, #0
 800b186:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b188:	9308      	str	r3, [sp, #32]
 800b18a:	9b00      	ldr	r3, [sp, #0]
 800b18c:	4413      	add	r3, r2
 800b18e:	9302      	str	r3, [sp, #8]
 800b190:	3301      	adds	r3, #1
 800b192:	2b01      	cmp	r3, #1
 800b194:	9303      	str	r3, [sp, #12]
 800b196:	bfb8      	it	lt
 800b198:	2301      	movlt	r3, #1
 800b19a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b19c:	2200      	movs	r2, #0
 800b19e:	6042      	str	r2, [r0, #4]
 800b1a0:	2204      	movs	r2, #4
 800b1a2:	f102 0614 	add.w	r6, r2, #20
 800b1a6:	429e      	cmp	r6, r3
 800b1a8:	6841      	ldr	r1, [r0, #4]
 800b1aa:	d93d      	bls.n	800b228 <_dtoa_r+0x318>
 800b1ac:	4620      	mov	r0, r4
 800b1ae:	f000 fcbf 	bl	800bb30 <_Balloc>
 800b1b2:	9001      	str	r0, [sp, #4]
 800b1b4:	2800      	cmp	r0, #0
 800b1b6:	d13b      	bne.n	800b230 <_dtoa_r+0x320>
 800b1b8:	4b11      	ldr	r3, [pc, #68]	; (800b200 <_dtoa_r+0x2f0>)
 800b1ba:	4602      	mov	r2, r0
 800b1bc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b1c0:	e6c0      	b.n	800af44 <_dtoa_r+0x34>
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	e7df      	b.n	800b186 <_dtoa_r+0x276>
 800b1c6:	bf00      	nop
 800b1c8:	636f4361 	.word	0x636f4361
 800b1cc:	3fd287a7 	.word	0x3fd287a7
 800b1d0:	8b60c8b3 	.word	0x8b60c8b3
 800b1d4:	3fc68a28 	.word	0x3fc68a28
 800b1d8:	509f79fb 	.word	0x509f79fb
 800b1dc:	3fd34413 	.word	0x3fd34413
 800b1e0:	0800d294 	.word	0x0800d294
 800b1e4:	0800d34f 	.word	0x0800d34f
 800b1e8:	7ff00000 	.word	0x7ff00000
 800b1ec:	0800d34b 	.word	0x0800d34b
 800b1f0:	0800d342 	.word	0x0800d342
 800b1f4:	0800d271 	.word	0x0800d271
 800b1f8:	3ff80000 	.word	0x3ff80000
 800b1fc:	0800d440 	.word	0x0800d440
 800b200:	0800d3aa 	.word	0x0800d3aa
 800b204:	2501      	movs	r5, #1
 800b206:	2300      	movs	r3, #0
 800b208:	9306      	str	r3, [sp, #24]
 800b20a:	9508      	str	r5, [sp, #32]
 800b20c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b210:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b214:	2200      	movs	r2, #0
 800b216:	2312      	movs	r3, #18
 800b218:	e7b0      	b.n	800b17c <_dtoa_r+0x26c>
 800b21a:	2301      	movs	r3, #1
 800b21c:	9308      	str	r3, [sp, #32]
 800b21e:	e7f5      	b.n	800b20c <_dtoa_r+0x2fc>
 800b220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b222:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b226:	e7b8      	b.n	800b19a <_dtoa_r+0x28a>
 800b228:	3101      	adds	r1, #1
 800b22a:	6041      	str	r1, [r0, #4]
 800b22c:	0052      	lsls	r2, r2, #1
 800b22e:	e7b8      	b.n	800b1a2 <_dtoa_r+0x292>
 800b230:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b232:	9a01      	ldr	r2, [sp, #4]
 800b234:	601a      	str	r2, [r3, #0]
 800b236:	9b03      	ldr	r3, [sp, #12]
 800b238:	2b0e      	cmp	r3, #14
 800b23a:	f200 809d 	bhi.w	800b378 <_dtoa_r+0x468>
 800b23e:	2d00      	cmp	r5, #0
 800b240:	f000 809a 	beq.w	800b378 <_dtoa_r+0x468>
 800b244:	9b00      	ldr	r3, [sp, #0]
 800b246:	2b00      	cmp	r3, #0
 800b248:	dd32      	ble.n	800b2b0 <_dtoa_r+0x3a0>
 800b24a:	4ab7      	ldr	r2, [pc, #732]	; (800b528 <_dtoa_r+0x618>)
 800b24c:	f003 030f 	and.w	r3, r3, #15
 800b250:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b254:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b258:	9b00      	ldr	r3, [sp, #0]
 800b25a:	05d8      	lsls	r0, r3, #23
 800b25c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b260:	d516      	bpl.n	800b290 <_dtoa_r+0x380>
 800b262:	4bb2      	ldr	r3, [pc, #712]	; (800b52c <_dtoa_r+0x61c>)
 800b264:	ec51 0b19 	vmov	r0, r1, d9
 800b268:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b26c:	f7f5 fafe 	bl	800086c <__aeabi_ddiv>
 800b270:	f007 070f 	and.w	r7, r7, #15
 800b274:	4682      	mov	sl, r0
 800b276:	468b      	mov	fp, r1
 800b278:	2503      	movs	r5, #3
 800b27a:	4eac      	ldr	r6, [pc, #688]	; (800b52c <_dtoa_r+0x61c>)
 800b27c:	b957      	cbnz	r7, 800b294 <_dtoa_r+0x384>
 800b27e:	4642      	mov	r2, r8
 800b280:	464b      	mov	r3, r9
 800b282:	4650      	mov	r0, sl
 800b284:	4659      	mov	r1, fp
 800b286:	f7f5 faf1 	bl	800086c <__aeabi_ddiv>
 800b28a:	4682      	mov	sl, r0
 800b28c:	468b      	mov	fp, r1
 800b28e:	e028      	b.n	800b2e2 <_dtoa_r+0x3d2>
 800b290:	2502      	movs	r5, #2
 800b292:	e7f2      	b.n	800b27a <_dtoa_r+0x36a>
 800b294:	07f9      	lsls	r1, r7, #31
 800b296:	d508      	bpl.n	800b2aa <_dtoa_r+0x39a>
 800b298:	4640      	mov	r0, r8
 800b29a:	4649      	mov	r1, r9
 800b29c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b2a0:	f7f5 f9ba 	bl	8000618 <__aeabi_dmul>
 800b2a4:	3501      	adds	r5, #1
 800b2a6:	4680      	mov	r8, r0
 800b2a8:	4689      	mov	r9, r1
 800b2aa:	107f      	asrs	r7, r7, #1
 800b2ac:	3608      	adds	r6, #8
 800b2ae:	e7e5      	b.n	800b27c <_dtoa_r+0x36c>
 800b2b0:	f000 809b 	beq.w	800b3ea <_dtoa_r+0x4da>
 800b2b4:	9b00      	ldr	r3, [sp, #0]
 800b2b6:	4f9d      	ldr	r7, [pc, #628]	; (800b52c <_dtoa_r+0x61c>)
 800b2b8:	425e      	negs	r6, r3
 800b2ba:	4b9b      	ldr	r3, [pc, #620]	; (800b528 <_dtoa_r+0x618>)
 800b2bc:	f006 020f 	and.w	r2, r6, #15
 800b2c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c8:	ec51 0b19 	vmov	r0, r1, d9
 800b2cc:	f7f5 f9a4 	bl	8000618 <__aeabi_dmul>
 800b2d0:	1136      	asrs	r6, r6, #4
 800b2d2:	4682      	mov	sl, r0
 800b2d4:	468b      	mov	fp, r1
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	2502      	movs	r5, #2
 800b2da:	2e00      	cmp	r6, #0
 800b2dc:	d17a      	bne.n	800b3d4 <_dtoa_r+0x4c4>
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d1d3      	bne.n	800b28a <_dtoa_r+0x37a>
 800b2e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	f000 8082 	beq.w	800b3ee <_dtoa_r+0x4de>
 800b2ea:	4b91      	ldr	r3, [pc, #580]	; (800b530 <_dtoa_r+0x620>)
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	4650      	mov	r0, sl
 800b2f0:	4659      	mov	r1, fp
 800b2f2:	f7f5 fc03 	bl	8000afc <__aeabi_dcmplt>
 800b2f6:	2800      	cmp	r0, #0
 800b2f8:	d079      	beq.n	800b3ee <_dtoa_r+0x4de>
 800b2fa:	9b03      	ldr	r3, [sp, #12]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d076      	beq.n	800b3ee <_dtoa_r+0x4de>
 800b300:	9b02      	ldr	r3, [sp, #8]
 800b302:	2b00      	cmp	r3, #0
 800b304:	dd36      	ble.n	800b374 <_dtoa_r+0x464>
 800b306:	9b00      	ldr	r3, [sp, #0]
 800b308:	4650      	mov	r0, sl
 800b30a:	4659      	mov	r1, fp
 800b30c:	1e5f      	subs	r7, r3, #1
 800b30e:	2200      	movs	r2, #0
 800b310:	4b88      	ldr	r3, [pc, #544]	; (800b534 <_dtoa_r+0x624>)
 800b312:	f7f5 f981 	bl	8000618 <__aeabi_dmul>
 800b316:	9e02      	ldr	r6, [sp, #8]
 800b318:	4682      	mov	sl, r0
 800b31a:	468b      	mov	fp, r1
 800b31c:	3501      	adds	r5, #1
 800b31e:	4628      	mov	r0, r5
 800b320:	f7f5 f910 	bl	8000544 <__aeabi_i2d>
 800b324:	4652      	mov	r2, sl
 800b326:	465b      	mov	r3, fp
 800b328:	f7f5 f976 	bl	8000618 <__aeabi_dmul>
 800b32c:	4b82      	ldr	r3, [pc, #520]	; (800b538 <_dtoa_r+0x628>)
 800b32e:	2200      	movs	r2, #0
 800b330:	f7f4 ffbc 	bl	80002ac <__adddf3>
 800b334:	46d0      	mov	r8, sl
 800b336:	46d9      	mov	r9, fp
 800b338:	4682      	mov	sl, r0
 800b33a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b33e:	2e00      	cmp	r6, #0
 800b340:	d158      	bne.n	800b3f4 <_dtoa_r+0x4e4>
 800b342:	4b7e      	ldr	r3, [pc, #504]	; (800b53c <_dtoa_r+0x62c>)
 800b344:	2200      	movs	r2, #0
 800b346:	4640      	mov	r0, r8
 800b348:	4649      	mov	r1, r9
 800b34a:	f7f4 ffad 	bl	80002a8 <__aeabi_dsub>
 800b34e:	4652      	mov	r2, sl
 800b350:	465b      	mov	r3, fp
 800b352:	4680      	mov	r8, r0
 800b354:	4689      	mov	r9, r1
 800b356:	f7f5 fbef 	bl	8000b38 <__aeabi_dcmpgt>
 800b35a:	2800      	cmp	r0, #0
 800b35c:	f040 8295 	bne.w	800b88a <_dtoa_r+0x97a>
 800b360:	4652      	mov	r2, sl
 800b362:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b366:	4640      	mov	r0, r8
 800b368:	4649      	mov	r1, r9
 800b36a:	f7f5 fbc7 	bl	8000afc <__aeabi_dcmplt>
 800b36e:	2800      	cmp	r0, #0
 800b370:	f040 8289 	bne.w	800b886 <_dtoa_r+0x976>
 800b374:	ec5b ab19 	vmov	sl, fp, d9
 800b378:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	f2c0 8148 	blt.w	800b610 <_dtoa_r+0x700>
 800b380:	9a00      	ldr	r2, [sp, #0]
 800b382:	2a0e      	cmp	r2, #14
 800b384:	f300 8144 	bgt.w	800b610 <_dtoa_r+0x700>
 800b388:	4b67      	ldr	r3, [pc, #412]	; (800b528 <_dtoa_r+0x618>)
 800b38a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b38e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b392:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b394:	2b00      	cmp	r3, #0
 800b396:	f280 80d5 	bge.w	800b544 <_dtoa_r+0x634>
 800b39a:	9b03      	ldr	r3, [sp, #12]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	f300 80d1 	bgt.w	800b544 <_dtoa_r+0x634>
 800b3a2:	f040 826f 	bne.w	800b884 <_dtoa_r+0x974>
 800b3a6:	4b65      	ldr	r3, [pc, #404]	; (800b53c <_dtoa_r+0x62c>)
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	4640      	mov	r0, r8
 800b3ac:	4649      	mov	r1, r9
 800b3ae:	f7f5 f933 	bl	8000618 <__aeabi_dmul>
 800b3b2:	4652      	mov	r2, sl
 800b3b4:	465b      	mov	r3, fp
 800b3b6:	f7f5 fbb5 	bl	8000b24 <__aeabi_dcmpge>
 800b3ba:	9e03      	ldr	r6, [sp, #12]
 800b3bc:	4637      	mov	r7, r6
 800b3be:	2800      	cmp	r0, #0
 800b3c0:	f040 8245 	bne.w	800b84e <_dtoa_r+0x93e>
 800b3c4:	9d01      	ldr	r5, [sp, #4]
 800b3c6:	2331      	movs	r3, #49	; 0x31
 800b3c8:	f805 3b01 	strb.w	r3, [r5], #1
 800b3cc:	9b00      	ldr	r3, [sp, #0]
 800b3ce:	3301      	adds	r3, #1
 800b3d0:	9300      	str	r3, [sp, #0]
 800b3d2:	e240      	b.n	800b856 <_dtoa_r+0x946>
 800b3d4:	07f2      	lsls	r2, r6, #31
 800b3d6:	d505      	bpl.n	800b3e4 <_dtoa_r+0x4d4>
 800b3d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3dc:	f7f5 f91c 	bl	8000618 <__aeabi_dmul>
 800b3e0:	3501      	adds	r5, #1
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	1076      	asrs	r6, r6, #1
 800b3e6:	3708      	adds	r7, #8
 800b3e8:	e777      	b.n	800b2da <_dtoa_r+0x3ca>
 800b3ea:	2502      	movs	r5, #2
 800b3ec:	e779      	b.n	800b2e2 <_dtoa_r+0x3d2>
 800b3ee:	9f00      	ldr	r7, [sp, #0]
 800b3f0:	9e03      	ldr	r6, [sp, #12]
 800b3f2:	e794      	b.n	800b31e <_dtoa_r+0x40e>
 800b3f4:	9901      	ldr	r1, [sp, #4]
 800b3f6:	4b4c      	ldr	r3, [pc, #304]	; (800b528 <_dtoa_r+0x618>)
 800b3f8:	4431      	add	r1, r6
 800b3fa:	910d      	str	r1, [sp, #52]	; 0x34
 800b3fc:	9908      	ldr	r1, [sp, #32]
 800b3fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b402:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b406:	2900      	cmp	r1, #0
 800b408:	d043      	beq.n	800b492 <_dtoa_r+0x582>
 800b40a:	494d      	ldr	r1, [pc, #308]	; (800b540 <_dtoa_r+0x630>)
 800b40c:	2000      	movs	r0, #0
 800b40e:	f7f5 fa2d 	bl	800086c <__aeabi_ddiv>
 800b412:	4652      	mov	r2, sl
 800b414:	465b      	mov	r3, fp
 800b416:	f7f4 ff47 	bl	80002a8 <__aeabi_dsub>
 800b41a:	9d01      	ldr	r5, [sp, #4]
 800b41c:	4682      	mov	sl, r0
 800b41e:	468b      	mov	fp, r1
 800b420:	4649      	mov	r1, r9
 800b422:	4640      	mov	r0, r8
 800b424:	f7f5 fba8 	bl	8000b78 <__aeabi_d2iz>
 800b428:	4606      	mov	r6, r0
 800b42a:	f7f5 f88b 	bl	8000544 <__aeabi_i2d>
 800b42e:	4602      	mov	r2, r0
 800b430:	460b      	mov	r3, r1
 800b432:	4640      	mov	r0, r8
 800b434:	4649      	mov	r1, r9
 800b436:	f7f4 ff37 	bl	80002a8 <__aeabi_dsub>
 800b43a:	3630      	adds	r6, #48	; 0x30
 800b43c:	f805 6b01 	strb.w	r6, [r5], #1
 800b440:	4652      	mov	r2, sl
 800b442:	465b      	mov	r3, fp
 800b444:	4680      	mov	r8, r0
 800b446:	4689      	mov	r9, r1
 800b448:	f7f5 fb58 	bl	8000afc <__aeabi_dcmplt>
 800b44c:	2800      	cmp	r0, #0
 800b44e:	d163      	bne.n	800b518 <_dtoa_r+0x608>
 800b450:	4642      	mov	r2, r8
 800b452:	464b      	mov	r3, r9
 800b454:	4936      	ldr	r1, [pc, #216]	; (800b530 <_dtoa_r+0x620>)
 800b456:	2000      	movs	r0, #0
 800b458:	f7f4 ff26 	bl	80002a8 <__aeabi_dsub>
 800b45c:	4652      	mov	r2, sl
 800b45e:	465b      	mov	r3, fp
 800b460:	f7f5 fb4c 	bl	8000afc <__aeabi_dcmplt>
 800b464:	2800      	cmp	r0, #0
 800b466:	f040 80b5 	bne.w	800b5d4 <_dtoa_r+0x6c4>
 800b46a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b46c:	429d      	cmp	r5, r3
 800b46e:	d081      	beq.n	800b374 <_dtoa_r+0x464>
 800b470:	4b30      	ldr	r3, [pc, #192]	; (800b534 <_dtoa_r+0x624>)
 800b472:	2200      	movs	r2, #0
 800b474:	4650      	mov	r0, sl
 800b476:	4659      	mov	r1, fp
 800b478:	f7f5 f8ce 	bl	8000618 <__aeabi_dmul>
 800b47c:	4b2d      	ldr	r3, [pc, #180]	; (800b534 <_dtoa_r+0x624>)
 800b47e:	4682      	mov	sl, r0
 800b480:	468b      	mov	fp, r1
 800b482:	4640      	mov	r0, r8
 800b484:	4649      	mov	r1, r9
 800b486:	2200      	movs	r2, #0
 800b488:	f7f5 f8c6 	bl	8000618 <__aeabi_dmul>
 800b48c:	4680      	mov	r8, r0
 800b48e:	4689      	mov	r9, r1
 800b490:	e7c6      	b.n	800b420 <_dtoa_r+0x510>
 800b492:	4650      	mov	r0, sl
 800b494:	4659      	mov	r1, fp
 800b496:	f7f5 f8bf 	bl	8000618 <__aeabi_dmul>
 800b49a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b49c:	9d01      	ldr	r5, [sp, #4]
 800b49e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b4a0:	4682      	mov	sl, r0
 800b4a2:	468b      	mov	fp, r1
 800b4a4:	4649      	mov	r1, r9
 800b4a6:	4640      	mov	r0, r8
 800b4a8:	f7f5 fb66 	bl	8000b78 <__aeabi_d2iz>
 800b4ac:	4606      	mov	r6, r0
 800b4ae:	f7f5 f849 	bl	8000544 <__aeabi_i2d>
 800b4b2:	3630      	adds	r6, #48	; 0x30
 800b4b4:	4602      	mov	r2, r0
 800b4b6:	460b      	mov	r3, r1
 800b4b8:	4640      	mov	r0, r8
 800b4ba:	4649      	mov	r1, r9
 800b4bc:	f7f4 fef4 	bl	80002a8 <__aeabi_dsub>
 800b4c0:	f805 6b01 	strb.w	r6, [r5], #1
 800b4c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b4c6:	429d      	cmp	r5, r3
 800b4c8:	4680      	mov	r8, r0
 800b4ca:	4689      	mov	r9, r1
 800b4cc:	f04f 0200 	mov.w	r2, #0
 800b4d0:	d124      	bne.n	800b51c <_dtoa_r+0x60c>
 800b4d2:	4b1b      	ldr	r3, [pc, #108]	; (800b540 <_dtoa_r+0x630>)
 800b4d4:	4650      	mov	r0, sl
 800b4d6:	4659      	mov	r1, fp
 800b4d8:	f7f4 fee8 	bl	80002ac <__adddf3>
 800b4dc:	4602      	mov	r2, r0
 800b4de:	460b      	mov	r3, r1
 800b4e0:	4640      	mov	r0, r8
 800b4e2:	4649      	mov	r1, r9
 800b4e4:	f7f5 fb28 	bl	8000b38 <__aeabi_dcmpgt>
 800b4e8:	2800      	cmp	r0, #0
 800b4ea:	d173      	bne.n	800b5d4 <_dtoa_r+0x6c4>
 800b4ec:	4652      	mov	r2, sl
 800b4ee:	465b      	mov	r3, fp
 800b4f0:	4913      	ldr	r1, [pc, #76]	; (800b540 <_dtoa_r+0x630>)
 800b4f2:	2000      	movs	r0, #0
 800b4f4:	f7f4 fed8 	bl	80002a8 <__aeabi_dsub>
 800b4f8:	4602      	mov	r2, r0
 800b4fa:	460b      	mov	r3, r1
 800b4fc:	4640      	mov	r0, r8
 800b4fe:	4649      	mov	r1, r9
 800b500:	f7f5 fafc 	bl	8000afc <__aeabi_dcmplt>
 800b504:	2800      	cmp	r0, #0
 800b506:	f43f af35 	beq.w	800b374 <_dtoa_r+0x464>
 800b50a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b50c:	1e6b      	subs	r3, r5, #1
 800b50e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b510:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b514:	2b30      	cmp	r3, #48	; 0x30
 800b516:	d0f8      	beq.n	800b50a <_dtoa_r+0x5fa>
 800b518:	9700      	str	r7, [sp, #0]
 800b51a:	e049      	b.n	800b5b0 <_dtoa_r+0x6a0>
 800b51c:	4b05      	ldr	r3, [pc, #20]	; (800b534 <_dtoa_r+0x624>)
 800b51e:	f7f5 f87b 	bl	8000618 <__aeabi_dmul>
 800b522:	4680      	mov	r8, r0
 800b524:	4689      	mov	r9, r1
 800b526:	e7bd      	b.n	800b4a4 <_dtoa_r+0x594>
 800b528:	0800d440 	.word	0x0800d440
 800b52c:	0800d418 	.word	0x0800d418
 800b530:	3ff00000 	.word	0x3ff00000
 800b534:	40240000 	.word	0x40240000
 800b538:	401c0000 	.word	0x401c0000
 800b53c:	40140000 	.word	0x40140000
 800b540:	3fe00000 	.word	0x3fe00000
 800b544:	9d01      	ldr	r5, [sp, #4]
 800b546:	4656      	mov	r6, sl
 800b548:	465f      	mov	r7, fp
 800b54a:	4642      	mov	r2, r8
 800b54c:	464b      	mov	r3, r9
 800b54e:	4630      	mov	r0, r6
 800b550:	4639      	mov	r1, r7
 800b552:	f7f5 f98b 	bl	800086c <__aeabi_ddiv>
 800b556:	f7f5 fb0f 	bl	8000b78 <__aeabi_d2iz>
 800b55a:	4682      	mov	sl, r0
 800b55c:	f7f4 fff2 	bl	8000544 <__aeabi_i2d>
 800b560:	4642      	mov	r2, r8
 800b562:	464b      	mov	r3, r9
 800b564:	f7f5 f858 	bl	8000618 <__aeabi_dmul>
 800b568:	4602      	mov	r2, r0
 800b56a:	460b      	mov	r3, r1
 800b56c:	4630      	mov	r0, r6
 800b56e:	4639      	mov	r1, r7
 800b570:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b574:	f7f4 fe98 	bl	80002a8 <__aeabi_dsub>
 800b578:	f805 6b01 	strb.w	r6, [r5], #1
 800b57c:	9e01      	ldr	r6, [sp, #4]
 800b57e:	9f03      	ldr	r7, [sp, #12]
 800b580:	1bae      	subs	r6, r5, r6
 800b582:	42b7      	cmp	r7, r6
 800b584:	4602      	mov	r2, r0
 800b586:	460b      	mov	r3, r1
 800b588:	d135      	bne.n	800b5f6 <_dtoa_r+0x6e6>
 800b58a:	f7f4 fe8f 	bl	80002ac <__adddf3>
 800b58e:	4642      	mov	r2, r8
 800b590:	464b      	mov	r3, r9
 800b592:	4606      	mov	r6, r0
 800b594:	460f      	mov	r7, r1
 800b596:	f7f5 facf 	bl	8000b38 <__aeabi_dcmpgt>
 800b59a:	b9d0      	cbnz	r0, 800b5d2 <_dtoa_r+0x6c2>
 800b59c:	4642      	mov	r2, r8
 800b59e:	464b      	mov	r3, r9
 800b5a0:	4630      	mov	r0, r6
 800b5a2:	4639      	mov	r1, r7
 800b5a4:	f7f5 faa0 	bl	8000ae8 <__aeabi_dcmpeq>
 800b5a8:	b110      	cbz	r0, 800b5b0 <_dtoa_r+0x6a0>
 800b5aa:	f01a 0f01 	tst.w	sl, #1
 800b5ae:	d110      	bne.n	800b5d2 <_dtoa_r+0x6c2>
 800b5b0:	4620      	mov	r0, r4
 800b5b2:	ee18 1a10 	vmov	r1, s16
 800b5b6:	f000 fafb 	bl	800bbb0 <_Bfree>
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	9800      	ldr	r0, [sp, #0]
 800b5be:	702b      	strb	r3, [r5, #0]
 800b5c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b5c2:	3001      	adds	r0, #1
 800b5c4:	6018      	str	r0, [r3, #0]
 800b5c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	f43f acf1 	beq.w	800afb0 <_dtoa_r+0xa0>
 800b5ce:	601d      	str	r5, [r3, #0]
 800b5d0:	e4ee      	b.n	800afb0 <_dtoa_r+0xa0>
 800b5d2:	9f00      	ldr	r7, [sp, #0]
 800b5d4:	462b      	mov	r3, r5
 800b5d6:	461d      	mov	r5, r3
 800b5d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b5dc:	2a39      	cmp	r2, #57	; 0x39
 800b5de:	d106      	bne.n	800b5ee <_dtoa_r+0x6de>
 800b5e0:	9a01      	ldr	r2, [sp, #4]
 800b5e2:	429a      	cmp	r2, r3
 800b5e4:	d1f7      	bne.n	800b5d6 <_dtoa_r+0x6c6>
 800b5e6:	9901      	ldr	r1, [sp, #4]
 800b5e8:	2230      	movs	r2, #48	; 0x30
 800b5ea:	3701      	adds	r7, #1
 800b5ec:	700a      	strb	r2, [r1, #0]
 800b5ee:	781a      	ldrb	r2, [r3, #0]
 800b5f0:	3201      	adds	r2, #1
 800b5f2:	701a      	strb	r2, [r3, #0]
 800b5f4:	e790      	b.n	800b518 <_dtoa_r+0x608>
 800b5f6:	4ba6      	ldr	r3, [pc, #664]	; (800b890 <_dtoa_r+0x980>)
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	f7f5 f80d 	bl	8000618 <__aeabi_dmul>
 800b5fe:	2200      	movs	r2, #0
 800b600:	2300      	movs	r3, #0
 800b602:	4606      	mov	r6, r0
 800b604:	460f      	mov	r7, r1
 800b606:	f7f5 fa6f 	bl	8000ae8 <__aeabi_dcmpeq>
 800b60a:	2800      	cmp	r0, #0
 800b60c:	d09d      	beq.n	800b54a <_dtoa_r+0x63a>
 800b60e:	e7cf      	b.n	800b5b0 <_dtoa_r+0x6a0>
 800b610:	9a08      	ldr	r2, [sp, #32]
 800b612:	2a00      	cmp	r2, #0
 800b614:	f000 80d7 	beq.w	800b7c6 <_dtoa_r+0x8b6>
 800b618:	9a06      	ldr	r2, [sp, #24]
 800b61a:	2a01      	cmp	r2, #1
 800b61c:	f300 80ba 	bgt.w	800b794 <_dtoa_r+0x884>
 800b620:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b622:	2a00      	cmp	r2, #0
 800b624:	f000 80b2 	beq.w	800b78c <_dtoa_r+0x87c>
 800b628:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b62c:	9e07      	ldr	r6, [sp, #28]
 800b62e:	9d04      	ldr	r5, [sp, #16]
 800b630:	9a04      	ldr	r2, [sp, #16]
 800b632:	441a      	add	r2, r3
 800b634:	9204      	str	r2, [sp, #16]
 800b636:	9a05      	ldr	r2, [sp, #20]
 800b638:	2101      	movs	r1, #1
 800b63a:	441a      	add	r2, r3
 800b63c:	4620      	mov	r0, r4
 800b63e:	9205      	str	r2, [sp, #20]
 800b640:	f000 fb6e 	bl	800bd20 <__i2b>
 800b644:	4607      	mov	r7, r0
 800b646:	2d00      	cmp	r5, #0
 800b648:	dd0c      	ble.n	800b664 <_dtoa_r+0x754>
 800b64a:	9b05      	ldr	r3, [sp, #20]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	dd09      	ble.n	800b664 <_dtoa_r+0x754>
 800b650:	42ab      	cmp	r3, r5
 800b652:	9a04      	ldr	r2, [sp, #16]
 800b654:	bfa8      	it	ge
 800b656:	462b      	movge	r3, r5
 800b658:	1ad2      	subs	r2, r2, r3
 800b65a:	9204      	str	r2, [sp, #16]
 800b65c:	9a05      	ldr	r2, [sp, #20]
 800b65e:	1aed      	subs	r5, r5, r3
 800b660:	1ad3      	subs	r3, r2, r3
 800b662:	9305      	str	r3, [sp, #20]
 800b664:	9b07      	ldr	r3, [sp, #28]
 800b666:	b31b      	cbz	r3, 800b6b0 <_dtoa_r+0x7a0>
 800b668:	9b08      	ldr	r3, [sp, #32]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	f000 80af 	beq.w	800b7ce <_dtoa_r+0x8be>
 800b670:	2e00      	cmp	r6, #0
 800b672:	dd13      	ble.n	800b69c <_dtoa_r+0x78c>
 800b674:	4639      	mov	r1, r7
 800b676:	4632      	mov	r2, r6
 800b678:	4620      	mov	r0, r4
 800b67a:	f000 fc11 	bl	800bea0 <__pow5mult>
 800b67e:	ee18 2a10 	vmov	r2, s16
 800b682:	4601      	mov	r1, r0
 800b684:	4607      	mov	r7, r0
 800b686:	4620      	mov	r0, r4
 800b688:	f000 fb60 	bl	800bd4c <__multiply>
 800b68c:	ee18 1a10 	vmov	r1, s16
 800b690:	4680      	mov	r8, r0
 800b692:	4620      	mov	r0, r4
 800b694:	f000 fa8c 	bl	800bbb0 <_Bfree>
 800b698:	ee08 8a10 	vmov	s16, r8
 800b69c:	9b07      	ldr	r3, [sp, #28]
 800b69e:	1b9a      	subs	r2, r3, r6
 800b6a0:	d006      	beq.n	800b6b0 <_dtoa_r+0x7a0>
 800b6a2:	ee18 1a10 	vmov	r1, s16
 800b6a6:	4620      	mov	r0, r4
 800b6a8:	f000 fbfa 	bl	800bea0 <__pow5mult>
 800b6ac:	ee08 0a10 	vmov	s16, r0
 800b6b0:	2101      	movs	r1, #1
 800b6b2:	4620      	mov	r0, r4
 800b6b4:	f000 fb34 	bl	800bd20 <__i2b>
 800b6b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	4606      	mov	r6, r0
 800b6be:	f340 8088 	ble.w	800b7d2 <_dtoa_r+0x8c2>
 800b6c2:	461a      	mov	r2, r3
 800b6c4:	4601      	mov	r1, r0
 800b6c6:	4620      	mov	r0, r4
 800b6c8:	f000 fbea 	bl	800bea0 <__pow5mult>
 800b6cc:	9b06      	ldr	r3, [sp, #24]
 800b6ce:	2b01      	cmp	r3, #1
 800b6d0:	4606      	mov	r6, r0
 800b6d2:	f340 8081 	ble.w	800b7d8 <_dtoa_r+0x8c8>
 800b6d6:	f04f 0800 	mov.w	r8, #0
 800b6da:	6933      	ldr	r3, [r6, #16]
 800b6dc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b6e0:	6918      	ldr	r0, [r3, #16]
 800b6e2:	f000 facd 	bl	800bc80 <__hi0bits>
 800b6e6:	f1c0 0020 	rsb	r0, r0, #32
 800b6ea:	9b05      	ldr	r3, [sp, #20]
 800b6ec:	4418      	add	r0, r3
 800b6ee:	f010 001f 	ands.w	r0, r0, #31
 800b6f2:	f000 8092 	beq.w	800b81a <_dtoa_r+0x90a>
 800b6f6:	f1c0 0320 	rsb	r3, r0, #32
 800b6fa:	2b04      	cmp	r3, #4
 800b6fc:	f340 808a 	ble.w	800b814 <_dtoa_r+0x904>
 800b700:	f1c0 001c 	rsb	r0, r0, #28
 800b704:	9b04      	ldr	r3, [sp, #16]
 800b706:	4403      	add	r3, r0
 800b708:	9304      	str	r3, [sp, #16]
 800b70a:	9b05      	ldr	r3, [sp, #20]
 800b70c:	4403      	add	r3, r0
 800b70e:	4405      	add	r5, r0
 800b710:	9305      	str	r3, [sp, #20]
 800b712:	9b04      	ldr	r3, [sp, #16]
 800b714:	2b00      	cmp	r3, #0
 800b716:	dd07      	ble.n	800b728 <_dtoa_r+0x818>
 800b718:	ee18 1a10 	vmov	r1, s16
 800b71c:	461a      	mov	r2, r3
 800b71e:	4620      	mov	r0, r4
 800b720:	f000 fc18 	bl	800bf54 <__lshift>
 800b724:	ee08 0a10 	vmov	s16, r0
 800b728:	9b05      	ldr	r3, [sp, #20]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	dd05      	ble.n	800b73a <_dtoa_r+0x82a>
 800b72e:	4631      	mov	r1, r6
 800b730:	461a      	mov	r2, r3
 800b732:	4620      	mov	r0, r4
 800b734:	f000 fc0e 	bl	800bf54 <__lshift>
 800b738:	4606      	mov	r6, r0
 800b73a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d06e      	beq.n	800b81e <_dtoa_r+0x90e>
 800b740:	ee18 0a10 	vmov	r0, s16
 800b744:	4631      	mov	r1, r6
 800b746:	f000 fc75 	bl	800c034 <__mcmp>
 800b74a:	2800      	cmp	r0, #0
 800b74c:	da67      	bge.n	800b81e <_dtoa_r+0x90e>
 800b74e:	9b00      	ldr	r3, [sp, #0]
 800b750:	3b01      	subs	r3, #1
 800b752:	ee18 1a10 	vmov	r1, s16
 800b756:	9300      	str	r3, [sp, #0]
 800b758:	220a      	movs	r2, #10
 800b75a:	2300      	movs	r3, #0
 800b75c:	4620      	mov	r0, r4
 800b75e:	f000 fa49 	bl	800bbf4 <__multadd>
 800b762:	9b08      	ldr	r3, [sp, #32]
 800b764:	ee08 0a10 	vmov	s16, r0
 800b768:	2b00      	cmp	r3, #0
 800b76a:	f000 81b1 	beq.w	800bad0 <_dtoa_r+0xbc0>
 800b76e:	2300      	movs	r3, #0
 800b770:	4639      	mov	r1, r7
 800b772:	220a      	movs	r2, #10
 800b774:	4620      	mov	r0, r4
 800b776:	f000 fa3d 	bl	800bbf4 <__multadd>
 800b77a:	9b02      	ldr	r3, [sp, #8]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	4607      	mov	r7, r0
 800b780:	f300 808e 	bgt.w	800b8a0 <_dtoa_r+0x990>
 800b784:	9b06      	ldr	r3, [sp, #24]
 800b786:	2b02      	cmp	r3, #2
 800b788:	dc51      	bgt.n	800b82e <_dtoa_r+0x91e>
 800b78a:	e089      	b.n	800b8a0 <_dtoa_r+0x990>
 800b78c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b78e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b792:	e74b      	b.n	800b62c <_dtoa_r+0x71c>
 800b794:	9b03      	ldr	r3, [sp, #12]
 800b796:	1e5e      	subs	r6, r3, #1
 800b798:	9b07      	ldr	r3, [sp, #28]
 800b79a:	42b3      	cmp	r3, r6
 800b79c:	bfbf      	itttt	lt
 800b79e:	9b07      	ldrlt	r3, [sp, #28]
 800b7a0:	9607      	strlt	r6, [sp, #28]
 800b7a2:	1af2      	sublt	r2, r6, r3
 800b7a4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b7a6:	bfb6      	itet	lt
 800b7a8:	189b      	addlt	r3, r3, r2
 800b7aa:	1b9e      	subge	r6, r3, r6
 800b7ac:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b7ae:	9b03      	ldr	r3, [sp, #12]
 800b7b0:	bfb8      	it	lt
 800b7b2:	2600      	movlt	r6, #0
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	bfb7      	itett	lt
 800b7b8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b7bc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b7c0:	1a9d      	sublt	r5, r3, r2
 800b7c2:	2300      	movlt	r3, #0
 800b7c4:	e734      	b.n	800b630 <_dtoa_r+0x720>
 800b7c6:	9e07      	ldr	r6, [sp, #28]
 800b7c8:	9d04      	ldr	r5, [sp, #16]
 800b7ca:	9f08      	ldr	r7, [sp, #32]
 800b7cc:	e73b      	b.n	800b646 <_dtoa_r+0x736>
 800b7ce:	9a07      	ldr	r2, [sp, #28]
 800b7d0:	e767      	b.n	800b6a2 <_dtoa_r+0x792>
 800b7d2:	9b06      	ldr	r3, [sp, #24]
 800b7d4:	2b01      	cmp	r3, #1
 800b7d6:	dc18      	bgt.n	800b80a <_dtoa_r+0x8fa>
 800b7d8:	f1ba 0f00 	cmp.w	sl, #0
 800b7dc:	d115      	bne.n	800b80a <_dtoa_r+0x8fa>
 800b7de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b7e2:	b993      	cbnz	r3, 800b80a <_dtoa_r+0x8fa>
 800b7e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b7e8:	0d1b      	lsrs	r3, r3, #20
 800b7ea:	051b      	lsls	r3, r3, #20
 800b7ec:	b183      	cbz	r3, 800b810 <_dtoa_r+0x900>
 800b7ee:	9b04      	ldr	r3, [sp, #16]
 800b7f0:	3301      	adds	r3, #1
 800b7f2:	9304      	str	r3, [sp, #16]
 800b7f4:	9b05      	ldr	r3, [sp, #20]
 800b7f6:	3301      	adds	r3, #1
 800b7f8:	9305      	str	r3, [sp, #20]
 800b7fa:	f04f 0801 	mov.w	r8, #1
 800b7fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b800:	2b00      	cmp	r3, #0
 800b802:	f47f af6a 	bne.w	800b6da <_dtoa_r+0x7ca>
 800b806:	2001      	movs	r0, #1
 800b808:	e76f      	b.n	800b6ea <_dtoa_r+0x7da>
 800b80a:	f04f 0800 	mov.w	r8, #0
 800b80e:	e7f6      	b.n	800b7fe <_dtoa_r+0x8ee>
 800b810:	4698      	mov	r8, r3
 800b812:	e7f4      	b.n	800b7fe <_dtoa_r+0x8ee>
 800b814:	f43f af7d 	beq.w	800b712 <_dtoa_r+0x802>
 800b818:	4618      	mov	r0, r3
 800b81a:	301c      	adds	r0, #28
 800b81c:	e772      	b.n	800b704 <_dtoa_r+0x7f4>
 800b81e:	9b03      	ldr	r3, [sp, #12]
 800b820:	2b00      	cmp	r3, #0
 800b822:	dc37      	bgt.n	800b894 <_dtoa_r+0x984>
 800b824:	9b06      	ldr	r3, [sp, #24]
 800b826:	2b02      	cmp	r3, #2
 800b828:	dd34      	ble.n	800b894 <_dtoa_r+0x984>
 800b82a:	9b03      	ldr	r3, [sp, #12]
 800b82c:	9302      	str	r3, [sp, #8]
 800b82e:	9b02      	ldr	r3, [sp, #8]
 800b830:	b96b      	cbnz	r3, 800b84e <_dtoa_r+0x93e>
 800b832:	4631      	mov	r1, r6
 800b834:	2205      	movs	r2, #5
 800b836:	4620      	mov	r0, r4
 800b838:	f000 f9dc 	bl	800bbf4 <__multadd>
 800b83c:	4601      	mov	r1, r0
 800b83e:	4606      	mov	r6, r0
 800b840:	ee18 0a10 	vmov	r0, s16
 800b844:	f000 fbf6 	bl	800c034 <__mcmp>
 800b848:	2800      	cmp	r0, #0
 800b84a:	f73f adbb 	bgt.w	800b3c4 <_dtoa_r+0x4b4>
 800b84e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b850:	9d01      	ldr	r5, [sp, #4]
 800b852:	43db      	mvns	r3, r3
 800b854:	9300      	str	r3, [sp, #0]
 800b856:	f04f 0800 	mov.w	r8, #0
 800b85a:	4631      	mov	r1, r6
 800b85c:	4620      	mov	r0, r4
 800b85e:	f000 f9a7 	bl	800bbb0 <_Bfree>
 800b862:	2f00      	cmp	r7, #0
 800b864:	f43f aea4 	beq.w	800b5b0 <_dtoa_r+0x6a0>
 800b868:	f1b8 0f00 	cmp.w	r8, #0
 800b86c:	d005      	beq.n	800b87a <_dtoa_r+0x96a>
 800b86e:	45b8      	cmp	r8, r7
 800b870:	d003      	beq.n	800b87a <_dtoa_r+0x96a>
 800b872:	4641      	mov	r1, r8
 800b874:	4620      	mov	r0, r4
 800b876:	f000 f99b 	bl	800bbb0 <_Bfree>
 800b87a:	4639      	mov	r1, r7
 800b87c:	4620      	mov	r0, r4
 800b87e:	f000 f997 	bl	800bbb0 <_Bfree>
 800b882:	e695      	b.n	800b5b0 <_dtoa_r+0x6a0>
 800b884:	2600      	movs	r6, #0
 800b886:	4637      	mov	r7, r6
 800b888:	e7e1      	b.n	800b84e <_dtoa_r+0x93e>
 800b88a:	9700      	str	r7, [sp, #0]
 800b88c:	4637      	mov	r7, r6
 800b88e:	e599      	b.n	800b3c4 <_dtoa_r+0x4b4>
 800b890:	40240000 	.word	0x40240000
 800b894:	9b08      	ldr	r3, [sp, #32]
 800b896:	2b00      	cmp	r3, #0
 800b898:	f000 80ca 	beq.w	800ba30 <_dtoa_r+0xb20>
 800b89c:	9b03      	ldr	r3, [sp, #12]
 800b89e:	9302      	str	r3, [sp, #8]
 800b8a0:	2d00      	cmp	r5, #0
 800b8a2:	dd05      	ble.n	800b8b0 <_dtoa_r+0x9a0>
 800b8a4:	4639      	mov	r1, r7
 800b8a6:	462a      	mov	r2, r5
 800b8a8:	4620      	mov	r0, r4
 800b8aa:	f000 fb53 	bl	800bf54 <__lshift>
 800b8ae:	4607      	mov	r7, r0
 800b8b0:	f1b8 0f00 	cmp.w	r8, #0
 800b8b4:	d05b      	beq.n	800b96e <_dtoa_r+0xa5e>
 800b8b6:	6879      	ldr	r1, [r7, #4]
 800b8b8:	4620      	mov	r0, r4
 800b8ba:	f000 f939 	bl	800bb30 <_Balloc>
 800b8be:	4605      	mov	r5, r0
 800b8c0:	b928      	cbnz	r0, 800b8ce <_dtoa_r+0x9be>
 800b8c2:	4b87      	ldr	r3, [pc, #540]	; (800bae0 <_dtoa_r+0xbd0>)
 800b8c4:	4602      	mov	r2, r0
 800b8c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b8ca:	f7ff bb3b 	b.w	800af44 <_dtoa_r+0x34>
 800b8ce:	693a      	ldr	r2, [r7, #16]
 800b8d0:	3202      	adds	r2, #2
 800b8d2:	0092      	lsls	r2, r2, #2
 800b8d4:	f107 010c 	add.w	r1, r7, #12
 800b8d8:	300c      	adds	r0, #12
 800b8da:	f7fe fc9f 	bl	800a21c <memcpy>
 800b8de:	2201      	movs	r2, #1
 800b8e0:	4629      	mov	r1, r5
 800b8e2:	4620      	mov	r0, r4
 800b8e4:	f000 fb36 	bl	800bf54 <__lshift>
 800b8e8:	9b01      	ldr	r3, [sp, #4]
 800b8ea:	f103 0901 	add.w	r9, r3, #1
 800b8ee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b8f2:	4413      	add	r3, r2
 800b8f4:	9305      	str	r3, [sp, #20]
 800b8f6:	f00a 0301 	and.w	r3, sl, #1
 800b8fa:	46b8      	mov	r8, r7
 800b8fc:	9304      	str	r3, [sp, #16]
 800b8fe:	4607      	mov	r7, r0
 800b900:	4631      	mov	r1, r6
 800b902:	ee18 0a10 	vmov	r0, s16
 800b906:	f7ff fa75 	bl	800adf4 <quorem>
 800b90a:	4641      	mov	r1, r8
 800b90c:	9002      	str	r0, [sp, #8]
 800b90e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b912:	ee18 0a10 	vmov	r0, s16
 800b916:	f000 fb8d 	bl	800c034 <__mcmp>
 800b91a:	463a      	mov	r2, r7
 800b91c:	9003      	str	r0, [sp, #12]
 800b91e:	4631      	mov	r1, r6
 800b920:	4620      	mov	r0, r4
 800b922:	f000 fba3 	bl	800c06c <__mdiff>
 800b926:	68c2      	ldr	r2, [r0, #12]
 800b928:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800b92c:	4605      	mov	r5, r0
 800b92e:	bb02      	cbnz	r2, 800b972 <_dtoa_r+0xa62>
 800b930:	4601      	mov	r1, r0
 800b932:	ee18 0a10 	vmov	r0, s16
 800b936:	f000 fb7d 	bl	800c034 <__mcmp>
 800b93a:	4602      	mov	r2, r0
 800b93c:	4629      	mov	r1, r5
 800b93e:	4620      	mov	r0, r4
 800b940:	9207      	str	r2, [sp, #28]
 800b942:	f000 f935 	bl	800bbb0 <_Bfree>
 800b946:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b94a:	ea43 0102 	orr.w	r1, r3, r2
 800b94e:	9b04      	ldr	r3, [sp, #16]
 800b950:	430b      	orrs	r3, r1
 800b952:	464d      	mov	r5, r9
 800b954:	d10f      	bne.n	800b976 <_dtoa_r+0xa66>
 800b956:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b95a:	d02a      	beq.n	800b9b2 <_dtoa_r+0xaa2>
 800b95c:	9b03      	ldr	r3, [sp, #12]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	dd02      	ble.n	800b968 <_dtoa_r+0xa58>
 800b962:	9b02      	ldr	r3, [sp, #8]
 800b964:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b968:	f88b a000 	strb.w	sl, [fp]
 800b96c:	e775      	b.n	800b85a <_dtoa_r+0x94a>
 800b96e:	4638      	mov	r0, r7
 800b970:	e7ba      	b.n	800b8e8 <_dtoa_r+0x9d8>
 800b972:	2201      	movs	r2, #1
 800b974:	e7e2      	b.n	800b93c <_dtoa_r+0xa2c>
 800b976:	9b03      	ldr	r3, [sp, #12]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	db04      	blt.n	800b986 <_dtoa_r+0xa76>
 800b97c:	9906      	ldr	r1, [sp, #24]
 800b97e:	430b      	orrs	r3, r1
 800b980:	9904      	ldr	r1, [sp, #16]
 800b982:	430b      	orrs	r3, r1
 800b984:	d122      	bne.n	800b9cc <_dtoa_r+0xabc>
 800b986:	2a00      	cmp	r2, #0
 800b988:	ddee      	ble.n	800b968 <_dtoa_r+0xa58>
 800b98a:	ee18 1a10 	vmov	r1, s16
 800b98e:	2201      	movs	r2, #1
 800b990:	4620      	mov	r0, r4
 800b992:	f000 fadf 	bl	800bf54 <__lshift>
 800b996:	4631      	mov	r1, r6
 800b998:	ee08 0a10 	vmov	s16, r0
 800b99c:	f000 fb4a 	bl	800c034 <__mcmp>
 800b9a0:	2800      	cmp	r0, #0
 800b9a2:	dc03      	bgt.n	800b9ac <_dtoa_r+0xa9c>
 800b9a4:	d1e0      	bne.n	800b968 <_dtoa_r+0xa58>
 800b9a6:	f01a 0f01 	tst.w	sl, #1
 800b9aa:	d0dd      	beq.n	800b968 <_dtoa_r+0xa58>
 800b9ac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b9b0:	d1d7      	bne.n	800b962 <_dtoa_r+0xa52>
 800b9b2:	2339      	movs	r3, #57	; 0x39
 800b9b4:	f88b 3000 	strb.w	r3, [fp]
 800b9b8:	462b      	mov	r3, r5
 800b9ba:	461d      	mov	r5, r3
 800b9bc:	3b01      	subs	r3, #1
 800b9be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b9c2:	2a39      	cmp	r2, #57	; 0x39
 800b9c4:	d071      	beq.n	800baaa <_dtoa_r+0xb9a>
 800b9c6:	3201      	adds	r2, #1
 800b9c8:	701a      	strb	r2, [r3, #0]
 800b9ca:	e746      	b.n	800b85a <_dtoa_r+0x94a>
 800b9cc:	2a00      	cmp	r2, #0
 800b9ce:	dd07      	ble.n	800b9e0 <_dtoa_r+0xad0>
 800b9d0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b9d4:	d0ed      	beq.n	800b9b2 <_dtoa_r+0xaa2>
 800b9d6:	f10a 0301 	add.w	r3, sl, #1
 800b9da:	f88b 3000 	strb.w	r3, [fp]
 800b9de:	e73c      	b.n	800b85a <_dtoa_r+0x94a>
 800b9e0:	9b05      	ldr	r3, [sp, #20]
 800b9e2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b9e6:	4599      	cmp	r9, r3
 800b9e8:	d047      	beq.n	800ba7a <_dtoa_r+0xb6a>
 800b9ea:	ee18 1a10 	vmov	r1, s16
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	220a      	movs	r2, #10
 800b9f2:	4620      	mov	r0, r4
 800b9f4:	f000 f8fe 	bl	800bbf4 <__multadd>
 800b9f8:	45b8      	cmp	r8, r7
 800b9fa:	ee08 0a10 	vmov	s16, r0
 800b9fe:	f04f 0300 	mov.w	r3, #0
 800ba02:	f04f 020a 	mov.w	r2, #10
 800ba06:	4641      	mov	r1, r8
 800ba08:	4620      	mov	r0, r4
 800ba0a:	d106      	bne.n	800ba1a <_dtoa_r+0xb0a>
 800ba0c:	f000 f8f2 	bl	800bbf4 <__multadd>
 800ba10:	4680      	mov	r8, r0
 800ba12:	4607      	mov	r7, r0
 800ba14:	f109 0901 	add.w	r9, r9, #1
 800ba18:	e772      	b.n	800b900 <_dtoa_r+0x9f0>
 800ba1a:	f000 f8eb 	bl	800bbf4 <__multadd>
 800ba1e:	4639      	mov	r1, r7
 800ba20:	4680      	mov	r8, r0
 800ba22:	2300      	movs	r3, #0
 800ba24:	220a      	movs	r2, #10
 800ba26:	4620      	mov	r0, r4
 800ba28:	f000 f8e4 	bl	800bbf4 <__multadd>
 800ba2c:	4607      	mov	r7, r0
 800ba2e:	e7f1      	b.n	800ba14 <_dtoa_r+0xb04>
 800ba30:	9b03      	ldr	r3, [sp, #12]
 800ba32:	9302      	str	r3, [sp, #8]
 800ba34:	9d01      	ldr	r5, [sp, #4]
 800ba36:	ee18 0a10 	vmov	r0, s16
 800ba3a:	4631      	mov	r1, r6
 800ba3c:	f7ff f9da 	bl	800adf4 <quorem>
 800ba40:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ba44:	9b01      	ldr	r3, [sp, #4]
 800ba46:	f805 ab01 	strb.w	sl, [r5], #1
 800ba4a:	1aea      	subs	r2, r5, r3
 800ba4c:	9b02      	ldr	r3, [sp, #8]
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	dd09      	ble.n	800ba66 <_dtoa_r+0xb56>
 800ba52:	ee18 1a10 	vmov	r1, s16
 800ba56:	2300      	movs	r3, #0
 800ba58:	220a      	movs	r2, #10
 800ba5a:	4620      	mov	r0, r4
 800ba5c:	f000 f8ca 	bl	800bbf4 <__multadd>
 800ba60:	ee08 0a10 	vmov	s16, r0
 800ba64:	e7e7      	b.n	800ba36 <_dtoa_r+0xb26>
 800ba66:	9b02      	ldr	r3, [sp, #8]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	bfc8      	it	gt
 800ba6c:	461d      	movgt	r5, r3
 800ba6e:	9b01      	ldr	r3, [sp, #4]
 800ba70:	bfd8      	it	le
 800ba72:	2501      	movle	r5, #1
 800ba74:	441d      	add	r5, r3
 800ba76:	f04f 0800 	mov.w	r8, #0
 800ba7a:	ee18 1a10 	vmov	r1, s16
 800ba7e:	2201      	movs	r2, #1
 800ba80:	4620      	mov	r0, r4
 800ba82:	f000 fa67 	bl	800bf54 <__lshift>
 800ba86:	4631      	mov	r1, r6
 800ba88:	ee08 0a10 	vmov	s16, r0
 800ba8c:	f000 fad2 	bl	800c034 <__mcmp>
 800ba90:	2800      	cmp	r0, #0
 800ba92:	dc91      	bgt.n	800b9b8 <_dtoa_r+0xaa8>
 800ba94:	d102      	bne.n	800ba9c <_dtoa_r+0xb8c>
 800ba96:	f01a 0f01 	tst.w	sl, #1
 800ba9a:	d18d      	bne.n	800b9b8 <_dtoa_r+0xaa8>
 800ba9c:	462b      	mov	r3, r5
 800ba9e:	461d      	mov	r5, r3
 800baa0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800baa4:	2a30      	cmp	r2, #48	; 0x30
 800baa6:	d0fa      	beq.n	800ba9e <_dtoa_r+0xb8e>
 800baa8:	e6d7      	b.n	800b85a <_dtoa_r+0x94a>
 800baaa:	9a01      	ldr	r2, [sp, #4]
 800baac:	429a      	cmp	r2, r3
 800baae:	d184      	bne.n	800b9ba <_dtoa_r+0xaaa>
 800bab0:	9b00      	ldr	r3, [sp, #0]
 800bab2:	3301      	adds	r3, #1
 800bab4:	9300      	str	r3, [sp, #0]
 800bab6:	2331      	movs	r3, #49	; 0x31
 800bab8:	7013      	strb	r3, [r2, #0]
 800baba:	e6ce      	b.n	800b85a <_dtoa_r+0x94a>
 800babc:	4b09      	ldr	r3, [pc, #36]	; (800bae4 <_dtoa_r+0xbd4>)
 800babe:	f7ff ba95 	b.w	800afec <_dtoa_r+0xdc>
 800bac2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	f47f aa6e 	bne.w	800afa6 <_dtoa_r+0x96>
 800baca:	4b07      	ldr	r3, [pc, #28]	; (800bae8 <_dtoa_r+0xbd8>)
 800bacc:	f7ff ba8e 	b.w	800afec <_dtoa_r+0xdc>
 800bad0:	9b02      	ldr	r3, [sp, #8]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	dcae      	bgt.n	800ba34 <_dtoa_r+0xb24>
 800bad6:	9b06      	ldr	r3, [sp, #24]
 800bad8:	2b02      	cmp	r3, #2
 800bada:	f73f aea8 	bgt.w	800b82e <_dtoa_r+0x91e>
 800bade:	e7a9      	b.n	800ba34 <_dtoa_r+0xb24>
 800bae0:	0800d3aa 	.word	0x0800d3aa
 800bae4:	0800d270 	.word	0x0800d270
 800bae8:	0800d342 	.word	0x0800d342

0800baec <fiprintf>:
 800baec:	b40e      	push	{r1, r2, r3}
 800baee:	b503      	push	{r0, r1, lr}
 800baf0:	4601      	mov	r1, r0
 800baf2:	ab03      	add	r3, sp, #12
 800baf4:	4805      	ldr	r0, [pc, #20]	; (800bb0c <fiprintf+0x20>)
 800baf6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bafa:	6800      	ldr	r0, [r0, #0]
 800bafc:	9301      	str	r3, [sp, #4]
 800bafe:	f000 fd37 	bl	800c570 <_vfiprintf_r>
 800bb02:	b002      	add	sp, #8
 800bb04:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb08:	b003      	add	sp, #12
 800bb0a:	4770      	bx	lr
 800bb0c:	20000044 	.word	0x20000044

0800bb10 <_localeconv_r>:
 800bb10:	4800      	ldr	r0, [pc, #0]	; (800bb14 <_localeconv_r+0x4>)
 800bb12:	4770      	bx	lr
 800bb14:	20000198 	.word	0x20000198

0800bb18 <__malloc_lock>:
 800bb18:	4801      	ldr	r0, [pc, #4]	; (800bb20 <__malloc_lock+0x8>)
 800bb1a:	f001 b8d9 	b.w	800ccd0 <__retarget_lock_acquire_recursive>
 800bb1e:	bf00      	nop
 800bb20:	200005a4 	.word	0x200005a4

0800bb24 <__malloc_unlock>:
 800bb24:	4801      	ldr	r0, [pc, #4]	; (800bb2c <__malloc_unlock+0x8>)
 800bb26:	f001 b8d4 	b.w	800ccd2 <__retarget_lock_release_recursive>
 800bb2a:	bf00      	nop
 800bb2c:	200005a4 	.word	0x200005a4

0800bb30 <_Balloc>:
 800bb30:	b570      	push	{r4, r5, r6, lr}
 800bb32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bb34:	4604      	mov	r4, r0
 800bb36:	460d      	mov	r5, r1
 800bb38:	b976      	cbnz	r6, 800bb58 <_Balloc+0x28>
 800bb3a:	2010      	movs	r0, #16
 800bb3c:	f7fe fb56 	bl	800a1ec <malloc>
 800bb40:	4602      	mov	r2, r0
 800bb42:	6260      	str	r0, [r4, #36]	; 0x24
 800bb44:	b920      	cbnz	r0, 800bb50 <_Balloc+0x20>
 800bb46:	4b18      	ldr	r3, [pc, #96]	; (800bba8 <_Balloc+0x78>)
 800bb48:	4818      	ldr	r0, [pc, #96]	; (800bbac <_Balloc+0x7c>)
 800bb4a:	2166      	movs	r1, #102	; 0x66
 800bb4c:	f7ff f934 	bl	800adb8 <__assert_func>
 800bb50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb54:	6006      	str	r6, [r0, #0]
 800bb56:	60c6      	str	r6, [r0, #12]
 800bb58:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bb5a:	68f3      	ldr	r3, [r6, #12]
 800bb5c:	b183      	cbz	r3, 800bb80 <_Balloc+0x50>
 800bb5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb60:	68db      	ldr	r3, [r3, #12]
 800bb62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bb66:	b9b8      	cbnz	r0, 800bb98 <_Balloc+0x68>
 800bb68:	2101      	movs	r1, #1
 800bb6a:	fa01 f605 	lsl.w	r6, r1, r5
 800bb6e:	1d72      	adds	r2, r6, #5
 800bb70:	0092      	lsls	r2, r2, #2
 800bb72:	4620      	mov	r0, r4
 800bb74:	f000 fb60 	bl	800c238 <_calloc_r>
 800bb78:	b160      	cbz	r0, 800bb94 <_Balloc+0x64>
 800bb7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bb7e:	e00e      	b.n	800bb9e <_Balloc+0x6e>
 800bb80:	2221      	movs	r2, #33	; 0x21
 800bb82:	2104      	movs	r1, #4
 800bb84:	4620      	mov	r0, r4
 800bb86:	f000 fb57 	bl	800c238 <_calloc_r>
 800bb8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb8c:	60f0      	str	r0, [r6, #12]
 800bb8e:	68db      	ldr	r3, [r3, #12]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d1e4      	bne.n	800bb5e <_Balloc+0x2e>
 800bb94:	2000      	movs	r0, #0
 800bb96:	bd70      	pop	{r4, r5, r6, pc}
 800bb98:	6802      	ldr	r2, [r0, #0]
 800bb9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bb9e:	2300      	movs	r3, #0
 800bba0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bba4:	e7f7      	b.n	800bb96 <_Balloc+0x66>
 800bba6:	bf00      	nop
 800bba8:	0800d294 	.word	0x0800d294
 800bbac:	0800d3bb 	.word	0x0800d3bb

0800bbb0 <_Bfree>:
 800bbb0:	b570      	push	{r4, r5, r6, lr}
 800bbb2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bbb4:	4605      	mov	r5, r0
 800bbb6:	460c      	mov	r4, r1
 800bbb8:	b976      	cbnz	r6, 800bbd8 <_Bfree+0x28>
 800bbba:	2010      	movs	r0, #16
 800bbbc:	f7fe fb16 	bl	800a1ec <malloc>
 800bbc0:	4602      	mov	r2, r0
 800bbc2:	6268      	str	r0, [r5, #36]	; 0x24
 800bbc4:	b920      	cbnz	r0, 800bbd0 <_Bfree+0x20>
 800bbc6:	4b09      	ldr	r3, [pc, #36]	; (800bbec <_Bfree+0x3c>)
 800bbc8:	4809      	ldr	r0, [pc, #36]	; (800bbf0 <_Bfree+0x40>)
 800bbca:	218a      	movs	r1, #138	; 0x8a
 800bbcc:	f7ff f8f4 	bl	800adb8 <__assert_func>
 800bbd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bbd4:	6006      	str	r6, [r0, #0]
 800bbd6:	60c6      	str	r6, [r0, #12]
 800bbd8:	b13c      	cbz	r4, 800bbea <_Bfree+0x3a>
 800bbda:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bbdc:	6862      	ldr	r2, [r4, #4]
 800bbde:	68db      	ldr	r3, [r3, #12]
 800bbe0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bbe4:	6021      	str	r1, [r4, #0]
 800bbe6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bbea:	bd70      	pop	{r4, r5, r6, pc}
 800bbec:	0800d294 	.word	0x0800d294
 800bbf0:	0800d3bb 	.word	0x0800d3bb

0800bbf4 <__multadd>:
 800bbf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbf8:	690d      	ldr	r5, [r1, #16]
 800bbfa:	4607      	mov	r7, r0
 800bbfc:	460c      	mov	r4, r1
 800bbfe:	461e      	mov	r6, r3
 800bc00:	f101 0c14 	add.w	ip, r1, #20
 800bc04:	2000      	movs	r0, #0
 800bc06:	f8dc 3000 	ldr.w	r3, [ip]
 800bc0a:	b299      	uxth	r1, r3
 800bc0c:	fb02 6101 	mla	r1, r2, r1, r6
 800bc10:	0c1e      	lsrs	r6, r3, #16
 800bc12:	0c0b      	lsrs	r3, r1, #16
 800bc14:	fb02 3306 	mla	r3, r2, r6, r3
 800bc18:	b289      	uxth	r1, r1
 800bc1a:	3001      	adds	r0, #1
 800bc1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bc20:	4285      	cmp	r5, r0
 800bc22:	f84c 1b04 	str.w	r1, [ip], #4
 800bc26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bc2a:	dcec      	bgt.n	800bc06 <__multadd+0x12>
 800bc2c:	b30e      	cbz	r6, 800bc72 <__multadd+0x7e>
 800bc2e:	68a3      	ldr	r3, [r4, #8]
 800bc30:	42ab      	cmp	r3, r5
 800bc32:	dc19      	bgt.n	800bc68 <__multadd+0x74>
 800bc34:	6861      	ldr	r1, [r4, #4]
 800bc36:	4638      	mov	r0, r7
 800bc38:	3101      	adds	r1, #1
 800bc3a:	f7ff ff79 	bl	800bb30 <_Balloc>
 800bc3e:	4680      	mov	r8, r0
 800bc40:	b928      	cbnz	r0, 800bc4e <__multadd+0x5a>
 800bc42:	4602      	mov	r2, r0
 800bc44:	4b0c      	ldr	r3, [pc, #48]	; (800bc78 <__multadd+0x84>)
 800bc46:	480d      	ldr	r0, [pc, #52]	; (800bc7c <__multadd+0x88>)
 800bc48:	21b5      	movs	r1, #181	; 0xb5
 800bc4a:	f7ff f8b5 	bl	800adb8 <__assert_func>
 800bc4e:	6922      	ldr	r2, [r4, #16]
 800bc50:	3202      	adds	r2, #2
 800bc52:	f104 010c 	add.w	r1, r4, #12
 800bc56:	0092      	lsls	r2, r2, #2
 800bc58:	300c      	adds	r0, #12
 800bc5a:	f7fe fadf 	bl	800a21c <memcpy>
 800bc5e:	4621      	mov	r1, r4
 800bc60:	4638      	mov	r0, r7
 800bc62:	f7ff ffa5 	bl	800bbb0 <_Bfree>
 800bc66:	4644      	mov	r4, r8
 800bc68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bc6c:	3501      	adds	r5, #1
 800bc6e:	615e      	str	r6, [r3, #20]
 800bc70:	6125      	str	r5, [r4, #16]
 800bc72:	4620      	mov	r0, r4
 800bc74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc78:	0800d3aa 	.word	0x0800d3aa
 800bc7c:	0800d3bb 	.word	0x0800d3bb

0800bc80 <__hi0bits>:
 800bc80:	0c03      	lsrs	r3, r0, #16
 800bc82:	041b      	lsls	r3, r3, #16
 800bc84:	b9d3      	cbnz	r3, 800bcbc <__hi0bits+0x3c>
 800bc86:	0400      	lsls	r0, r0, #16
 800bc88:	2310      	movs	r3, #16
 800bc8a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bc8e:	bf04      	itt	eq
 800bc90:	0200      	lsleq	r0, r0, #8
 800bc92:	3308      	addeq	r3, #8
 800bc94:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bc98:	bf04      	itt	eq
 800bc9a:	0100      	lsleq	r0, r0, #4
 800bc9c:	3304      	addeq	r3, #4
 800bc9e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bca2:	bf04      	itt	eq
 800bca4:	0080      	lsleq	r0, r0, #2
 800bca6:	3302      	addeq	r3, #2
 800bca8:	2800      	cmp	r0, #0
 800bcaa:	db05      	blt.n	800bcb8 <__hi0bits+0x38>
 800bcac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bcb0:	f103 0301 	add.w	r3, r3, #1
 800bcb4:	bf08      	it	eq
 800bcb6:	2320      	moveq	r3, #32
 800bcb8:	4618      	mov	r0, r3
 800bcba:	4770      	bx	lr
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	e7e4      	b.n	800bc8a <__hi0bits+0xa>

0800bcc0 <__lo0bits>:
 800bcc0:	6803      	ldr	r3, [r0, #0]
 800bcc2:	f013 0207 	ands.w	r2, r3, #7
 800bcc6:	4601      	mov	r1, r0
 800bcc8:	d00b      	beq.n	800bce2 <__lo0bits+0x22>
 800bcca:	07da      	lsls	r2, r3, #31
 800bccc:	d423      	bmi.n	800bd16 <__lo0bits+0x56>
 800bcce:	0798      	lsls	r0, r3, #30
 800bcd0:	bf49      	itett	mi
 800bcd2:	085b      	lsrmi	r3, r3, #1
 800bcd4:	089b      	lsrpl	r3, r3, #2
 800bcd6:	2001      	movmi	r0, #1
 800bcd8:	600b      	strmi	r3, [r1, #0]
 800bcda:	bf5c      	itt	pl
 800bcdc:	600b      	strpl	r3, [r1, #0]
 800bcde:	2002      	movpl	r0, #2
 800bce0:	4770      	bx	lr
 800bce2:	b298      	uxth	r0, r3
 800bce4:	b9a8      	cbnz	r0, 800bd12 <__lo0bits+0x52>
 800bce6:	0c1b      	lsrs	r3, r3, #16
 800bce8:	2010      	movs	r0, #16
 800bcea:	b2da      	uxtb	r2, r3
 800bcec:	b90a      	cbnz	r2, 800bcf2 <__lo0bits+0x32>
 800bcee:	3008      	adds	r0, #8
 800bcf0:	0a1b      	lsrs	r3, r3, #8
 800bcf2:	071a      	lsls	r2, r3, #28
 800bcf4:	bf04      	itt	eq
 800bcf6:	091b      	lsreq	r3, r3, #4
 800bcf8:	3004      	addeq	r0, #4
 800bcfa:	079a      	lsls	r2, r3, #30
 800bcfc:	bf04      	itt	eq
 800bcfe:	089b      	lsreq	r3, r3, #2
 800bd00:	3002      	addeq	r0, #2
 800bd02:	07da      	lsls	r2, r3, #31
 800bd04:	d403      	bmi.n	800bd0e <__lo0bits+0x4e>
 800bd06:	085b      	lsrs	r3, r3, #1
 800bd08:	f100 0001 	add.w	r0, r0, #1
 800bd0c:	d005      	beq.n	800bd1a <__lo0bits+0x5a>
 800bd0e:	600b      	str	r3, [r1, #0]
 800bd10:	4770      	bx	lr
 800bd12:	4610      	mov	r0, r2
 800bd14:	e7e9      	b.n	800bcea <__lo0bits+0x2a>
 800bd16:	2000      	movs	r0, #0
 800bd18:	4770      	bx	lr
 800bd1a:	2020      	movs	r0, #32
 800bd1c:	4770      	bx	lr
	...

0800bd20 <__i2b>:
 800bd20:	b510      	push	{r4, lr}
 800bd22:	460c      	mov	r4, r1
 800bd24:	2101      	movs	r1, #1
 800bd26:	f7ff ff03 	bl	800bb30 <_Balloc>
 800bd2a:	4602      	mov	r2, r0
 800bd2c:	b928      	cbnz	r0, 800bd3a <__i2b+0x1a>
 800bd2e:	4b05      	ldr	r3, [pc, #20]	; (800bd44 <__i2b+0x24>)
 800bd30:	4805      	ldr	r0, [pc, #20]	; (800bd48 <__i2b+0x28>)
 800bd32:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bd36:	f7ff f83f 	bl	800adb8 <__assert_func>
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	6144      	str	r4, [r0, #20]
 800bd3e:	6103      	str	r3, [r0, #16]
 800bd40:	bd10      	pop	{r4, pc}
 800bd42:	bf00      	nop
 800bd44:	0800d3aa 	.word	0x0800d3aa
 800bd48:	0800d3bb 	.word	0x0800d3bb

0800bd4c <__multiply>:
 800bd4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd50:	4691      	mov	r9, r2
 800bd52:	690a      	ldr	r2, [r1, #16]
 800bd54:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bd58:	429a      	cmp	r2, r3
 800bd5a:	bfb8      	it	lt
 800bd5c:	460b      	movlt	r3, r1
 800bd5e:	460c      	mov	r4, r1
 800bd60:	bfbc      	itt	lt
 800bd62:	464c      	movlt	r4, r9
 800bd64:	4699      	movlt	r9, r3
 800bd66:	6927      	ldr	r7, [r4, #16]
 800bd68:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bd6c:	68a3      	ldr	r3, [r4, #8]
 800bd6e:	6861      	ldr	r1, [r4, #4]
 800bd70:	eb07 060a 	add.w	r6, r7, sl
 800bd74:	42b3      	cmp	r3, r6
 800bd76:	b085      	sub	sp, #20
 800bd78:	bfb8      	it	lt
 800bd7a:	3101      	addlt	r1, #1
 800bd7c:	f7ff fed8 	bl	800bb30 <_Balloc>
 800bd80:	b930      	cbnz	r0, 800bd90 <__multiply+0x44>
 800bd82:	4602      	mov	r2, r0
 800bd84:	4b44      	ldr	r3, [pc, #272]	; (800be98 <__multiply+0x14c>)
 800bd86:	4845      	ldr	r0, [pc, #276]	; (800be9c <__multiply+0x150>)
 800bd88:	f240 115d 	movw	r1, #349	; 0x15d
 800bd8c:	f7ff f814 	bl	800adb8 <__assert_func>
 800bd90:	f100 0514 	add.w	r5, r0, #20
 800bd94:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bd98:	462b      	mov	r3, r5
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	4543      	cmp	r3, r8
 800bd9e:	d321      	bcc.n	800bde4 <__multiply+0x98>
 800bda0:	f104 0314 	add.w	r3, r4, #20
 800bda4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bda8:	f109 0314 	add.w	r3, r9, #20
 800bdac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bdb0:	9202      	str	r2, [sp, #8]
 800bdb2:	1b3a      	subs	r2, r7, r4
 800bdb4:	3a15      	subs	r2, #21
 800bdb6:	f022 0203 	bic.w	r2, r2, #3
 800bdba:	3204      	adds	r2, #4
 800bdbc:	f104 0115 	add.w	r1, r4, #21
 800bdc0:	428f      	cmp	r7, r1
 800bdc2:	bf38      	it	cc
 800bdc4:	2204      	movcc	r2, #4
 800bdc6:	9201      	str	r2, [sp, #4]
 800bdc8:	9a02      	ldr	r2, [sp, #8]
 800bdca:	9303      	str	r3, [sp, #12]
 800bdcc:	429a      	cmp	r2, r3
 800bdce:	d80c      	bhi.n	800bdea <__multiply+0x9e>
 800bdd0:	2e00      	cmp	r6, #0
 800bdd2:	dd03      	ble.n	800bddc <__multiply+0x90>
 800bdd4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d05a      	beq.n	800be92 <__multiply+0x146>
 800bddc:	6106      	str	r6, [r0, #16]
 800bdde:	b005      	add	sp, #20
 800bde0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bde4:	f843 2b04 	str.w	r2, [r3], #4
 800bde8:	e7d8      	b.n	800bd9c <__multiply+0x50>
 800bdea:	f8b3 a000 	ldrh.w	sl, [r3]
 800bdee:	f1ba 0f00 	cmp.w	sl, #0
 800bdf2:	d024      	beq.n	800be3e <__multiply+0xf2>
 800bdf4:	f104 0e14 	add.w	lr, r4, #20
 800bdf8:	46a9      	mov	r9, r5
 800bdfa:	f04f 0c00 	mov.w	ip, #0
 800bdfe:	f85e 2b04 	ldr.w	r2, [lr], #4
 800be02:	f8d9 1000 	ldr.w	r1, [r9]
 800be06:	fa1f fb82 	uxth.w	fp, r2
 800be0a:	b289      	uxth	r1, r1
 800be0c:	fb0a 110b 	mla	r1, sl, fp, r1
 800be10:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800be14:	f8d9 2000 	ldr.w	r2, [r9]
 800be18:	4461      	add	r1, ip
 800be1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800be1e:	fb0a c20b 	mla	r2, sl, fp, ip
 800be22:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800be26:	b289      	uxth	r1, r1
 800be28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800be2c:	4577      	cmp	r7, lr
 800be2e:	f849 1b04 	str.w	r1, [r9], #4
 800be32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800be36:	d8e2      	bhi.n	800bdfe <__multiply+0xb2>
 800be38:	9a01      	ldr	r2, [sp, #4]
 800be3a:	f845 c002 	str.w	ip, [r5, r2]
 800be3e:	9a03      	ldr	r2, [sp, #12]
 800be40:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800be44:	3304      	adds	r3, #4
 800be46:	f1b9 0f00 	cmp.w	r9, #0
 800be4a:	d020      	beq.n	800be8e <__multiply+0x142>
 800be4c:	6829      	ldr	r1, [r5, #0]
 800be4e:	f104 0c14 	add.w	ip, r4, #20
 800be52:	46ae      	mov	lr, r5
 800be54:	f04f 0a00 	mov.w	sl, #0
 800be58:	f8bc b000 	ldrh.w	fp, [ip]
 800be5c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800be60:	fb09 220b 	mla	r2, r9, fp, r2
 800be64:	4492      	add	sl, r2
 800be66:	b289      	uxth	r1, r1
 800be68:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800be6c:	f84e 1b04 	str.w	r1, [lr], #4
 800be70:	f85c 2b04 	ldr.w	r2, [ip], #4
 800be74:	f8be 1000 	ldrh.w	r1, [lr]
 800be78:	0c12      	lsrs	r2, r2, #16
 800be7a:	fb09 1102 	mla	r1, r9, r2, r1
 800be7e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800be82:	4567      	cmp	r7, ip
 800be84:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800be88:	d8e6      	bhi.n	800be58 <__multiply+0x10c>
 800be8a:	9a01      	ldr	r2, [sp, #4]
 800be8c:	50a9      	str	r1, [r5, r2]
 800be8e:	3504      	adds	r5, #4
 800be90:	e79a      	b.n	800bdc8 <__multiply+0x7c>
 800be92:	3e01      	subs	r6, #1
 800be94:	e79c      	b.n	800bdd0 <__multiply+0x84>
 800be96:	bf00      	nop
 800be98:	0800d3aa 	.word	0x0800d3aa
 800be9c:	0800d3bb 	.word	0x0800d3bb

0800bea0 <__pow5mult>:
 800bea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bea4:	4615      	mov	r5, r2
 800bea6:	f012 0203 	ands.w	r2, r2, #3
 800beaa:	4606      	mov	r6, r0
 800beac:	460f      	mov	r7, r1
 800beae:	d007      	beq.n	800bec0 <__pow5mult+0x20>
 800beb0:	4c25      	ldr	r4, [pc, #148]	; (800bf48 <__pow5mult+0xa8>)
 800beb2:	3a01      	subs	r2, #1
 800beb4:	2300      	movs	r3, #0
 800beb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800beba:	f7ff fe9b 	bl	800bbf4 <__multadd>
 800bebe:	4607      	mov	r7, r0
 800bec0:	10ad      	asrs	r5, r5, #2
 800bec2:	d03d      	beq.n	800bf40 <__pow5mult+0xa0>
 800bec4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bec6:	b97c      	cbnz	r4, 800bee8 <__pow5mult+0x48>
 800bec8:	2010      	movs	r0, #16
 800beca:	f7fe f98f 	bl	800a1ec <malloc>
 800bece:	4602      	mov	r2, r0
 800bed0:	6270      	str	r0, [r6, #36]	; 0x24
 800bed2:	b928      	cbnz	r0, 800bee0 <__pow5mult+0x40>
 800bed4:	4b1d      	ldr	r3, [pc, #116]	; (800bf4c <__pow5mult+0xac>)
 800bed6:	481e      	ldr	r0, [pc, #120]	; (800bf50 <__pow5mult+0xb0>)
 800bed8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bedc:	f7fe ff6c 	bl	800adb8 <__assert_func>
 800bee0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bee4:	6004      	str	r4, [r0, #0]
 800bee6:	60c4      	str	r4, [r0, #12]
 800bee8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800beec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bef0:	b94c      	cbnz	r4, 800bf06 <__pow5mult+0x66>
 800bef2:	f240 2171 	movw	r1, #625	; 0x271
 800bef6:	4630      	mov	r0, r6
 800bef8:	f7ff ff12 	bl	800bd20 <__i2b>
 800befc:	2300      	movs	r3, #0
 800befe:	f8c8 0008 	str.w	r0, [r8, #8]
 800bf02:	4604      	mov	r4, r0
 800bf04:	6003      	str	r3, [r0, #0]
 800bf06:	f04f 0900 	mov.w	r9, #0
 800bf0a:	07eb      	lsls	r3, r5, #31
 800bf0c:	d50a      	bpl.n	800bf24 <__pow5mult+0x84>
 800bf0e:	4639      	mov	r1, r7
 800bf10:	4622      	mov	r2, r4
 800bf12:	4630      	mov	r0, r6
 800bf14:	f7ff ff1a 	bl	800bd4c <__multiply>
 800bf18:	4639      	mov	r1, r7
 800bf1a:	4680      	mov	r8, r0
 800bf1c:	4630      	mov	r0, r6
 800bf1e:	f7ff fe47 	bl	800bbb0 <_Bfree>
 800bf22:	4647      	mov	r7, r8
 800bf24:	106d      	asrs	r5, r5, #1
 800bf26:	d00b      	beq.n	800bf40 <__pow5mult+0xa0>
 800bf28:	6820      	ldr	r0, [r4, #0]
 800bf2a:	b938      	cbnz	r0, 800bf3c <__pow5mult+0x9c>
 800bf2c:	4622      	mov	r2, r4
 800bf2e:	4621      	mov	r1, r4
 800bf30:	4630      	mov	r0, r6
 800bf32:	f7ff ff0b 	bl	800bd4c <__multiply>
 800bf36:	6020      	str	r0, [r4, #0]
 800bf38:	f8c0 9000 	str.w	r9, [r0]
 800bf3c:	4604      	mov	r4, r0
 800bf3e:	e7e4      	b.n	800bf0a <__pow5mult+0x6a>
 800bf40:	4638      	mov	r0, r7
 800bf42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf46:	bf00      	nop
 800bf48:	0800d508 	.word	0x0800d508
 800bf4c:	0800d294 	.word	0x0800d294
 800bf50:	0800d3bb 	.word	0x0800d3bb

0800bf54 <__lshift>:
 800bf54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf58:	460c      	mov	r4, r1
 800bf5a:	6849      	ldr	r1, [r1, #4]
 800bf5c:	6923      	ldr	r3, [r4, #16]
 800bf5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bf62:	68a3      	ldr	r3, [r4, #8]
 800bf64:	4607      	mov	r7, r0
 800bf66:	4691      	mov	r9, r2
 800bf68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bf6c:	f108 0601 	add.w	r6, r8, #1
 800bf70:	42b3      	cmp	r3, r6
 800bf72:	db0b      	blt.n	800bf8c <__lshift+0x38>
 800bf74:	4638      	mov	r0, r7
 800bf76:	f7ff fddb 	bl	800bb30 <_Balloc>
 800bf7a:	4605      	mov	r5, r0
 800bf7c:	b948      	cbnz	r0, 800bf92 <__lshift+0x3e>
 800bf7e:	4602      	mov	r2, r0
 800bf80:	4b2a      	ldr	r3, [pc, #168]	; (800c02c <__lshift+0xd8>)
 800bf82:	482b      	ldr	r0, [pc, #172]	; (800c030 <__lshift+0xdc>)
 800bf84:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bf88:	f7fe ff16 	bl	800adb8 <__assert_func>
 800bf8c:	3101      	adds	r1, #1
 800bf8e:	005b      	lsls	r3, r3, #1
 800bf90:	e7ee      	b.n	800bf70 <__lshift+0x1c>
 800bf92:	2300      	movs	r3, #0
 800bf94:	f100 0114 	add.w	r1, r0, #20
 800bf98:	f100 0210 	add.w	r2, r0, #16
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	4553      	cmp	r3, sl
 800bfa0:	db37      	blt.n	800c012 <__lshift+0xbe>
 800bfa2:	6920      	ldr	r0, [r4, #16]
 800bfa4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bfa8:	f104 0314 	add.w	r3, r4, #20
 800bfac:	f019 091f 	ands.w	r9, r9, #31
 800bfb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bfb4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bfb8:	d02f      	beq.n	800c01a <__lshift+0xc6>
 800bfba:	f1c9 0e20 	rsb	lr, r9, #32
 800bfbe:	468a      	mov	sl, r1
 800bfc0:	f04f 0c00 	mov.w	ip, #0
 800bfc4:	681a      	ldr	r2, [r3, #0]
 800bfc6:	fa02 f209 	lsl.w	r2, r2, r9
 800bfca:	ea42 020c 	orr.w	r2, r2, ip
 800bfce:	f84a 2b04 	str.w	r2, [sl], #4
 800bfd2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfd6:	4298      	cmp	r0, r3
 800bfd8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bfdc:	d8f2      	bhi.n	800bfc4 <__lshift+0x70>
 800bfde:	1b03      	subs	r3, r0, r4
 800bfe0:	3b15      	subs	r3, #21
 800bfe2:	f023 0303 	bic.w	r3, r3, #3
 800bfe6:	3304      	adds	r3, #4
 800bfe8:	f104 0215 	add.w	r2, r4, #21
 800bfec:	4290      	cmp	r0, r2
 800bfee:	bf38      	it	cc
 800bff0:	2304      	movcc	r3, #4
 800bff2:	f841 c003 	str.w	ip, [r1, r3]
 800bff6:	f1bc 0f00 	cmp.w	ip, #0
 800bffa:	d001      	beq.n	800c000 <__lshift+0xac>
 800bffc:	f108 0602 	add.w	r6, r8, #2
 800c000:	3e01      	subs	r6, #1
 800c002:	4638      	mov	r0, r7
 800c004:	612e      	str	r6, [r5, #16]
 800c006:	4621      	mov	r1, r4
 800c008:	f7ff fdd2 	bl	800bbb0 <_Bfree>
 800c00c:	4628      	mov	r0, r5
 800c00e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c012:	f842 0f04 	str.w	r0, [r2, #4]!
 800c016:	3301      	adds	r3, #1
 800c018:	e7c1      	b.n	800bf9e <__lshift+0x4a>
 800c01a:	3904      	subs	r1, #4
 800c01c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c020:	f841 2f04 	str.w	r2, [r1, #4]!
 800c024:	4298      	cmp	r0, r3
 800c026:	d8f9      	bhi.n	800c01c <__lshift+0xc8>
 800c028:	e7ea      	b.n	800c000 <__lshift+0xac>
 800c02a:	bf00      	nop
 800c02c:	0800d3aa 	.word	0x0800d3aa
 800c030:	0800d3bb 	.word	0x0800d3bb

0800c034 <__mcmp>:
 800c034:	b530      	push	{r4, r5, lr}
 800c036:	6902      	ldr	r2, [r0, #16]
 800c038:	690c      	ldr	r4, [r1, #16]
 800c03a:	1b12      	subs	r2, r2, r4
 800c03c:	d10e      	bne.n	800c05c <__mcmp+0x28>
 800c03e:	f100 0314 	add.w	r3, r0, #20
 800c042:	3114      	adds	r1, #20
 800c044:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c048:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c04c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c050:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c054:	42a5      	cmp	r5, r4
 800c056:	d003      	beq.n	800c060 <__mcmp+0x2c>
 800c058:	d305      	bcc.n	800c066 <__mcmp+0x32>
 800c05a:	2201      	movs	r2, #1
 800c05c:	4610      	mov	r0, r2
 800c05e:	bd30      	pop	{r4, r5, pc}
 800c060:	4283      	cmp	r3, r0
 800c062:	d3f3      	bcc.n	800c04c <__mcmp+0x18>
 800c064:	e7fa      	b.n	800c05c <__mcmp+0x28>
 800c066:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c06a:	e7f7      	b.n	800c05c <__mcmp+0x28>

0800c06c <__mdiff>:
 800c06c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c070:	460c      	mov	r4, r1
 800c072:	4606      	mov	r6, r0
 800c074:	4611      	mov	r1, r2
 800c076:	4620      	mov	r0, r4
 800c078:	4690      	mov	r8, r2
 800c07a:	f7ff ffdb 	bl	800c034 <__mcmp>
 800c07e:	1e05      	subs	r5, r0, #0
 800c080:	d110      	bne.n	800c0a4 <__mdiff+0x38>
 800c082:	4629      	mov	r1, r5
 800c084:	4630      	mov	r0, r6
 800c086:	f7ff fd53 	bl	800bb30 <_Balloc>
 800c08a:	b930      	cbnz	r0, 800c09a <__mdiff+0x2e>
 800c08c:	4b3a      	ldr	r3, [pc, #232]	; (800c178 <__mdiff+0x10c>)
 800c08e:	4602      	mov	r2, r0
 800c090:	f240 2132 	movw	r1, #562	; 0x232
 800c094:	4839      	ldr	r0, [pc, #228]	; (800c17c <__mdiff+0x110>)
 800c096:	f7fe fe8f 	bl	800adb8 <__assert_func>
 800c09a:	2301      	movs	r3, #1
 800c09c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c0a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0a4:	bfa4      	itt	ge
 800c0a6:	4643      	movge	r3, r8
 800c0a8:	46a0      	movge	r8, r4
 800c0aa:	4630      	mov	r0, r6
 800c0ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c0b0:	bfa6      	itte	ge
 800c0b2:	461c      	movge	r4, r3
 800c0b4:	2500      	movge	r5, #0
 800c0b6:	2501      	movlt	r5, #1
 800c0b8:	f7ff fd3a 	bl	800bb30 <_Balloc>
 800c0bc:	b920      	cbnz	r0, 800c0c8 <__mdiff+0x5c>
 800c0be:	4b2e      	ldr	r3, [pc, #184]	; (800c178 <__mdiff+0x10c>)
 800c0c0:	4602      	mov	r2, r0
 800c0c2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c0c6:	e7e5      	b.n	800c094 <__mdiff+0x28>
 800c0c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c0cc:	6926      	ldr	r6, [r4, #16]
 800c0ce:	60c5      	str	r5, [r0, #12]
 800c0d0:	f104 0914 	add.w	r9, r4, #20
 800c0d4:	f108 0514 	add.w	r5, r8, #20
 800c0d8:	f100 0e14 	add.w	lr, r0, #20
 800c0dc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c0e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c0e4:	f108 0210 	add.w	r2, r8, #16
 800c0e8:	46f2      	mov	sl, lr
 800c0ea:	2100      	movs	r1, #0
 800c0ec:	f859 3b04 	ldr.w	r3, [r9], #4
 800c0f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c0f4:	fa1f f883 	uxth.w	r8, r3
 800c0f8:	fa11 f18b 	uxtah	r1, r1, fp
 800c0fc:	0c1b      	lsrs	r3, r3, #16
 800c0fe:	eba1 0808 	sub.w	r8, r1, r8
 800c102:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c106:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c10a:	fa1f f888 	uxth.w	r8, r8
 800c10e:	1419      	asrs	r1, r3, #16
 800c110:	454e      	cmp	r6, r9
 800c112:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c116:	f84a 3b04 	str.w	r3, [sl], #4
 800c11a:	d8e7      	bhi.n	800c0ec <__mdiff+0x80>
 800c11c:	1b33      	subs	r3, r6, r4
 800c11e:	3b15      	subs	r3, #21
 800c120:	f023 0303 	bic.w	r3, r3, #3
 800c124:	3304      	adds	r3, #4
 800c126:	3415      	adds	r4, #21
 800c128:	42a6      	cmp	r6, r4
 800c12a:	bf38      	it	cc
 800c12c:	2304      	movcc	r3, #4
 800c12e:	441d      	add	r5, r3
 800c130:	4473      	add	r3, lr
 800c132:	469e      	mov	lr, r3
 800c134:	462e      	mov	r6, r5
 800c136:	4566      	cmp	r6, ip
 800c138:	d30e      	bcc.n	800c158 <__mdiff+0xec>
 800c13a:	f10c 0203 	add.w	r2, ip, #3
 800c13e:	1b52      	subs	r2, r2, r5
 800c140:	f022 0203 	bic.w	r2, r2, #3
 800c144:	3d03      	subs	r5, #3
 800c146:	45ac      	cmp	ip, r5
 800c148:	bf38      	it	cc
 800c14a:	2200      	movcc	r2, #0
 800c14c:	441a      	add	r2, r3
 800c14e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c152:	b17b      	cbz	r3, 800c174 <__mdiff+0x108>
 800c154:	6107      	str	r7, [r0, #16]
 800c156:	e7a3      	b.n	800c0a0 <__mdiff+0x34>
 800c158:	f856 8b04 	ldr.w	r8, [r6], #4
 800c15c:	fa11 f288 	uxtah	r2, r1, r8
 800c160:	1414      	asrs	r4, r2, #16
 800c162:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c166:	b292      	uxth	r2, r2
 800c168:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c16c:	f84e 2b04 	str.w	r2, [lr], #4
 800c170:	1421      	asrs	r1, r4, #16
 800c172:	e7e0      	b.n	800c136 <__mdiff+0xca>
 800c174:	3f01      	subs	r7, #1
 800c176:	e7ea      	b.n	800c14e <__mdiff+0xe2>
 800c178:	0800d3aa 	.word	0x0800d3aa
 800c17c:	0800d3bb 	.word	0x0800d3bb

0800c180 <__d2b>:
 800c180:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c184:	4689      	mov	r9, r1
 800c186:	2101      	movs	r1, #1
 800c188:	ec57 6b10 	vmov	r6, r7, d0
 800c18c:	4690      	mov	r8, r2
 800c18e:	f7ff fccf 	bl	800bb30 <_Balloc>
 800c192:	4604      	mov	r4, r0
 800c194:	b930      	cbnz	r0, 800c1a4 <__d2b+0x24>
 800c196:	4602      	mov	r2, r0
 800c198:	4b25      	ldr	r3, [pc, #148]	; (800c230 <__d2b+0xb0>)
 800c19a:	4826      	ldr	r0, [pc, #152]	; (800c234 <__d2b+0xb4>)
 800c19c:	f240 310a 	movw	r1, #778	; 0x30a
 800c1a0:	f7fe fe0a 	bl	800adb8 <__assert_func>
 800c1a4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c1a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c1ac:	bb35      	cbnz	r5, 800c1fc <__d2b+0x7c>
 800c1ae:	2e00      	cmp	r6, #0
 800c1b0:	9301      	str	r3, [sp, #4]
 800c1b2:	d028      	beq.n	800c206 <__d2b+0x86>
 800c1b4:	4668      	mov	r0, sp
 800c1b6:	9600      	str	r6, [sp, #0]
 800c1b8:	f7ff fd82 	bl	800bcc0 <__lo0bits>
 800c1bc:	9900      	ldr	r1, [sp, #0]
 800c1be:	b300      	cbz	r0, 800c202 <__d2b+0x82>
 800c1c0:	9a01      	ldr	r2, [sp, #4]
 800c1c2:	f1c0 0320 	rsb	r3, r0, #32
 800c1c6:	fa02 f303 	lsl.w	r3, r2, r3
 800c1ca:	430b      	orrs	r3, r1
 800c1cc:	40c2      	lsrs	r2, r0
 800c1ce:	6163      	str	r3, [r4, #20]
 800c1d0:	9201      	str	r2, [sp, #4]
 800c1d2:	9b01      	ldr	r3, [sp, #4]
 800c1d4:	61a3      	str	r3, [r4, #24]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	bf14      	ite	ne
 800c1da:	2202      	movne	r2, #2
 800c1dc:	2201      	moveq	r2, #1
 800c1de:	6122      	str	r2, [r4, #16]
 800c1e0:	b1d5      	cbz	r5, 800c218 <__d2b+0x98>
 800c1e2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c1e6:	4405      	add	r5, r0
 800c1e8:	f8c9 5000 	str.w	r5, [r9]
 800c1ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c1f0:	f8c8 0000 	str.w	r0, [r8]
 800c1f4:	4620      	mov	r0, r4
 800c1f6:	b003      	add	sp, #12
 800c1f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c1fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c200:	e7d5      	b.n	800c1ae <__d2b+0x2e>
 800c202:	6161      	str	r1, [r4, #20]
 800c204:	e7e5      	b.n	800c1d2 <__d2b+0x52>
 800c206:	a801      	add	r0, sp, #4
 800c208:	f7ff fd5a 	bl	800bcc0 <__lo0bits>
 800c20c:	9b01      	ldr	r3, [sp, #4]
 800c20e:	6163      	str	r3, [r4, #20]
 800c210:	2201      	movs	r2, #1
 800c212:	6122      	str	r2, [r4, #16]
 800c214:	3020      	adds	r0, #32
 800c216:	e7e3      	b.n	800c1e0 <__d2b+0x60>
 800c218:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c21c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c220:	f8c9 0000 	str.w	r0, [r9]
 800c224:	6918      	ldr	r0, [r3, #16]
 800c226:	f7ff fd2b 	bl	800bc80 <__hi0bits>
 800c22a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c22e:	e7df      	b.n	800c1f0 <__d2b+0x70>
 800c230:	0800d3aa 	.word	0x0800d3aa
 800c234:	0800d3bb 	.word	0x0800d3bb

0800c238 <_calloc_r>:
 800c238:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c23a:	fba1 2402 	umull	r2, r4, r1, r2
 800c23e:	b94c      	cbnz	r4, 800c254 <_calloc_r+0x1c>
 800c240:	4611      	mov	r1, r2
 800c242:	9201      	str	r2, [sp, #4]
 800c244:	f7fe f86c 	bl	800a320 <_malloc_r>
 800c248:	9a01      	ldr	r2, [sp, #4]
 800c24a:	4605      	mov	r5, r0
 800c24c:	b930      	cbnz	r0, 800c25c <_calloc_r+0x24>
 800c24e:	4628      	mov	r0, r5
 800c250:	b003      	add	sp, #12
 800c252:	bd30      	pop	{r4, r5, pc}
 800c254:	220c      	movs	r2, #12
 800c256:	6002      	str	r2, [r0, #0]
 800c258:	2500      	movs	r5, #0
 800c25a:	e7f8      	b.n	800c24e <_calloc_r+0x16>
 800c25c:	4621      	mov	r1, r4
 800c25e:	f7fd ffeb 	bl	800a238 <memset>
 800c262:	e7f4      	b.n	800c24e <_calloc_r+0x16>

0800c264 <__ssputs_r>:
 800c264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c268:	688e      	ldr	r6, [r1, #8]
 800c26a:	429e      	cmp	r6, r3
 800c26c:	4682      	mov	sl, r0
 800c26e:	460c      	mov	r4, r1
 800c270:	4690      	mov	r8, r2
 800c272:	461f      	mov	r7, r3
 800c274:	d838      	bhi.n	800c2e8 <__ssputs_r+0x84>
 800c276:	898a      	ldrh	r2, [r1, #12]
 800c278:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c27c:	d032      	beq.n	800c2e4 <__ssputs_r+0x80>
 800c27e:	6825      	ldr	r5, [r4, #0]
 800c280:	6909      	ldr	r1, [r1, #16]
 800c282:	eba5 0901 	sub.w	r9, r5, r1
 800c286:	6965      	ldr	r5, [r4, #20]
 800c288:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c28c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c290:	3301      	adds	r3, #1
 800c292:	444b      	add	r3, r9
 800c294:	106d      	asrs	r5, r5, #1
 800c296:	429d      	cmp	r5, r3
 800c298:	bf38      	it	cc
 800c29a:	461d      	movcc	r5, r3
 800c29c:	0553      	lsls	r3, r2, #21
 800c29e:	d531      	bpl.n	800c304 <__ssputs_r+0xa0>
 800c2a0:	4629      	mov	r1, r5
 800c2a2:	f7fe f83d 	bl	800a320 <_malloc_r>
 800c2a6:	4606      	mov	r6, r0
 800c2a8:	b950      	cbnz	r0, 800c2c0 <__ssputs_r+0x5c>
 800c2aa:	230c      	movs	r3, #12
 800c2ac:	f8ca 3000 	str.w	r3, [sl]
 800c2b0:	89a3      	ldrh	r3, [r4, #12]
 800c2b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2b6:	81a3      	strh	r3, [r4, #12]
 800c2b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c2bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2c0:	6921      	ldr	r1, [r4, #16]
 800c2c2:	464a      	mov	r2, r9
 800c2c4:	f7fd ffaa 	bl	800a21c <memcpy>
 800c2c8:	89a3      	ldrh	r3, [r4, #12]
 800c2ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c2ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2d2:	81a3      	strh	r3, [r4, #12]
 800c2d4:	6126      	str	r6, [r4, #16]
 800c2d6:	6165      	str	r5, [r4, #20]
 800c2d8:	444e      	add	r6, r9
 800c2da:	eba5 0509 	sub.w	r5, r5, r9
 800c2de:	6026      	str	r6, [r4, #0]
 800c2e0:	60a5      	str	r5, [r4, #8]
 800c2e2:	463e      	mov	r6, r7
 800c2e4:	42be      	cmp	r6, r7
 800c2e6:	d900      	bls.n	800c2ea <__ssputs_r+0x86>
 800c2e8:	463e      	mov	r6, r7
 800c2ea:	6820      	ldr	r0, [r4, #0]
 800c2ec:	4632      	mov	r2, r6
 800c2ee:	4641      	mov	r1, r8
 800c2f0:	f000 fd68 	bl	800cdc4 <memmove>
 800c2f4:	68a3      	ldr	r3, [r4, #8]
 800c2f6:	1b9b      	subs	r3, r3, r6
 800c2f8:	60a3      	str	r3, [r4, #8]
 800c2fa:	6823      	ldr	r3, [r4, #0]
 800c2fc:	4433      	add	r3, r6
 800c2fe:	6023      	str	r3, [r4, #0]
 800c300:	2000      	movs	r0, #0
 800c302:	e7db      	b.n	800c2bc <__ssputs_r+0x58>
 800c304:	462a      	mov	r2, r5
 800c306:	f000 fd77 	bl	800cdf8 <_realloc_r>
 800c30a:	4606      	mov	r6, r0
 800c30c:	2800      	cmp	r0, #0
 800c30e:	d1e1      	bne.n	800c2d4 <__ssputs_r+0x70>
 800c310:	6921      	ldr	r1, [r4, #16]
 800c312:	4650      	mov	r0, sl
 800c314:	f7fd ff98 	bl	800a248 <_free_r>
 800c318:	e7c7      	b.n	800c2aa <__ssputs_r+0x46>
	...

0800c31c <_svfiprintf_r>:
 800c31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c320:	4698      	mov	r8, r3
 800c322:	898b      	ldrh	r3, [r1, #12]
 800c324:	061b      	lsls	r3, r3, #24
 800c326:	b09d      	sub	sp, #116	; 0x74
 800c328:	4607      	mov	r7, r0
 800c32a:	460d      	mov	r5, r1
 800c32c:	4614      	mov	r4, r2
 800c32e:	d50e      	bpl.n	800c34e <_svfiprintf_r+0x32>
 800c330:	690b      	ldr	r3, [r1, #16]
 800c332:	b963      	cbnz	r3, 800c34e <_svfiprintf_r+0x32>
 800c334:	2140      	movs	r1, #64	; 0x40
 800c336:	f7fd fff3 	bl	800a320 <_malloc_r>
 800c33a:	6028      	str	r0, [r5, #0]
 800c33c:	6128      	str	r0, [r5, #16]
 800c33e:	b920      	cbnz	r0, 800c34a <_svfiprintf_r+0x2e>
 800c340:	230c      	movs	r3, #12
 800c342:	603b      	str	r3, [r7, #0]
 800c344:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c348:	e0d1      	b.n	800c4ee <_svfiprintf_r+0x1d2>
 800c34a:	2340      	movs	r3, #64	; 0x40
 800c34c:	616b      	str	r3, [r5, #20]
 800c34e:	2300      	movs	r3, #0
 800c350:	9309      	str	r3, [sp, #36]	; 0x24
 800c352:	2320      	movs	r3, #32
 800c354:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c358:	f8cd 800c 	str.w	r8, [sp, #12]
 800c35c:	2330      	movs	r3, #48	; 0x30
 800c35e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c508 <_svfiprintf_r+0x1ec>
 800c362:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c366:	f04f 0901 	mov.w	r9, #1
 800c36a:	4623      	mov	r3, r4
 800c36c:	469a      	mov	sl, r3
 800c36e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c372:	b10a      	cbz	r2, 800c378 <_svfiprintf_r+0x5c>
 800c374:	2a25      	cmp	r2, #37	; 0x25
 800c376:	d1f9      	bne.n	800c36c <_svfiprintf_r+0x50>
 800c378:	ebba 0b04 	subs.w	fp, sl, r4
 800c37c:	d00b      	beq.n	800c396 <_svfiprintf_r+0x7a>
 800c37e:	465b      	mov	r3, fp
 800c380:	4622      	mov	r2, r4
 800c382:	4629      	mov	r1, r5
 800c384:	4638      	mov	r0, r7
 800c386:	f7ff ff6d 	bl	800c264 <__ssputs_r>
 800c38a:	3001      	adds	r0, #1
 800c38c:	f000 80aa 	beq.w	800c4e4 <_svfiprintf_r+0x1c8>
 800c390:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c392:	445a      	add	r2, fp
 800c394:	9209      	str	r2, [sp, #36]	; 0x24
 800c396:	f89a 3000 	ldrb.w	r3, [sl]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	f000 80a2 	beq.w	800c4e4 <_svfiprintf_r+0x1c8>
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c3a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c3aa:	f10a 0a01 	add.w	sl, sl, #1
 800c3ae:	9304      	str	r3, [sp, #16]
 800c3b0:	9307      	str	r3, [sp, #28]
 800c3b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c3b6:	931a      	str	r3, [sp, #104]	; 0x68
 800c3b8:	4654      	mov	r4, sl
 800c3ba:	2205      	movs	r2, #5
 800c3bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3c0:	4851      	ldr	r0, [pc, #324]	; (800c508 <_svfiprintf_r+0x1ec>)
 800c3c2:	f7f3 ff1d 	bl	8000200 <memchr>
 800c3c6:	9a04      	ldr	r2, [sp, #16]
 800c3c8:	b9d8      	cbnz	r0, 800c402 <_svfiprintf_r+0xe6>
 800c3ca:	06d0      	lsls	r0, r2, #27
 800c3cc:	bf44      	itt	mi
 800c3ce:	2320      	movmi	r3, #32
 800c3d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c3d4:	0711      	lsls	r1, r2, #28
 800c3d6:	bf44      	itt	mi
 800c3d8:	232b      	movmi	r3, #43	; 0x2b
 800c3da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c3de:	f89a 3000 	ldrb.w	r3, [sl]
 800c3e2:	2b2a      	cmp	r3, #42	; 0x2a
 800c3e4:	d015      	beq.n	800c412 <_svfiprintf_r+0xf6>
 800c3e6:	9a07      	ldr	r2, [sp, #28]
 800c3e8:	4654      	mov	r4, sl
 800c3ea:	2000      	movs	r0, #0
 800c3ec:	f04f 0c0a 	mov.w	ip, #10
 800c3f0:	4621      	mov	r1, r4
 800c3f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c3f6:	3b30      	subs	r3, #48	; 0x30
 800c3f8:	2b09      	cmp	r3, #9
 800c3fa:	d94e      	bls.n	800c49a <_svfiprintf_r+0x17e>
 800c3fc:	b1b0      	cbz	r0, 800c42c <_svfiprintf_r+0x110>
 800c3fe:	9207      	str	r2, [sp, #28]
 800c400:	e014      	b.n	800c42c <_svfiprintf_r+0x110>
 800c402:	eba0 0308 	sub.w	r3, r0, r8
 800c406:	fa09 f303 	lsl.w	r3, r9, r3
 800c40a:	4313      	orrs	r3, r2
 800c40c:	9304      	str	r3, [sp, #16]
 800c40e:	46a2      	mov	sl, r4
 800c410:	e7d2      	b.n	800c3b8 <_svfiprintf_r+0x9c>
 800c412:	9b03      	ldr	r3, [sp, #12]
 800c414:	1d19      	adds	r1, r3, #4
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	9103      	str	r1, [sp, #12]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	bfbb      	ittet	lt
 800c41e:	425b      	neglt	r3, r3
 800c420:	f042 0202 	orrlt.w	r2, r2, #2
 800c424:	9307      	strge	r3, [sp, #28]
 800c426:	9307      	strlt	r3, [sp, #28]
 800c428:	bfb8      	it	lt
 800c42a:	9204      	strlt	r2, [sp, #16]
 800c42c:	7823      	ldrb	r3, [r4, #0]
 800c42e:	2b2e      	cmp	r3, #46	; 0x2e
 800c430:	d10c      	bne.n	800c44c <_svfiprintf_r+0x130>
 800c432:	7863      	ldrb	r3, [r4, #1]
 800c434:	2b2a      	cmp	r3, #42	; 0x2a
 800c436:	d135      	bne.n	800c4a4 <_svfiprintf_r+0x188>
 800c438:	9b03      	ldr	r3, [sp, #12]
 800c43a:	1d1a      	adds	r2, r3, #4
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	9203      	str	r2, [sp, #12]
 800c440:	2b00      	cmp	r3, #0
 800c442:	bfb8      	it	lt
 800c444:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c448:	3402      	adds	r4, #2
 800c44a:	9305      	str	r3, [sp, #20]
 800c44c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c518 <_svfiprintf_r+0x1fc>
 800c450:	7821      	ldrb	r1, [r4, #0]
 800c452:	2203      	movs	r2, #3
 800c454:	4650      	mov	r0, sl
 800c456:	f7f3 fed3 	bl	8000200 <memchr>
 800c45a:	b140      	cbz	r0, 800c46e <_svfiprintf_r+0x152>
 800c45c:	2340      	movs	r3, #64	; 0x40
 800c45e:	eba0 000a 	sub.w	r0, r0, sl
 800c462:	fa03 f000 	lsl.w	r0, r3, r0
 800c466:	9b04      	ldr	r3, [sp, #16]
 800c468:	4303      	orrs	r3, r0
 800c46a:	3401      	adds	r4, #1
 800c46c:	9304      	str	r3, [sp, #16]
 800c46e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c472:	4826      	ldr	r0, [pc, #152]	; (800c50c <_svfiprintf_r+0x1f0>)
 800c474:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c478:	2206      	movs	r2, #6
 800c47a:	f7f3 fec1 	bl	8000200 <memchr>
 800c47e:	2800      	cmp	r0, #0
 800c480:	d038      	beq.n	800c4f4 <_svfiprintf_r+0x1d8>
 800c482:	4b23      	ldr	r3, [pc, #140]	; (800c510 <_svfiprintf_r+0x1f4>)
 800c484:	bb1b      	cbnz	r3, 800c4ce <_svfiprintf_r+0x1b2>
 800c486:	9b03      	ldr	r3, [sp, #12]
 800c488:	3307      	adds	r3, #7
 800c48a:	f023 0307 	bic.w	r3, r3, #7
 800c48e:	3308      	adds	r3, #8
 800c490:	9303      	str	r3, [sp, #12]
 800c492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c494:	4433      	add	r3, r6
 800c496:	9309      	str	r3, [sp, #36]	; 0x24
 800c498:	e767      	b.n	800c36a <_svfiprintf_r+0x4e>
 800c49a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c49e:	460c      	mov	r4, r1
 800c4a0:	2001      	movs	r0, #1
 800c4a2:	e7a5      	b.n	800c3f0 <_svfiprintf_r+0xd4>
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	3401      	adds	r4, #1
 800c4a8:	9305      	str	r3, [sp, #20]
 800c4aa:	4619      	mov	r1, r3
 800c4ac:	f04f 0c0a 	mov.w	ip, #10
 800c4b0:	4620      	mov	r0, r4
 800c4b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c4b6:	3a30      	subs	r2, #48	; 0x30
 800c4b8:	2a09      	cmp	r2, #9
 800c4ba:	d903      	bls.n	800c4c4 <_svfiprintf_r+0x1a8>
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d0c5      	beq.n	800c44c <_svfiprintf_r+0x130>
 800c4c0:	9105      	str	r1, [sp, #20]
 800c4c2:	e7c3      	b.n	800c44c <_svfiprintf_r+0x130>
 800c4c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c4c8:	4604      	mov	r4, r0
 800c4ca:	2301      	movs	r3, #1
 800c4cc:	e7f0      	b.n	800c4b0 <_svfiprintf_r+0x194>
 800c4ce:	ab03      	add	r3, sp, #12
 800c4d0:	9300      	str	r3, [sp, #0]
 800c4d2:	462a      	mov	r2, r5
 800c4d4:	4b0f      	ldr	r3, [pc, #60]	; (800c514 <_svfiprintf_r+0x1f8>)
 800c4d6:	a904      	add	r1, sp, #16
 800c4d8:	4638      	mov	r0, r7
 800c4da:	f7fe f835 	bl	800a548 <_printf_float>
 800c4de:	1c42      	adds	r2, r0, #1
 800c4e0:	4606      	mov	r6, r0
 800c4e2:	d1d6      	bne.n	800c492 <_svfiprintf_r+0x176>
 800c4e4:	89ab      	ldrh	r3, [r5, #12]
 800c4e6:	065b      	lsls	r3, r3, #25
 800c4e8:	f53f af2c 	bmi.w	800c344 <_svfiprintf_r+0x28>
 800c4ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c4ee:	b01d      	add	sp, #116	; 0x74
 800c4f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4f4:	ab03      	add	r3, sp, #12
 800c4f6:	9300      	str	r3, [sp, #0]
 800c4f8:	462a      	mov	r2, r5
 800c4fa:	4b06      	ldr	r3, [pc, #24]	; (800c514 <_svfiprintf_r+0x1f8>)
 800c4fc:	a904      	add	r1, sp, #16
 800c4fe:	4638      	mov	r0, r7
 800c500:	f7fe fac6 	bl	800aa90 <_printf_i>
 800c504:	e7eb      	b.n	800c4de <_svfiprintf_r+0x1c2>
 800c506:	bf00      	nop
 800c508:	0800d514 	.word	0x0800d514
 800c50c:	0800d51e 	.word	0x0800d51e
 800c510:	0800a549 	.word	0x0800a549
 800c514:	0800c265 	.word	0x0800c265
 800c518:	0800d51a 	.word	0x0800d51a

0800c51c <__sfputc_r>:
 800c51c:	6893      	ldr	r3, [r2, #8]
 800c51e:	3b01      	subs	r3, #1
 800c520:	2b00      	cmp	r3, #0
 800c522:	b410      	push	{r4}
 800c524:	6093      	str	r3, [r2, #8]
 800c526:	da08      	bge.n	800c53a <__sfputc_r+0x1e>
 800c528:	6994      	ldr	r4, [r2, #24]
 800c52a:	42a3      	cmp	r3, r4
 800c52c:	db01      	blt.n	800c532 <__sfputc_r+0x16>
 800c52e:	290a      	cmp	r1, #10
 800c530:	d103      	bne.n	800c53a <__sfputc_r+0x1e>
 800c532:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c536:	f000 b94b 	b.w	800c7d0 <__swbuf_r>
 800c53a:	6813      	ldr	r3, [r2, #0]
 800c53c:	1c58      	adds	r0, r3, #1
 800c53e:	6010      	str	r0, [r2, #0]
 800c540:	7019      	strb	r1, [r3, #0]
 800c542:	4608      	mov	r0, r1
 800c544:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c548:	4770      	bx	lr

0800c54a <__sfputs_r>:
 800c54a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c54c:	4606      	mov	r6, r0
 800c54e:	460f      	mov	r7, r1
 800c550:	4614      	mov	r4, r2
 800c552:	18d5      	adds	r5, r2, r3
 800c554:	42ac      	cmp	r4, r5
 800c556:	d101      	bne.n	800c55c <__sfputs_r+0x12>
 800c558:	2000      	movs	r0, #0
 800c55a:	e007      	b.n	800c56c <__sfputs_r+0x22>
 800c55c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c560:	463a      	mov	r2, r7
 800c562:	4630      	mov	r0, r6
 800c564:	f7ff ffda 	bl	800c51c <__sfputc_r>
 800c568:	1c43      	adds	r3, r0, #1
 800c56a:	d1f3      	bne.n	800c554 <__sfputs_r+0xa>
 800c56c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c570 <_vfiprintf_r>:
 800c570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c574:	460d      	mov	r5, r1
 800c576:	b09d      	sub	sp, #116	; 0x74
 800c578:	4614      	mov	r4, r2
 800c57a:	4698      	mov	r8, r3
 800c57c:	4606      	mov	r6, r0
 800c57e:	b118      	cbz	r0, 800c588 <_vfiprintf_r+0x18>
 800c580:	6983      	ldr	r3, [r0, #24]
 800c582:	b90b      	cbnz	r3, 800c588 <_vfiprintf_r+0x18>
 800c584:	f000 fb06 	bl	800cb94 <__sinit>
 800c588:	4b89      	ldr	r3, [pc, #548]	; (800c7b0 <_vfiprintf_r+0x240>)
 800c58a:	429d      	cmp	r5, r3
 800c58c:	d11b      	bne.n	800c5c6 <_vfiprintf_r+0x56>
 800c58e:	6875      	ldr	r5, [r6, #4]
 800c590:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c592:	07d9      	lsls	r1, r3, #31
 800c594:	d405      	bmi.n	800c5a2 <_vfiprintf_r+0x32>
 800c596:	89ab      	ldrh	r3, [r5, #12]
 800c598:	059a      	lsls	r2, r3, #22
 800c59a:	d402      	bmi.n	800c5a2 <_vfiprintf_r+0x32>
 800c59c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c59e:	f000 fb97 	bl	800ccd0 <__retarget_lock_acquire_recursive>
 800c5a2:	89ab      	ldrh	r3, [r5, #12]
 800c5a4:	071b      	lsls	r3, r3, #28
 800c5a6:	d501      	bpl.n	800c5ac <_vfiprintf_r+0x3c>
 800c5a8:	692b      	ldr	r3, [r5, #16]
 800c5aa:	b9eb      	cbnz	r3, 800c5e8 <_vfiprintf_r+0x78>
 800c5ac:	4629      	mov	r1, r5
 800c5ae:	4630      	mov	r0, r6
 800c5b0:	f000 f960 	bl	800c874 <__swsetup_r>
 800c5b4:	b1c0      	cbz	r0, 800c5e8 <_vfiprintf_r+0x78>
 800c5b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5b8:	07dc      	lsls	r4, r3, #31
 800c5ba:	d50e      	bpl.n	800c5da <_vfiprintf_r+0x6a>
 800c5bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c5c0:	b01d      	add	sp, #116	; 0x74
 800c5c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5c6:	4b7b      	ldr	r3, [pc, #492]	; (800c7b4 <_vfiprintf_r+0x244>)
 800c5c8:	429d      	cmp	r5, r3
 800c5ca:	d101      	bne.n	800c5d0 <_vfiprintf_r+0x60>
 800c5cc:	68b5      	ldr	r5, [r6, #8]
 800c5ce:	e7df      	b.n	800c590 <_vfiprintf_r+0x20>
 800c5d0:	4b79      	ldr	r3, [pc, #484]	; (800c7b8 <_vfiprintf_r+0x248>)
 800c5d2:	429d      	cmp	r5, r3
 800c5d4:	bf08      	it	eq
 800c5d6:	68f5      	ldreq	r5, [r6, #12]
 800c5d8:	e7da      	b.n	800c590 <_vfiprintf_r+0x20>
 800c5da:	89ab      	ldrh	r3, [r5, #12]
 800c5dc:	0598      	lsls	r0, r3, #22
 800c5de:	d4ed      	bmi.n	800c5bc <_vfiprintf_r+0x4c>
 800c5e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5e2:	f000 fb76 	bl	800ccd2 <__retarget_lock_release_recursive>
 800c5e6:	e7e9      	b.n	800c5bc <_vfiprintf_r+0x4c>
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	9309      	str	r3, [sp, #36]	; 0x24
 800c5ec:	2320      	movs	r3, #32
 800c5ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c5f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5f6:	2330      	movs	r3, #48	; 0x30
 800c5f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c7bc <_vfiprintf_r+0x24c>
 800c5fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c600:	f04f 0901 	mov.w	r9, #1
 800c604:	4623      	mov	r3, r4
 800c606:	469a      	mov	sl, r3
 800c608:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c60c:	b10a      	cbz	r2, 800c612 <_vfiprintf_r+0xa2>
 800c60e:	2a25      	cmp	r2, #37	; 0x25
 800c610:	d1f9      	bne.n	800c606 <_vfiprintf_r+0x96>
 800c612:	ebba 0b04 	subs.w	fp, sl, r4
 800c616:	d00b      	beq.n	800c630 <_vfiprintf_r+0xc0>
 800c618:	465b      	mov	r3, fp
 800c61a:	4622      	mov	r2, r4
 800c61c:	4629      	mov	r1, r5
 800c61e:	4630      	mov	r0, r6
 800c620:	f7ff ff93 	bl	800c54a <__sfputs_r>
 800c624:	3001      	adds	r0, #1
 800c626:	f000 80aa 	beq.w	800c77e <_vfiprintf_r+0x20e>
 800c62a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c62c:	445a      	add	r2, fp
 800c62e:	9209      	str	r2, [sp, #36]	; 0x24
 800c630:	f89a 3000 	ldrb.w	r3, [sl]
 800c634:	2b00      	cmp	r3, #0
 800c636:	f000 80a2 	beq.w	800c77e <_vfiprintf_r+0x20e>
 800c63a:	2300      	movs	r3, #0
 800c63c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c640:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c644:	f10a 0a01 	add.w	sl, sl, #1
 800c648:	9304      	str	r3, [sp, #16]
 800c64a:	9307      	str	r3, [sp, #28]
 800c64c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c650:	931a      	str	r3, [sp, #104]	; 0x68
 800c652:	4654      	mov	r4, sl
 800c654:	2205      	movs	r2, #5
 800c656:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c65a:	4858      	ldr	r0, [pc, #352]	; (800c7bc <_vfiprintf_r+0x24c>)
 800c65c:	f7f3 fdd0 	bl	8000200 <memchr>
 800c660:	9a04      	ldr	r2, [sp, #16]
 800c662:	b9d8      	cbnz	r0, 800c69c <_vfiprintf_r+0x12c>
 800c664:	06d1      	lsls	r1, r2, #27
 800c666:	bf44      	itt	mi
 800c668:	2320      	movmi	r3, #32
 800c66a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c66e:	0713      	lsls	r3, r2, #28
 800c670:	bf44      	itt	mi
 800c672:	232b      	movmi	r3, #43	; 0x2b
 800c674:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c678:	f89a 3000 	ldrb.w	r3, [sl]
 800c67c:	2b2a      	cmp	r3, #42	; 0x2a
 800c67e:	d015      	beq.n	800c6ac <_vfiprintf_r+0x13c>
 800c680:	9a07      	ldr	r2, [sp, #28]
 800c682:	4654      	mov	r4, sl
 800c684:	2000      	movs	r0, #0
 800c686:	f04f 0c0a 	mov.w	ip, #10
 800c68a:	4621      	mov	r1, r4
 800c68c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c690:	3b30      	subs	r3, #48	; 0x30
 800c692:	2b09      	cmp	r3, #9
 800c694:	d94e      	bls.n	800c734 <_vfiprintf_r+0x1c4>
 800c696:	b1b0      	cbz	r0, 800c6c6 <_vfiprintf_r+0x156>
 800c698:	9207      	str	r2, [sp, #28]
 800c69a:	e014      	b.n	800c6c6 <_vfiprintf_r+0x156>
 800c69c:	eba0 0308 	sub.w	r3, r0, r8
 800c6a0:	fa09 f303 	lsl.w	r3, r9, r3
 800c6a4:	4313      	orrs	r3, r2
 800c6a6:	9304      	str	r3, [sp, #16]
 800c6a8:	46a2      	mov	sl, r4
 800c6aa:	e7d2      	b.n	800c652 <_vfiprintf_r+0xe2>
 800c6ac:	9b03      	ldr	r3, [sp, #12]
 800c6ae:	1d19      	adds	r1, r3, #4
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	9103      	str	r1, [sp, #12]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	bfbb      	ittet	lt
 800c6b8:	425b      	neglt	r3, r3
 800c6ba:	f042 0202 	orrlt.w	r2, r2, #2
 800c6be:	9307      	strge	r3, [sp, #28]
 800c6c0:	9307      	strlt	r3, [sp, #28]
 800c6c2:	bfb8      	it	lt
 800c6c4:	9204      	strlt	r2, [sp, #16]
 800c6c6:	7823      	ldrb	r3, [r4, #0]
 800c6c8:	2b2e      	cmp	r3, #46	; 0x2e
 800c6ca:	d10c      	bne.n	800c6e6 <_vfiprintf_r+0x176>
 800c6cc:	7863      	ldrb	r3, [r4, #1]
 800c6ce:	2b2a      	cmp	r3, #42	; 0x2a
 800c6d0:	d135      	bne.n	800c73e <_vfiprintf_r+0x1ce>
 800c6d2:	9b03      	ldr	r3, [sp, #12]
 800c6d4:	1d1a      	adds	r2, r3, #4
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	9203      	str	r2, [sp, #12]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	bfb8      	it	lt
 800c6de:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c6e2:	3402      	adds	r4, #2
 800c6e4:	9305      	str	r3, [sp, #20]
 800c6e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c7cc <_vfiprintf_r+0x25c>
 800c6ea:	7821      	ldrb	r1, [r4, #0]
 800c6ec:	2203      	movs	r2, #3
 800c6ee:	4650      	mov	r0, sl
 800c6f0:	f7f3 fd86 	bl	8000200 <memchr>
 800c6f4:	b140      	cbz	r0, 800c708 <_vfiprintf_r+0x198>
 800c6f6:	2340      	movs	r3, #64	; 0x40
 800c6f8:	eba0 000a 	sub.w	r0, r0, sl
 800c6fc:	fa03 f000 	lsl.w	r0, r3, r0
 800c700:	9b04      	ldr	r3, [sp, #16]
 800c702:	4303      	orrs	r3, r0
 800c704:	3401      	adds	r4, #1
 800c706:	9304      	str	r3, [sp, #16]
 800c708:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c70c:	482c      	ldr	r0, [pc, #176]	; (800c7c0 <_vfiprintf_r+0x250>)
 800c70e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c712:	2206      	movs	r2, #6
 800c714:	f7f3 fd74 	bl	8000200 <memchr>
 800c718:	2800      	cmp	r0, #0
 800c71a:	d03f      	beq.n	800c79c <_vfiprintf_r+0x22c>
 800c71c:	4b29      	ldr	r3, [pc, #164]	; (800c7c4 <_vfiprintf_r+0x254>)
 800c71e:	bb1b      	cbnz	r3, 800c768 <_vfiprintf_r+0x1f8>
 800c720:	9b03      	ldr	r3, [sp, #12]
 800c722:	3307      	adds	r3, #7
 800c724:	f023 0307 	bic.w	r3, r3, #7
 800c728:	3308      	adds	r3, #8
 800c72a:	9303      	str	r3, [sp, #12]
 800c72c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c72e:	443b      	add	r3, r7
 800c730:	9309      	str	r3, [sp, #36]	; 0x24
 800c732:	e767      	b.n	800c604 <_vfiprintf_r+0x94>
 800c734:	fb0c 3202 	mla	r2, ip, r2, r3
 800c738:	460c      	mov	r4, r1
 800c73a:	2001      	movs	r0, #1
 800c73c:	e7a5      	b.n	800c68a <_vfiprintf_r+0x11a>
 800c73e:	2300      	movs	r3, #0
 800c740:	3401      	adds	r4, #1
 800c742:	9305      	str	r3, [sp, #20]
 800c744:	4619      	mov	r1, r3
 800c746:	f04f 0c0a 	mov.w	ip, #10
 800c74a:	4620      	mov	r0, r4
 800c74c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c750:	3a30      	subs	r2, #48	; 0x30
 800c752:	2a09      	cmp	r2, #9
 800c754:	d903      	bls.n	800c75e <_vfiprintf_r+0x1ee>
 800c756:	2b00      	cmp	r3, #0
 800c758:	d0c5      	beq.n	800c6e6 <_vfiprintf_r+0x176>
 800c75a:	9105      	str	r1, [sp, #20]
 800c75c:	e7c3      	b.n	800c6e6 <_vfiprintf_r+0x176>
 800c75e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c762:	4604      	mov	r4, r0
 800c764:	2301      	movs	r3, #1
 800c766:	e7f0      	b.n	800c74a <_vfiprintf_r+0x1da>
 800c768:	ab03      	add	r3, sp, #12
 800c76a:	9300      	str	r3, [sp, #0]
 800c76c:	462a      	mov	r2, r5
 800c76e:	4b16      	ldr	r3, [pc, #88]	; (800c7c8 <_vfiprintf_r+0x258>)
 800c770:	a904      	add	r1, sp, #16
 800c772:	4630      	mov	r0, r6
 800c774:	f7fd fee8 	bl	800a548 <_printf_float>
 800c778:	4607      	mov	r7, r0
 800c77a:	1c78      	adds	r0, r7, #1
 800c77c:	d1d6      	bne.n	800c72c <_vfiprintf_r+0x1bc>
 800c77e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c780:	07d9      	lsls	r1, r3, #31
 800c782:	d405      	bmi.n	800c790 <_vfiprintf_r+0x220>
 800c784:	89ab      	ldrh	r3, [r5, #12]
 800c786:	059a      	lsls	r2, r3, #22
 800c788:	d402      	bmi.n	800c790 <_vfiprintf_r+0x220>
 800c78a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c78c:	f000 faa1 	bl	800ccd2 <__retarget_lock_release_recursive>
 800c790:	89ab      	ldrh	r3, [r5, #12]
 800c792:	065b      	lsls	r3, r3, #25
 800c794:	f53f af12 	bmi.w	800c5bc <_vfiprintf_r+0x4c>
 800c798:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c79a:	e711      	b.n	800c5c0 <_vfiprintf_r+0x50>
 800c79c:	ab03      	add	r3, sp, #12
 800c79e:	9300      	str	r3, [sp, #0]
 800c7a0:	462a      	mov	r2, r5
 800c7a2:	4b09      	ldr	r3, [pc, #36]	; (800c7c8 <_vfiprintf_r+0x258>)
 800c7a4:	a904      	add	r1, sp, #16
 800c7a6:	4630      	mov	r0, r6
 800c7a8:	f7fe f972 	bl	800aa90 <_printf_i>
 800c7ac:	e7e4      	b.n	800c778 <_vfiprintf_r+0x208>
 800c7ae:	bf00      	nop
 800c7b0:	0800d548 	.word	0x0800d548
 800c7b4:	0800d568 	.word	0x0800d568
 800c7b8:	0800d528 	.word	0x0800d528
 800c7bc:	0800d514 	.word	0x0800d514
 800c7c0:	0800d51e 	.word	0x0800d51e
 800c7c4:	0800a549 	.word	0x0800a549
 800c7c8:	0800c54b 	.word	0x0800c54b
 800c7cc:	0800d51a 	.word	0x0800d51a

0800c7d0 <__swbuf_r>:
 800c7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7d2:	460e      	mov	r6, r1
 800c7d4:	4614      	mov	r4, r2
 800c7d6:	4605      	mov	r5, r0
 800c7d8:	b118      	cbz	r0, 800c7e2 <__swbuf_r+0x12>
 800c7da:	6983      	ldr	r3, [r0, #24]
 800c7dc:	b90b      	cbnz	r3, 800c7e2 <__swbuf_r+0x12>
 800c7de:	f000 f9d9 	bl	800cb94 <__sinit>
 800c7e2:	4b21      	ldr	r3, [pc, #132]	; (800c868 <__swbuf_r+0x98>)
 800c7e4:	429c      	cmp	r4, r3
 800c7e6:	d12b      	bne.n	800c840 <__swbuf_r+0x70>
 800c7e8:	686c      	ldr	r4, [r5, #4]
 800c7ea:	69a3      	ldr	r3, [r4, #24]
 800c7ec:	60a3      	str	r3, [r4, #8]
 800c7ee:	89a3      	ldrh	r3, [r4, #12]
 800c7f0:	071a      	lsls	r2, r3, #28
 800c7f2:	d52f      	bpl.n	800c854 <__swbuf_r+0x84>
 800c7f4:	6923      	ldr	r3, [r4, #16]
 800c7f6:	b36b      	cbz	r3, 800c854 <__swbuf_r+0x84>
 800c7f8:	6923      	ldr	r3, [r4, #16]
 800c7fa:	6820      	ldr	r0, [r4, #0]
 800c7fc:	1ac0      	subs	r0, r0, r3
 800c7fe:	6963      	ldr	r3, [r4, #20]
 800c800:	b2f6      	uxtb	r6, r6
 800c802:	4283      	cmp	r3, r0
 800c804:	4637      	mov	r7, r6
 800c806:	dc04      	bgt.n	800c812 <__swbuf_r+0x42>
 800c808:	4621      	mov	r1, r4
 800c80a:	4628      	mov	r0, r5
 800c80c:	f000 f92e 	bl	800ca6c <_fflush_r>
 800c810:	bb30      	cbnz	r0, 800c860 <__swbuf_r+0x90>
 800c812:	68a3      	ldr	r3, [r4, #8]
 800c814:	3b01      	subs	r3, #1
 800c816:	60a3      	str	r3, [r4, #8]
 800c818:	6823      	ldr	r3, [r4, #0]
 800c81a:	1c5a      	adds	r2, r3, #1
 800c81c:	6022      	str	r2, [r4, #0]
 800c81e:	701e      	strb	r6, [r3, #0]
 800c820:	6963      	ldr	r3, [r4, #20]
 800c822:	3001      	adds	r0, #1
 800c824:	4283      	cmp	r3, r0
 800c826:	d004      	beq.n	800c832 <__swbuf_r+0x62>
 800c828:	89a3      	ldrh	r3, [r4, #12]
 800c82a:	07db      	lsls	r3, r3, #31
 800c82c:	d506      	bpl.n	800c83c <__swbuf_r+0x6c>
 800c82e:	2e0a      	cmp	r6, #10
 800c830:	d104      	bne.n	800c83c <__swbuf_r+0x6c>
 800c832:	4621      	mov	r1, r4
 800c834:	4628      	mov	r0, r5
 800c836:	f000 f919 	bl	800ca6c <_fflush_r>
 800c83a:	b988      	cbnz	r0, 800c860 <__swbuf_r+0x90>
 800c83c:	4638      	mov	r0, r7
 800c83e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c840:	4b0a      	ldr	r3, [pc, #40]	; (800c86c <__swbuf_r+0x9c>)
 800c842:	429c      	cmp	r4, r3
 800c844:	d101      	bne.n	800c84a <__swbuf_r+0x7a>
 800c846:	68ac      	ldr	r4, [r5, #8]
 800c848:	e7cf      	b.n	800c7ea <__swbuf_r+0x1a>
 800c84a:	4b09      	ldr	r3, [pc, #36]	; (800c870 <__swbuf_r+0xa0>)
 800c84c:	429c      	cmp	r4, r3
 800c84e:	bf08      	it	eq
 800c850:	68ec      	ldreq	r4, [r5, #12]
 800c852:	e7ca      	b.n	800c7ea <__swbuf_r+0x1a>
 800c854:	4621      	mov	r1, r4
 800c856:	4628      	mov	r0, r5
 800c858:	f000 f80c 	bl	800c874 <__swsetup_r>
 800c85c:	2800      	cmp	r0, #0
 800c85e:	d0cb      	beq.n	800c7f8 <__swbuf_r+0x28>
 800c860:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c864:	e7ea      	b.n	800c83c <__swbuf_r+0x6c>
 800c866:	bf00      	nop
 800c868:	0800d548 	.word	0x0800d548
 800c86c:	0800d568 	.word	0x0800d568
 800c870:	0800d528 	.word	0x0800d528

0800c874 <__swsetup_r>:
 800c874:	4b32      	ldr	r3, [pc, #200]	; (800c940 <__swsetup_r+0xcc>)
 800c876:	b570      	push	{r4, r5, r6, lr}
 800c878:	681d      	ldr	r5, [r3, #0]
 800c87a:	4606      	mov	r6, r0
 800c87c:	460c      	mov	r4, r1
 800c87e:	b125      	cbz	r5, 800c88a <__swsetup_r+0x16>
 800c880:	69ab      	ldr	r3, [r5, #24]
 800c882:	b913      	cbnz	r3, 800c88a <__swsetup_r+0x16>
 800c884:	4628      	mov	r0, r5
 800c886:	f000 f985 	bl	800cb94 <__sinit>
 800c88a:	4b2e      	ldr	r3, [pc, #184]	; (800c944 <__swsetup_r+0xd0>)
 800c88c:	429c      	cmp	r4, r3
 800c88e:	d10f      	bne.n	800c8b0 <__swsetup_r+0x3c>
 800c890:	686c      	ldr	r4, [r5, #4]
 800c892:	89a3      	ldrh	r3, [r4, #12]
 800c894:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c898:	0719      	lsls	r1, r3, #28
 800c89a:	d42c      	bmi.n	800c8f6 <__swsetup_r+0x82>
 800c89c:	06dd      	lsls	r5, r3, #27
 800c89e:	d411      	bmi.n	800c8c4 <__swsetup_r+0x50>
 800c8a0:	2309      	movs	r3, #9
 800c8a2:	6033      	str	r3, [r6, #0]
 800c8a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c8a8:	81a3      	strh	r3, [r4, #12]
 800c8aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c8ae:	e03e      	b.n	800c92e <__swsetup_r+0xba>
 800c8b0:	4b25      	ldr	r3, [pc, #148]	; (800c948 <__swsetup_r+0xd4>)
 800c8b2:	429c      	cmp	r4, r3
 800c8b4:	d101      	bne.n	800c8ba <__swsetup_r+0x46>
 800c8b6:	68ac      	ldr	r4, [r5, #8]
 800c8b8:	e7eb      	b.n	800c892 <__swsetup_r+0x1e>
 800c8ba:	4b24      	ldr	r3, [pc, #144]	; (800c94c <__swsetup_r+0xd8>)
 800c8bc:	429c      	cmp	r4, r3
 800c8be:	bf08      	it	eq
 800c8c0:	68ec      	ldreq	r4, [r5, #12]
 800c8c2:	e7e6      	b.n	800c892 <__swsetup_r+0x1e>
 800c8c4:	0758      	lsls	r0, r3, #29
 800c8c6:	d512      	bpl.n	800c8ee <__swsetup_r+0x7a>
 800c8c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c8ca:	b141      	cbz	r1, 800c8de <__swsetup_r+0x6a>
 800c8cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8d0:	4299      	cmp	r1, r3
 800c8d2:	d002      	beq.n	800c8da <__swsetup_r+0x66>
 800c8d4:	4630      	mov	r0, r6
 800c8d6:	f7fd fcb7 	bl	800a248 <_free_r>
 800c8da:	2300      	movs	r3, #0
 800c8dc:	6363      	str	r3, [r4, #52]	; 0x34
 800c8de:	89a3      	ldrh	r3, [r4, #12]
 800c8e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c8e4:	81a3      	strh	r3, [r4, #12]
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	6063      	str	r3, [r4, #4]
 800c8ea:	6923      	ldr	r3, [r4, #16]
 800c8ec:	6023      	str	r3, [r4, #0]
 800c8ee:	89a3      	ldrh	r3, [r4, #12]
 800c8f0:	f043 0308 	orr.w	r3, r3, #8
 800c8f4:	81a3      	strh	r3, [r4, #12]
 800c8f6:	6923      	ldr	r3, [r4, #16]
 800c8f8:	b94b      	cbnz	r3, 800c90e <__swsetup_r+0x9a>
 800c8fa:	89a3      	ldrh	r3, [r4, #12]
 800c8fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c900:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c904:	d003      	beq.n	800c90e <__swsetup_r+0x9a>
 800c906:	4621      	mov	r1, r4
 800c908:	4630      	mov	r0, r6
 800c90a:	f000 fa09 	bl	800cd20 <__smakebuf_r>
 800c90e:	89a0      	ldrh	r0, [r4, #12]
 800c910:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c914:	f010 0301 	ands.w	r3, r0, #1
 800c918:	d00a      	beq.n	800c930 <__swsetup_r+0xbc>
 800c91a:	2300      	movs	r3, #0
 800c91c:	60a3      	str	r3, [r4, #8]
 800c91e:	6963      	ldr	r3, [r4, #20]
 800c920:	425b      	negs	r3, r3
 800c922:	61a3      	str	r3, [r4, #24]
 800c924:	6923      	ldr	r3, [r4, #16]
 800c926:	b943      	cbnz	r3, 800c93a <__swsetup_r+0xc6>
 800c928:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c92c:	d1ba      	bne.n	800c8a4 <__swsetup_r+0x30>
 800c92e:	bd70      	pop	{r4, r5, r6, pc}
 800c930:	0781      	lsls	r1, r0, #30
 800c932:	bf58      	it	pl
 800c934:	6963      	ldrpl	r3, [r4, #20]
 800c936:	60a3      	str	r3, [r4, #8]
 800c938:	e7f4      	b.n	800c924 <__swsetup_r+0xb0>
 800c93a:	2000      	movs	r0, #0
 800c93c:	e7f7      	b.n	800c92e <__swsetup_r+0xba>
 800c93e:	bf00      	nop
 800c940:	20000044 	.word	0x20000044
 800c944:	0800d548 	.word	0x0800d548
 800c948:	0800d568 	.word	0x0800d568
 800c94c:	0800d528 	.word	0x0800d528

0800c950 <abort>:
 800c950:	b508      	push	{r3, lr}
 800c952:	2006      	movs	r0, #6
 800c954:	f000 faa8 	bl	800cea8 <raise>
 800c958:	2001      	movs	r0, #1
 800c95a:	f7fa fb53 	bl	8007004 <_exit>
	...

0800c960 <__sflush_r>:
 800c960:	898a      	ldrh	r2, [r1, #12]
 800c962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c966:	4605      	mov	r5, r0
 800c968:	0710      	lsls	r0, r2, #28
 800c96a:	460c      	mov	r4, r1
 800c96c:	d458      	bmi.n	800ca20 <__sflush_r+0xc0>
 800c96e:	684b      	ldr	r3, [r1, #4]
 800c970:	2b00      	cmp	r3, #0
 800c972:	dc05      	bgt.n	800c980 <__sflush_r+0x20>
 800c974:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c976:	2b00      	cmp	r3, #0
 800c978:	dc02      	bgt.n	800c980 <__sflush_r+0x20>
 800c97a:	2000      	movs	r0, #0
 800c97c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c980:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c982:	2e00      	cmp	r6, #0
 800c984:	d0f9      	beq.n	800c97a <__sflush_r+0x1a>
 800c986:	2300      	movs	r3, #0
 800c988:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c98c:	682f      	ldr	r7, [r5, #0]
 800c98e:	602b      	str	r3, [r5, #0]
 800c990:	d032      	beq.n	800c9f8 <__sflush_r+0x98>
 800c992:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c994:	89a3      	ldrh	r3, [r4, #12]
 800c996:	075a      	lsls	r2, r3, #29
 800c998:	d505      	bpl.n	800c9a6 <__sflush_r+0x46>
 800c99a:	6863      	ldr	r3, [r4, #4]
 800c99c:	1ac0      	subs	r0, r0, r3
 800c99e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c9a0:	b10b      	cbz	r3, 800c9a6 <__sflush_r+0x46>
 800c9a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c9a4:	1ac0      	subs	r0, r0, r3
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	4602      	mov	r2, r0
 800c9aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c9ac:	6a21      	ldr	r1, [r4, #32]
 800c9ae:	4628      	mov	r0, r5
 800c9b0:	47b0      	blx	r6
 800c9b2:	1c43      	adds	r3, r0, #1
 800c9b4:	89a3      	ldrh	r3, [r4, #12]
 800c9b6:	d106      	bne.n	800c9c6 <__sflush_r+0x66>
 800c9b8:	6829      	ldr	r1, [r5, #0]
 800c9ba:	291d      	cmp	r1, #29
 800c9bc:	d82c      	bhi.n	800ca18 <__sflush_r+0xb8>
 800c9be:	4a2a      	ldr	r2, [pc, #168]	; (800ca68 <__sflush_r+0x108>)
 800c9c0:	40ca      	lsrs	r2, r1
 800c9c2:	07d6      	lsls	r6, r2, #31
 800c9c4:	d528      	bpl.n	800ca18 <__sflush_r+0xb8>
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	6062      	str	r2, [r4, #4]
 800c9ca:	04d9      	lsls	r1, r3, #19
 800c9cc:	6922      	ldr	r2, [r4, #16]
 800c9ce:	6022      	str	r2, [r4, #0]
 800c9d0:	d504      	bpl.n	800c9dc <__sflush_r+0x7c>
 800c9d2:	1c42      	adds	r2, r0, #1
 800c9d4:	d101      	bne.n	800c9da <__sflush_r+0x7a>
 800c9d6:	682b      	ldr	r3, [r5, #0]
 800c9d8:	b903      	cbnz	r3, 800c9dc <__sflush_r+0x7c>
 800c9da:	6560      	str	r0, [r4, #84]	; 0x54
 800c9dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c9de:	602f      	str	r7, [r5, #0]
 800c9e0:	2900      	cmp	r1, #0
 800c9e2:	d0ca      	beq.n	800c97a <__sflush_r+0x1a>
 800c9e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c9e8:	4299      	cmp	r1, r3
 800c9ea:	d002      	beq.n	800c9f2 <__sflush_r+0x92>
 800c9ec:	4628      	mov	r0, r5
 800c9ee:	f7fd fc2b 	bl	800a248 <_free_r>
 800c9f2:	2000      	movs	r0, #0
 800c9f4:	6360      	str	r0, [r4, #52]	; 0x34
 800c9f6:	e7c1      	b.n	800c97c <__sflush_r+0x1c>
 800c9f8:	6a21      	ldr	r1, [r4, #32]
 800c9fa:	2301      	movs	r3, #1
 800c9fc:	4628      	mov	r0, r5
 800c9fe:	47b0      	blx	r6
 800ca00:	1c41      	adds	r1, r0, #1
 800ca02:	d1c7      	bne.n	800c994 <__sflush_r+0x34>
 800ca04:	682b      	ldr	r3, [r5, #0]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d0c4      	beq.n	800c994 <__sflush_r+0x34>
 800ca0a:	2b1d      	cmp	r3, #29
 800ca0c:	d001      	beq.n	800ca12 <__sflush_r+0xb2>
 800ca0e:	2b16      	cmp	r3, #22
 800ca10:	d101      	bne.n	800ca16 <__sflush_r+0xb6>
 800ca12:	602f      	str	r7, [r5, #0]
 800ca14:	e7b1      	b.n	800c97a <__sflush_r+0x1a>
 800ca16:	89a3      	ldrh	r3, [r4, #12]
 800ca18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca1c:	81a3      	strh	r3, [r4, #12]
 800ca1e:	e7ad      	b.n	800c97c <__sflush_r+0x1c>
 800ca20:	690f      	ldr	r7, [r1, #16]
 800ca22:	2f00      	cmp	r7, #0
 800ca24:	d0a9      	beq.n	800c97a <__sflush_r+0x1a>
 800ca26:	0793      	lsls	r3, r2, #30
 800ca28:	680e      	ldr	r6, [r1, #0]
 800ca2a:	bf08      	it	eq
 800ca2c:	694b      	ldreq	r3, [r1, #20]
 800ca2e:	600f      	str	r7, [r1, #0]
 800ca30:	bf18      	it	ne
 800ca32:	2300      	movne	r3, #0
 800ca34:	eba6 0807 	sub.w	r8, r6, r7
 800ca38:	608b      	str	r3, [r1, #8]
 800ca3a:	f1b8 0f00 	cmp.w	r8, #0
 800ca3e:	dd9c      	ble.n	800c97a <__sflush_r+0x1a>
 800ca40:	6a21      	ldr	r1, [r4, #32]
 800ca42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ca44:	4643      	mov	r3, r8
 800ca46:	463a      	mov	r2, r7
 800ca48:	4628      	mov	r0, r5
 800ca4a:	47b0      	blx	r6
 800ca4c:	2800      	cmp	r0, #0
 800ca4e:	dc06      	bgt.n	800ca5e <__sflush_r+0xfe>
 800ca50:	89a3      	ldrh	r3, [r4, #12]
 800ca52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca56:	81a3      	strh	r3, [r4, #12]
 800ca58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ca5c:	e78e      	b.n	800c97c <__sflush_r+0x1c>
 800ca5e:	4407      	add	r7, r0
 800ca60:	eba8 0800 	sub.w	r8, r8, r0
 800ca64:	e7e9      	b.n	800ca3a <__sflush_r+0xda>
 800ca66:	bf00      	nop
 800ca68:	20400001 	.word	0x20400001

0800ca6c <_fflush_r>:
 800ca6c:	b538      	push	{r3, r4, r5, lr}
 800ca6e:	690b      	ldr	r3, [r1, #16]
 800ca70:	4605      	mov	r5, r0
 800ca72:	460c      	mov	r4, r1
 800ca74:	b913      	cbnz	r3, 800ca7c <_fflush_r+0x10>
 800ca76:	2500      	movs	r5, #0
 800ca78:	4628      	mov	r0, r5
 800ca7a:	bd38      	pop	{r3, r4, r5, pc}
 800ca7c:	b118      	cbz	r0, 800ca86 <_fflush_r+0x1a>
 800ca7e:	6983      	ldr	r3, [r0, #24]
 800ca80:	b90b      	cbnz	r3, 800ca86 <_fflush_r+0x1a>
 800ca82:	f000 f887 	bl	800cb94 <__sinit>
 800ca86:	4b14      	ldr	r3, [pc, #80]	; (800cad8 <_fflush_r+0x6c>)
 800ca88:	429c      	cmp	r4, r3
 800ca8a:	d11b      	bne.n	800cac4 <_fflush_r+0x58>
 800ca8c:	686c      	ldr	r4, [r5, #4]
 800ca8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d0ef      	beq.n	800ca76 <_fflush_r+0xa>
 800ca96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ca98:	07d0      	lsls	r0, r2, #31
 800ca9a:	d404      	bmi.n	800caa6 <_fflush_r+0x3a>
 800ca9c:	0599      	lsls	r1, r3, #22
 800ca9e:	d402      	bmi.n	800caa6 <_fflush_r+0x3a>
 800caa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800caa2:	f000 f915 	bl	800ccd0 <__retarget_lock_acquire_recursive>
 800caa6:	4628      	mov	r0, r5
 800caa8:	4621      	mov	r1, r4
 800caaa:	f7ff ff59 	bl	800c960 <__sflush_r>
 800caae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cab0:	07da      	lsls	r2, r3, #31
 800cab2:	4605      	mov	r5, r0
 800cab4:	d4e0      	bmi.n	800ca78 <_fflush_r+0xc>
 800cab6:	89a3      	ldrh	r3, [r4, #12]
 800cab8:	059b      	lsls	r3, r3, #22
 800caba:	d4dd      	bmi.n	800ca78 <_fflush_r+0xc>
 800cabc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cabe:	f000 f908 	bl	800ccd2 <__retarget_lock_release_recursive>
 800cac2:	e7d9      	b.n	800ca78 <_fflush_r+0xc>
 800cac4:	4b05      	ldr	r3, [pc, #20]	; (800cadc <_fflush_r+0x70>)
 800cac6:	429c      	cmp	r4, r3
 800cac8:	d101      	bne.n	800cace <_fflush_r+0x62>
 800caca:	68ac      	ldr	r4, [r5, #8]
 800cacc:	e7df      	b.n	800ca8e <_fflush_r+0x22>
 800cace:	4b04      	ldr	r3, [pc, #16]	; (800cae0 <_fflush_r+0x74>)
 800cad0:	429c      	cmp	r4, r3
 800cad2:	bf08      	it	eq
 800cad4:	68ec      	ldreq	r4, [r5, #12]
 800cad6:	e7da      	b.n	800ca8e <_fflush_r+0x22>
 800cad8:	0800d548 	.word	0x0800d548
 800cadc:	0800d568 	.word	0x0800d568
 800cae0:	0800d528 	.word	0x0800d528

0800cae4 <std>:
 800cae4:	2300      	movs	r3, #0
 800cae6:	b510      	push	{r4, lr}
 800cae8:	4604      	mov	r4, r0
 800caea:	e9c0 3300 	strd	r3, r3, [r0]
 800caee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800caf2:	6083      	str	r3, [r0, #8]
 800caf4:	8181      	strh	r1, [r0, #12]
 800caf6:	6643      	str	r3, [r0, #100]	; 0x64
 800caf8:	81c2      	strh	r2, [r0, #14]
 800cafa:	6183      	str	r3, [r0, #24]
 800cafc:	4619      	mov	r1, r3
 800cafe:	2208      	movs	r2, #8
 800cb00:	305c      	adds	r0, #92	; 0x5c
 800cb02:	f7fd fb99 	bl	800a238 <memset>
 800cb06:	4b05      	ldr	r3, [pc, #20]	; (800cb1c <std+0x38>)
 800cb08:	6263      	str	r3, [r4, #36]	; 0x24
 800cb0a:	4b05      	ldr	r3, [pc, #20]	; (800cb20 <std+0x3c>)
 800cb0c:	62a3      	str	r3, [r4, #40]	; 0x28
 800cb0e:	4b05      	ldr	r3, [pc, #20]	; (800cb24 <std+0x40>)
 800cb10:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cb12:	4b05      	ldr	r3, [pc, #20]	; (800cb28 <std+0x44>)
 800cb14:	6224      	str	r4, [r4, #32]
 800cb16:	6323      	str	r3, [r4, #48]	; 0x30
 800cb18:	bd10      	pop	{r4, pc}
 800cb1a:	bf00      	nop
 800cb1c:	0800cee1 	.word	0x0800cee1
 800cb20:	0800cf03 	.word	0x0800cf03
 800cb24:	0800cf3b 	.word	0x0800cf3b
 800cb28:	0800cf5f 	.word	0x0800cf5f

0800cb2c <_cleanup_r>:
 800cb2c:	4901      	ldr	r1, [pc, #4]	; (800cb34 <_cleanup_r+0x8>)
 800cb2e:	f000 b8af 	b.w	800cc90 <_fwalk_reent>
 800cb32:	bf00      	nop
 800cb34:	0800ca6d 	.word	0x0800ca6d

0800cb38 <__sfmoreglue>:
 800cb38:	b570      	push	{r4, r5, r6, lr}
 800cb3a:	2268      	movs	r2, #104	; 0x68
 800cb3c:	1e4d      	subs	r5, r1, #1
 800cb3e:	4355      	muls	r5, r2
 800cb40:	460e      	mov	r6, r1
 800cb42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cb46:	f7fd fbeb 	bl	800a320 <_malloc_r>
 800cb4a:	4604      	mov	r4, r0
 800cb4c:	b140      	cbz	r0, 800cb60 <__sfmoreglue+0x28>
 800cb4e:	2100      	movs	r1, #0
 800cb50:	e9c0 1600 	strd	r1, r6, [r0]
 800cb54:	300c      	adds	r0, #12
 800cb56:	60a0      	str	r0, [r4, #8]
 800cb58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cb5c:	f7fd fb6c 	bl	800a238 <memset>
 800cb60:	4620      	mov	r0, r4
 800cb62:	bd70      	pop	{r4, r5, r6, pc}

0800cb64 <__sfp_lock_acquire>:
 800cb64:	4801      	ldr	r0, [pc, #4]	; (800cb6c <__sfp_lock_acquire+0x8>)
 800cb66:	f000 b8b3 	b.w	800ccd0 <__retarget_lock_acquire_recursive>
 800cb6a:	bf00      	nop
 800cb6c:	200005a5 	.word	0x200005a5

0800cb70 <__sfp_lock_release>:
 800cb70:	4801      	ldr	r0, [pc, #4]	; (800cb78 <__sfp_lock_release+0x8>)
 800cb72:	f000 b8ae 	b.w	800ccd2 <__retarget_lock_release_recursive>
 800cb76:	bf00      	nop
 800cb78:	200005a5 	.word	0x200005a5

0800cb7c <__sinit_lock_acquire>:
 800cb7c:	4801      	ldr	r0, [pc, #4]	; (800cb84 <__sinit_lock_acquire+0x8>)
 800cb7e:	f000 b8a7 	b.w	800ccd0 <__retarget_lock_acquire_recursive>
 800cb82:	bf00      	nop
 800cb84:	200005a6 	.word	0x200005a6

0800cb88 <__sinit_lock_release>:
 800cb88:	4801      	ldr	r0, [pc, #4]	; (800cb90 <__sinit_lock_release+0x8>)
 800cb8a:	f000 b8a2 	b.w	800ccd2 <__retarget_lock_release_recursive>
 800cb8e:	bf00      	nop
 800cb90:	200005a6 	.word	0x200005a6

0800cb94 <__sinit>:
 800cb94:	b510      	push	{r4, lr}
 800cb96:	4604      	mov	r4, r0
 800cb98:	f7ff fff0 	bl	800cb7c <__sinit_lock_acquire>
 800cb9c:	69a3      	ldr	r3, [r4, #24]
 800cb9e:	b11b      	cbz	r3, 800cba8 <__sinit+0x14>
 800cba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cba4:	f7ff bff0 	b.w	800cb88 <__sinit_lock_release>
 800cba8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cbac:	6523      	str	r3, [r4, #80]	; 0x50
 800cbae:	4b13      	ldr	r3, [pc, #76]	; (800cbfc <__sinit+0x68>)
 800cbb0:	4a13      	ldr	r2, [pc, #76]	; (800cc00 <__sinit+0x6c>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	62a2      	str	r2, [r4, #40]	; 0x28
 800cbb6:	42a3      	cmp	r3, r4
 800cbb8:	bf04      	itt	eq
 800cbba:	2301      	moveq	r3, #1
 800cbbc:	61a3      	streq	r3, [r4, #24]
 800cbbe:	4620      	mov	r0, r4
 800cbc0:	f000 f820 	bl	800cc04 <__sfp>
 800cbc4:	6060      	str	r0, [r4, #4]
 800cbc6:	4620      	mov	r0, r4
 800cbc8:	f000 f81c 	bl	800cc04 <__sfp>
 800cbcc:	60a0      	str	r0, [r4, #8]
 800cbce:	4620      	mov	r0, r4
 800cbd0:	f000 f818 	bl	800cc04 <__sfp>
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	60e0      	str	r0, [r4, #12]
 800cbd8:	2104      	movs	r1, #4
 800cbda:	6860      	ldr	r0, [r4, #4]
 800cbdc:	f7ff ff82 	bl	800cae4 <std>
 800cbe0:	68a0      	ldr	r0, [r4, #8]
 800cbe2:	2201      	movs	r2, #1
 800cbe4:	2109      	movs	r1, #9
 800cbe6:	f7ff ff7d 	bl	800cae4 <std>
 800cbea:	68e0      	ldr	r0, [r4, #12]
 800cbec:	2202      	movs	r2, #2
 800cbee:	2112      	movs	r1, #18
 800cbf0:	f7ff ff78 	bl	800cae4 <std>
 800cbf4:	2301      	movs	r3, #1
 800cbf6:	61a3      	str	r3, [r4, #24]
 800cbf8:	e7d2      	b.n	800cba0 <__sinit+0xc>
 800cbfa:	bf00      	nop
 800cbfc:	0800d25c 	.word	0x0800d25c
 800cc00:	0800cb2d 	.word	0x0800cb2d

0800cc04 <__sfp>:
 800cc04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc06:	4607      	mov	r7, r0
 800cc08:	f7ff ffac 	bl	800cb64 <__sfp_lock_acquire>
 800cc0c:	4b1e      	ldr	r3, [pc, #120]	; (800cc88 <__sfp+0x84>)
 800cc0e:	681e      	ldr	r6, [r3, #0]
 800cc10:	69b3      	ldr	r3, [r6, #24]
 800cc12:	b913      	cbnz	r3, 800cc1a <__sfp+0x16>
 800cc14:	4630      	mov	r0, r6
 800cc16:	f7ff ffbd 	bl	800cb94 <__sinit>
 800cc1a:	3648      	adds	r6, #72	; 0x48
 800cc1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cc20:	3b01      	subs	r3, #1
 800cc22:	d503      	bpl.n	800cc2c <__sfp+0x28>
 800cc24:	6833      	ldr	r3, [r6, #0]
 800cc26:	b30b      	cbz	r3, 800cc6c <__sfp+0x68>
 800cc28:	6836      	ldr	r6, [r6, #0]
 800cc2a:	e7f7      	b.n	800cc1c <__sfp+0x18>
 800cc2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cc30:	b9d5      	cbnz	r5, 800cc68 <__sfp+0x64>
 800cc32:	4b16      	ldr	r3, [pc, #88]	; (800cc8c <__sfp+0x88>)
 800cc34:	60e3      	str	r3, [r4, #12]
 800cc36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cc3a:	6665      	str	r5, [r4, #100]	; 0x64
 800cc3c:	f000 f847 	bl	800ccce <__retarget_lock_init_recursive>
 800cc40:	f7ff ff96 	bl	800cb70 <__sfp_lock_release>
 800cc44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cc48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cc4c:	6025      	str	r5, [r4, #0]
 800cc4e:	61a5      	str	r5, [r4, #24]
 800cc50:	2208      	movs	r2, #8
 800cc52:	4629      	mov	r1, r5
 800cc54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cc58:	f7fd faee 	bl	800a238 <memset>
 800cc5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cc60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cc64:	4620      	mov	r0, r4
 800cc66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc68:	3468      	adds	r4, #104	; 0x68
 800cc6a:	e7d9      	b.n	800cc20 <__sfp+0x1c>
 800cc6c:	2104      	movs	r1, #4
 800cc6e:	4638      	mov	r0, r7
 800cc70:	f7ff ff62 	bl	800cb38 <__sfmoreglue>
 800cc74:	4604      	mov	r4, r0
 800cc76:	6030      	str	r0, [r6, #0]
 800cc78:	2800      	cmp	r0, #0
 800cc7a:	d1d5      	bne.n	800cc28 <__sfp+0x24>
 800cc7c:	f7ff ff78 	bl	800cb70 <__sfp_lock_release>
 800cc80:	230c      	movs	r3, #12
 800cc82:	603b      	str	r3, [r7, #0]
 800cc84:	e7ee      	b.n	800cc64 <__sfp+0x60>
 800cc86:	bf00      	nop
 800cc88:	0800d25c 	.word	0x0800d25c
 800cc8c:	ffff0001 	.word	0xffff0001

0800cc90 <_fwalk_reent>:
 800cc90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc94:	4606      	mov	r6, r0
 800cc96:	4688      	mov	r8, r1
 800cc98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cc9c:	2700      	movs	r7, #0
 800cc9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cca2:	f1b9 0901 	subs.w	r9, r9, #1
 800cca6:	d505      	bpl.n	800ccb4 <_fwalk_reent+0x24>
 800cca8:	6824      	ldr	r4, [r4, #0]
 800ccaa:	2c00      	cmp	r4, #0
 800ccac:	d1f7      	bne.n	800cc9e <_fwalk_reent+0xe>
 800ccae:	4638      	mov	r0, r7
 800ccb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccb4:	89ab      	ldrh	r3, [r5, #12]
 800ccb6:	2b01      	cmp	r3, #1
 800ccb8:	d907      	bls.n	800ccca <_fwalk_reent+0x3a>
 800ccba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ccbe:	3301      	adds	r3, #1
 800ccc0:	d003      	beq.n	800ccca <_fwalk_reent+0x3a>
 800ccc2:	4629      	mov	r1, r5
 800ccc4:	4630      	mov	r0, r6
 800ccc6:	47c0      	blx	r8
 800ccc8:	4307      	orrs	r7, r0
 800ccca:	3568      	adds	r5, #104	; 0x68
 800cccc:	e7e9      	b.n	800cca2 <_fwalk_reent+0x12>

0800ccce <__retarget_lock_init_recursive>:
 800ccce:	4770      	bx	lr

0800ccd0 <__retarget_lock_acquire_recursive>:
 800ccd0:	4770      	bx	lr

0800ccd2 <__retarget_lock_release_recursive>:
 800ccd2:	4770      	bx	lr

0800ccd4 <__swhatbuf_r>:
 800ccd4:	b570      	push	{r4, r5, r6, lr}
 800ccd6:	460e      	mov	r6, r1
 800ccd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccdc:	2900      	cmp	r1, #0
 800ccde:	b096      	sub	sp, #88	; 0x58
 800cce0:	4614      	mov	r4, r2
 800cce2:	461d      	mov	r5, r3
 800cce4:	da08      	bge.n	800ccf8 <__swhatbuf_r+0x24>
 800cce6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ccea:	2200      	movs	r2, #0
 800ccec:	602a      	str	r2, [r5, #0]
 800ccee:	061a      	lsls	r2, r3, #24
 800ccf0:	d410      	bmi.n	800cd14 <__swhatbuf_r+0x40>
 800ccf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ccf6:	e00e      	b.n	800cd16 <__swhatbuf_r+0x42>
 800ccf8:	466a      	mov	r2, sp
 800ccfa:	f000 f963 	bl	800cfc4 <_fstat_r>
 800ccfe:	2800      	cmp	r0, #0
 800cd00:	dbf1      	blt.n	800cce6 <__swhatbuf_r+0x12>
 800cd02:	9a01      	ldr	r2, [sp, #4]
 800cd04:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cd08:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cd0c:	425a      	negs	r2, r3
 800cd0e:	415a      	adcs	r2, r3
 800cd10:	602a      	str	r2, [r5, #0]
 800cd12:	e7ee      	b.n	800ccf2 <__swhatbuf_r+0x1e>
 800cd14:	2340      	movs	r3, #64	; 0x40
 800cd16:	2000      	movs	r0, #0
 800cd18:	6023      	str	r3, [r4, #0]
 800cd1a:	b016      	add	sp, #88	; 0x58
 800cd1c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cd20 <__smakebuf_r>:
 800cd20:	898b      	ldrh	r3, [r1, #12]
 800cd22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cd24:	079d      	lsls	r5, r3, #30
 800cd26:	4606      	mov	r6, r0
 800cd28:	460c      	mov	r4, r1
 800cd2a:	d507      	bpl.n	800cd3c <__smakebuf_r+0x1c>
 800cd2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cd30:	6023      	str	r3, [r4, #0]
 800cd32:	6123      	str	r3, [r4, #16]
 800cd34:	2301      	movs	r3, #1
 800cd36:	6163      	str	r3, [r4, #20]
 800cd38:	b002      	add	sp, #8
 800cd3a:	bd70      	pop	{r4, r5, r6, pc}
 800cd3c:	ab01      	add	r3, sp, #4
 800cd3e:	466a      	mov	r2, sp
 800cd40:	f7ff ffc8 	bl	800ccd4 <__swhatbuf_r>
 800cd44:	9900      	ldr	r1, [sp, #0]
 800cd46:	4605      	mov	r5, r0
 800cd48:	4630      	mov	r0, r6
 800cd4a:	f7fd fae9 	bl	800a320 <_malloc_r>
 800cd4e:	b948      	cbnz	r0, 800cd64 <__smakebuf_r+0x44>
 800cd50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd54:	059a      	lsls	r2, r3, #22
 800cd56:	d4ef      	bmi.n	800cd38 <__smakebuf_r+0x18>
 800cd58:	f023 0303 	bic.w	r3, r3, #3
 800cd5c:	f043 0302 	orr.w	r3, r3, #2
 800cd60:	81a3      	strh	r3, [r4, #12]
 800cd62:	e7e3      	b.n	800cd2c <__smakebuf_r+0xc>
 800cd64:	4b0d      	ldr	r3, [pc, #52]	; (800cd9c <__smakebuf_r+0x7c>)
 800cd66:	62b3      	str	r3, [r6, #40]	; 0x28
 800cd68:	89a3      	ldrh	r3, [r4, #12]
 800cd6a:	6020      	str	r0, [r4, #0]
 800cd6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd70:	81a3      	strh	r3, [r4, #12]
 800cd72:	9b00      	ldr	r3, [sp, #0]
 800cd74:	6163      	str	r3, [r4, #20]
 800cd76:	9b01      	ldr	r3, [sp, #4]
 800cd78:	6120      	str	r0, [r4, #16]
 800cd7a:	b15b      	cbz	r3, 800cd94 <__smakebuf_r+0x74>
 800cd7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd80:	4630      	mov	r0, r6
 800cd82:	f000 f931 	bl	800cfe8 <_isatty_r>
 800cd86:	b128      	cbz	r0, 800cd94 <__smakebuf_r+0x74>
 800cd88:	89a3      	ldrh	r3, [r4, #12]
 800cd8a:	f023 0303 	bic.w	r3, r3, #3
 800cd8e:	f043 0301 	orr.w	r3, r3, #1
 800cd92:	81a3      	strh	r3, [r4, #12]
 800cd94:	89a0      	ldrh	r0, [r4, #12]
 800cd96:	4305      	orrs	r5, r0
 800cd98:	81a5      	strh	r5, [r4, #12]
 800cd9a:	e7cd      	b.n	800cd38 <__smakebuf_r+0x18>
 800cd9c:	0800cb2d 	.word	0x0800cb2d

0800cda0 <__ascii_mbtowc>:
 800cda0:	b082      	sub	sp, #8
 800cda2:	b901      	cbnz	r1, 800cda6 <__ascii_mbtowc+0x6>
 800cda4:	a901      	add	r1, sp, #4
 800cda6:	b142      	cbz	r2, 800cdba <__ascii_mbtowc+0x1a>
 800cda8:	b14b      	cbz	r3, 800cdbe <__ascii_mbtowc+0x1e>
 800cdaa:	7813      	ldrb	r3, [r2, #0]
 800cdac:	600b      	str	r3, [r1, #0]
 800cdae:	7812      	ldrb	r2, [r2, #0]
 800cdb0:	1e10      	subs	r0, r2, #0
 800cdb2:	bf18      	it	ne
 800cdb4:	2001      	movne	r0, #1
 800cdb6:	b002      	add	sp, #8
 800cdb8:	4770      	bx	lr
 800cdba:	4610      	mov	r0, r2
 800cdbc:	e7fb      	b.n	800cdb6 <__ascii_mbtowc+0x16>
 800cdbe:	f06f 0001 	mvn.w	r0, #1
 800cdc2:	e7f8      	b.n	800cdb6 <__ascii_mbtowc+0x16>

0800cdc4 <memmove>:
 800cdc4:	4288      	cmp	r0, r1
 800cdc6:	b510      	push	{r4, lr}
 800cdc8:	eb01 0402 	add.w	r4, r1, r2
 800cdcc:	d902      	bls.n	800cdd4 <memmove+0x10>
 800cdce:	4284      	cmp	r4, r0
 800cdd0:	4623      	mov	r3, r4
 800cdd2:	d807      	bhi.n	800cde4 <memmove+0x20>
 800cdd4:	1e43      	subs	r3, r0, #1
 800cdd6:	42a1      	cmp	r1, r4
 800cdd8:	d008      	beq.n	800cdec <memmove+0x28>
 800cdda:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cdde:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cde2:	e7f8      	b.n	800cdd6 <memmove+0x12>
 800cde4:	4402      	add	r2, r0
 800cde6:	4601      	mov	r1, r0
 800cde8:	428a      	cmp	r2, r1
 800cdea:	d100      	bne.n	800cdee <memmove+0x2a>
 800cdec:	bd10      	pop	{r4, pc}
 800cdee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cdf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cdf6:	e7f7      	b.n	800cde8 <memmove+0x24>

0800cdf8 <_realloc_r>:
 800cdf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdfc:	4680      	mov	r8, r0
 800cdfe:	4614      	mov	r4, r2
 800ce00:	460e      	mov	r6, r1
 800ce02:	b921      	cbnz	r1, 800ce0e <_realloc_r+0x16>
 800ce04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce08:	4611      	mov	r1, r2
 800ce0a:	f7fd ba89 	b.w	800a320 <_malloc_r>
 800ce0e:	b92a      	cbnz	r2, 800ce1c <_realloc_r+0x24>
 800ce10:	f7fd fa1a 	bl	800a248 <_free_r>
 800ce14:	4625      	mov	r5, r4
 800ce16:	4628      	mov	r0, r5
 800ce18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce1c:	f000 f906 	bl	800d02c <_malloc_usable_size_r>
 800ce20:	4284      	cmp	r4, r0
 800ce22:	4607      	mov	r7, r0
 800ce24:	d802      	bhi.n	800ce2c <_realloc_r+0x34>
 800ce26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ce2a:	d812      	bhi.n	800ce52 <_realloc_r+0x5a>
 800ce2c:	4621      	mov	r1, r4
 800ce2e:	4640      	mov	r0, r8
 800ce30:	f7fd fa76 	bl	800a320 <_malloc_r>
 800ce34:	4605      	mov	r5, r0
 800ce36:	2800      	cmp	r0, #0
 800ce38:	d0ed      	beq.n	800ce16 <_realloc_r+0x1e>
 800ce3a:	42bc      	cmp	r4, r7
 800ce3c:	4622      	mov	r2, r4
 800ce3e:	4631      	mov	r1, r6
 800ce40:	bf28      	it	cs
 800ce42:	463a      	movcs	r2, r7
 800ce44:	f7fd f9ea 	bl	800a21c <memcpy>
 800ce48:	4631      	mov	r1, r6
 800ce4a:	4640      	mov	r0, r8
 800ce4c:	f7fd f9fc 	bl	800a248 <_free_r>
 800ce50:	e7e1      	b.n	800ce16 <_realloc_r+0x1e>
 800ce52:	4635      	mov	r5, r6
 800ce54:	e7df      	b.n	800ce16 <_realloc_r+0x1e>

0800ce56 <_raise_r>:
 800ce56:	291f      	cmp	r1, #31
 800ce58:	b538      	push	{r3, r4, r5, lr}
 800ce5a:	4604      	mov	r4, r0
 800ce5c:	460d      	mov	r5, r1
 800ce5e:	d904      	bls.n	800ce6a <_raise_r+0x14>
 800ce60:	2316      	movs	r3, #22
 800ce62:	6003      	str	r3, [r0, #0]
 800ce64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ce68:	bd38      	pop	{r3, r4, r5, pc}
 800ce6a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ce6c:	b112      	cbz	r2, 800ce74 <_raise_r+0x1e>
 800ce6e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ce72:	b94b      	cbnz	r3, 800ce88 <_raise_r+0x32>
 800ce74:	4620      	mov	r0, r4
 800ce76:	f000 f831 	bl	800cedc <_getpid_r>
 800ce7a:	462a      	mov	r2, r5
 800ce7c:	4601      	mov	r1, r0
 800ce7e:	4620      	mov	r0, r4
 800ce80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce84:	f000 b818 	b.w	800ceb8 <_kill_r>
 800ce88:	2b01      	cmp	r3, #1
 800ce8a:	d00a      	beq.n	800cea2 <_raise_r+0x4c>
 800ce8c:	1c59      	adds	r1, r3, #1
 800ce8e:	d103      	bne.n	800ce98 <_raise_r+0x42>
 800ce90:	2316      	movs	r3, #22
 800ce92:	6003      	str	r3, [r0, #0]
 800ce94:	2001      	movs	r0, #1
 800ce96:	e7e7      	b.n	800ce68 <_raise_r+0x12>
 800ce98:	2400      	movs	r4, #0
 800ce9a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ce9e:	4628      	mov	r0, r5
 800cea0:	4798      	blx	r3
 800cea2:	2000      	movs	r0, #0
 800cea4:	e7e0      	b.n	800ce68 <_raise_r+0x12>
	...

0800cea8 <raise>:
 800cea8:	4b02      	ldr	r3, [pc, #8]	; (800ceb4 <raise+0xc>)
 800ceaa:	4601      	mov	r1, r0
 800ceac:	6818      	ldr	r0, [r3, #0]
 800ceae:	f7ff bfd2 	b.w	800ce56 <_raise_r>
 800ceb2:	bf00      	nop
 800ceb4:	20000044 	.word	0x20000044

0800ceb8 <_kill_r>:
 800ceb8:	b538      	push	{r3, r4, r5, lr}
 800ceba:	4d07      	ldr	r5, [pc, #28]	; (800ced8 <_kill_r+0x20>)
 800cebc:	2300      	movs	r3, #0
 800cebe:	4604      	mov	r4, r0
 800cec0:	4608      	mov	r0, r1
 800cec2:	4611      	mov	r1, r2
 800cec4:	602b      	str	r3, [r5, #0]
 800cec6:	f7fa f88d 	bl	8006fe4 <_kill>
 800ceca:	1c43      	adds	r3, r0, #1
 800cecc:	d102      	bne.n	800ced4 <_kill_r+0x1c>
 800cece:	682b      	ldr	r3, [r5, #0]
 800ced0:	b103      	cbz	r3, 800ced4 <_kill_r+0x1c>
 800ced2:	6023      	str	r3, [r4, #0]
 800ced4:	bd38      	pop	{r3, r4, r5, pc}
 800ced6:	bf00      	nop
 800ced8:	200005a0 	.word	0x200005a0

0800cedc <_getpid_r>:
 800cedc:	f7fa b87a 	b.w	8006fd4 <_getpid>

0800cee0 <__sread>:
 800cee0:	b510      	push	{r4, lr}
 800cee2:	460c      	mov	r4, r1
 800cee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cee8:	f000 f8a8 	bl	800d03c <_read_r>
 800ceec:	2800      	cmp	r0, #0
 800ceee:	bfab      	itete	ge
 800cef0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cef2:	89a3      	ldrhlt	r3, [r4, #12]
 800cef4:	181b      	addge	r3, r3, r0
 800cef6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cefa:	bfac      	ite	ge
 800cefc:	6563      	strge	r3, [r4, #84]	; 0x54
 800cefe:	81a3      	strhlt	r3, [r4, #12]
 800cf00:	bd10      	pop	{r4, pc}

0800cf02 <__swrite>:
 800cf02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf06:	461f      	mov	r7, r3
 800cf08:	898b      	ldrh	r3, [r1, #12]
 800cf0a:	05db      	lsls	r3, r3, #23
 800cf0c:	4605      	mov	r5, r0
 800cf0e:	460c      	mov	r4, r1
 800cf10:	4616      	mov	r6, r2
 800cf12:	d505      	bpl.n	800cf20 <__swrite+0x1e>
 800cf14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf18:	2302      	movs	r3, #2
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	f000 f874 	bl	800d008 <_lseek_r>
 800cf20:	89a3      	ldrh	r3, [r4, #12]
 800cf22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cf2a:	81a3      	strh	r3, [r4, #12]
 800cf2c:	4632      	mov	r2, r6
 800cf2e:	463b      	mov	r3, r7
 800cf30:	4628      	mov	r0, r5
 800cf32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf36:	f000 b823 	b.w	800cf80 <_write_r>

0800cf3a <__sseek>:
 800cf3a:	b510      	push	{r4, lr}
 800cf3c:	460c      	mov	r4, r1
 800cf3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf42:	f000 f861 	bl	800d008 <_lseek_r>
 800cf46:	1c43      	adds	r3, r0, #1
 800cf48:	89a3      	ldrh	r3, [r4, #12]
 800cf4a:	bf15      	itete	ne
 800cf4c:	6560      	strne	r0, [r4, #84]	; 0x54
 800cf4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cf52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cf56:	81a3      	strheq	r3, [r4, #12]
 800cf58:	bf18      	it	ne
 800cf5a:	81a3      	strhne	r3, [r4, #12]
 800cf5c:	bd10      	pop	{r4, pc}

0800cf5e <__sclose>:
 800cf5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf62:	f000 b81f 	b.w	800cfa4 <_close_r>

0800cf66 <__ascii_wctomb>:
 800cf66:	b149      	cbz	r1, 800cf7c <__ascii_wctomb+0x16>
 800cf68:	2aff      	cmp	r2, #255	; 0xff
 800cf6a:	bf85      	ittet	hi
 800cf6c:	238a      	movhi	r3, #138	; 0x8a
 800cf6e:	6003      	strhi	r3, [r0, #0]
 800cf70:	700a      	strbls	r2, [r1, #0]
 800cf72:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800cf76:	bf98      	it	ls
 800cf78:	2001      	movls	r0, #1
 800cf7a:	4770      	bx	lr
 800cf7c:	4608      	mov	r0, r1
 800cf7e:	4770      	bx	lr

0800cf80 <_write_r>:
 800cf80:	b538      	push	{r3, r4, r5, lr}
 800cf82:	4d07      	ldr	r5, [pc, #28]	; (800cfa0 <_write_r+0x20>)
 800cf84:	4604      	mov	r4, r0
 800cf86:	4608      	mov	r0, r1
 800cf88:	4611      	mov	r1, r2
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	602a      	str	r2, [r5, #0]
 800cf8e:	461a      	mov	r2, r3
 800cf90:	f7fa f85f 	bl	8007052 <_write>
 800cf94:	1c43      	adds	r3, r0, #1
 800cf96:	d102      	bne.n	800cf9e <_write_r+0x1e>
 800cf98:	682b      	ldr	r3, [r5, #0]
 800cf9a:	b103      	cbz	r3, 800cf9e <_write_r+0x1e>
 800cf9c:	6023      	str	r3, [r4, #0]
 800cf9e:	bd38      	pop	{r3, r4, r5, pc}
 800cfa0:	200005a0 	.word	0x200005a0

0800cfa4 <_close_r>:
 800cfa4:	b538      	push	{r3, r4, r5, lr}
 800cfa6:	4d06      	ldr	r5, [pc, #24]	; (800cfc0 <_close_r+0x1c>)
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	4604      	mov	r4, r0
 800cfac:	4608      	mov	r0, r1
 800cfae:	602b      	str	r3, [r5, #0]
 800cfb0:	f7fa f86b 	bl	800708a <_close>
 800cfb4:	1c43      	adds	r3, r0, #1
 800cfb6:	d102      	bne.n	800cfbe <_close_r+0x1a>
 800cfb8:	682b      	ldr	r3, [r5, #0]
 800cfba:	b103      	cbz	r3, 800cfbe <_close_r+0x1a>
 800cfbc:	6023      	str	r3, [r4, #0]
 800cfbe:	bd38      	pop	{r3, r4, r5, pc}
 800cfc0:	200005a0 	.word	0x200005a0

0800cfc4 <_fstat_r>:
 800cfc4:	b538      	push	{r3, r4, r5, lr}
 800cfc6:	4d07      	ldr	r5, [pc, #28]	; (800cfe4 <_fstat_r+0x20>)
 800cfc8:	2300      	movs	r3, #0
 800cfca:	4604      	mov	r4, r0
 800cfcc:	4608      	mov	r0, r1
 800cfce:	4611      	mov	r1, r2
 800cfd0:	602b      	str	r3, [r5, #0]
 800cfd2:	f7fa f866 	bl	80070a2 <_fstat>
 800cfd6:	1c43      	adds	r3, r0, #1
 800cfd8:	d102      	bne.n	800cfe0 <_fstat_r+0x1c>
 800cfda:	682b      	ldr	r3, [r5, #0]
 800cfdc:	b103      	cbz	r3, 800cfe0 <_fstat_r+0x1c>
 800cfde:	6023      	str	r3, [r4, #0]
 800cfe0:	bd38      	pop	{r3, r4, r5, pc}
 800cfe2:	bf00      	nop
 800cfe4:	200005a0 	.word	0x200005a0

0800cfe8 <_isatty_r>:
 800cfe8:	b538      	push	{r3, r4, r5, lr}
 800cfea:	4d06      	ldr	r5, [pc, #24]	; (800d004 <_isatty_r+0x1c>)
 800cfec:	2300      	movs	r3, #0
 800cfee:	4604      	mov	r4, r0
 800cff0:	4608      	mov	r0, r1
 800cff2:	602b      	str	r3, [r5, #0]
 800cff4:	f7fa f865 	bl	80070c2 <_isatty>
 800cff8:	1c43      	adds	r3, r0, #1
 800cffa:	d102      	bne.n	800d002 <_isatty_r+0x1a>
 800cffc:	682b      	ldr	r3, [r5, #0]
 800cffe:	b103      	cbz	r3, 800d002 <_isatty_r+0x1a>
 800d000:	6023      	str	r3, [r4, #0]
 800d002:	bd38      	pop	{r3, r4, r5, pc}
 800d004:	200005a0 	.word	0x200005a0

0800d008 <_lseek_r>:
 800d008:	b538      	push	{r3, r4, r5, lr}
 800d00a:	4d07      	ldr	r5, [pc, #28]	; (800d028 <_lseek_r+0x20>)
 800d00c:	4604      	mov	r4, r0
 800d00e:	4608      	mov	r0, r1
 800d010:	4611      	mov	r1, r2
 800d012:	2200      	movs	r2, #0
 800d014:	602a      	str	r2, [r5, #0]
 800d016:	461a      	mov	r2, r3
 800d018:	f7fa f85e 	bl	80070d8 <_lseek>
 800d01c:	1c43      	adds	r3, r0, #1
 800d01e:	d102      	bne.n	800d026 <_lseek_r+0x1e>
 800d020:	682b      	ldr	r3, [r5, #0]
 800d022:	b103      	cbz	r3, 800d026 <_lseek_r+0x1e>
 800d024:	6023      	str	r3, [r4, #0]
 800d026:	bd38      	pop	{r3, r4, r5, pc}
 800d028:	200005a0 	.word	0x200005a0

0800d02c <_malloc_usable_size_r>:
 800d02c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d030:	1f18      	subs	r0, r3, #4
 800d032:	2b00      	cmp	r3, #0
 800d034:	bfbc      	itt	lt
 800d036:	580b      	ldrlt	r3, [r1, r0]
 800d038:	18c0      	addlt	r0, r0, r3
 800d03a:	4770      	bx	lr

0800d03c <_read_r>:
 800d03c:	b538      	push	{r3, r4, r5, lr}
 800d03e:	4d07      	ldr	r5, [pc, #28]	; (800d05c <_read_r+0x20>)
 800d040:	4604      	mov	r4, r0
 800d042:	4608      	mov	r0, r1
 800d044:	4611      	mov	r1, r2
 800d046:	2200      	movs	r2, #0
 800d048:	602a      	str	r2, [r5, #0]
 800d04a:	461a      	mov	r2, r3
 800d04c:	f7f9 ffe4 	bl	8007018 <_read>
 800d050:	1c43      	adds	r3, r0, #1
 800d052:	d102      	bne.n	800d05a <_read_r+0x1e>
 800d054:	682b      	ldr	r3, [r5, #0]
 800d056:	b103      	cbz	r3, 800d05a <_read_r+0x1e>
 800d058:	6023      	str	r3, [r4, #0]
 800d05a:	bd38      	pop	{r3, r4, r5, pc}
 800d05c:	200005a0 	.word	0x200005a0

0800d060 <_init>:
 800d060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d062:	bf00      	nop
 800d064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d066:	bc08      	pop	{r3}
 800d068:	469e      	mov	lr, r3
 800d06a:	4770      	bx	lr

0800d06c <_fini>:
 800d06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d06e:	bf00      	nop
 800d070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d072:	bc08      	pop	{r3}
 800d074:	469e      	mov	lr, r3
 800d076:	4770      	bx	lr
